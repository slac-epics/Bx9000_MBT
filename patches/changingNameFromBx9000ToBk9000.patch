diff --git a/BK9KSoftTestApp/Db/Makefile b/BK9KSoftTestApp/Db/Makefile
index eb46dc1..d5309a9 100644
--- a/BK9KSoftTestApp/Db/Makefile
+++ b/BK9KSoftTestApp/Db/Makefile
@@ -11,12 +11,35 @@ include $(TOP)/configure/CONFIG
 # Create and install (or just install)
 # databases, templates, substitutions like this
 # DB += dbExample1.db
+USR_VPATH=../../../Bk9000_MBTApp/Db
+DB += Bk9000.db
+DB += KL1104.db
+DB += KL1124.db
+DB += KL1408.db
+DB += KL2114.db
+DB += KL2124.db
+DB += KL2408.db
+DB += KL2502.db
+DB += KL2512.db
+DB += KL2622.db
+DB += KL3064.db
+DB += KL3102.db
+DB += KL3312.db
+DB += KL3314.db
+DB += KL3408.db
+DB += KL3468.db
+DB += KL4002.db
+DB += KL4132.db
 
 #----------------------------------------------------
 # If <anyname>.db template is not named <anyname>*.template add
 # <anyname>_TEMPLATE = <templatename>
 
 include $(TOP)/configure/RULES
+
 #----------------------------------------
 #  ADD RULES AFTER THIS LINE
 
+dump_env:
+	@echo USR_VPATH=$(USR_VPATH)
+	@echo VPATH=$(VPATH)
diff --git a/BK9KSoftTestApp/src/BK9KSoftTestInclude.dbd b/BK9KSoftTestApp/src/BK9KSoftTestInclude.dbd
index d027d80..808b061 100644
--- a/BK9KSoftTestApp/src/BK9KSoftTestInclude.dbd
+++ b/BK9KSoftTestApp/src/BK9KSoftTestInclude.dbd
@@ -1,6 +1,6 @@
 include "base.dbd"
 include "ModBusTCPClnt.dbd"
-include "Bx9000_MBT.dbd"
+include "Bk9000_MBT.dbd"
 #registrar(mySubRegistrar)
 #variable(mySubDebug)
 #registrar(sncExampleRegistrar)
diff --git a/BK9KSoftTestApp/src/Makefile b/BK9KSoftTestApp/src/Makefile
index 03cb56c..28cbd9a 100644
--- a/BK9KSoftTestApp/src/Makefile
+++ b/BK9KSoftTestApp/src/Makefile
@@ -23,8 +23,8 @@ BK9KSoftTest_SRCS_vxWorks += -nil-
 # The following adds support from base/src/vxWorks
 BK9KSoftTest_OBJS_vxWorks += $(EPICS_BASE_BIN)/vxComLibrary
 
-# We need ModBusTCPClnt and Bx9000_MBT
-BK9KSoftTest_LIBS += Bx9000_MBT
+# We need ModBusTCPClnt and Bk9000_MBT
+BK9KSoftTest_LIBS += Bk9000_MBT
 BK9KSoftTest_LIBS += ModBusTCPClnt
 
 
diff --git a/Bk9000Screens b/Bk9000Screens
new file mode 120000
index 0000000..bde02c8
--- /dev/null
+++ b/Bk9000Screens
@@ -0,0 +1 @@
+Bk9000_MBTApp/srcDisplay/
\ No newline at end of file
diff --git a/Bk9000_MBTApp/Db/Bk9000.substitutions b/Bk9000_MBTApp/Db/Bk9000.substitutions
new file mode 100644
index 0000000..bd1fc2b
--- /dev/null
+++ b/Bk9000_MBTApp/Db/Bk9000.substitutions
@@ -0,0 +1,42 @@
+#==============================================================================
+#
+# Abs:  Beckhoff Bk9000 Controller
+#
+# Name: Bk9000.substitutions
+#
+# Auth: 22-May-2009, Bruce Hill			(bhill)
+# Rev : dd-mmm-yyyy, Reviewer's Name	(USERNAME)
+#
+#==============================================================================
+#
+
+file Bk9000Info.template
+{
+	pattern
+	{	REPROCEVT	}
+	{	188			}
+}
+
+file Bk9000InstalledBTs.template
+{
+	pattern
+	{	SLOT	}
+	{	0		}
+	{	1		}
+	{	2		}
+	{	3		}
+	{	4		}
+	{	5		}
+	{	6		}
+	{	7		}
+	{	8		}
+	{	9		}
+	{	10		}
+	{	11		}
+	{	12		}
+	{	13		}
+	{	14		}
+	{	15		}
+	{	16		}
+}
+
diff --git a/Bk9000_MBTApp/Db/Bk9000.tpl-arch b/Bk9000_MBTApp/Db/Bk9000.tpl-arch
new file mode 100644
index 0000000..eee3eb1
--- /dev/null
+++ b/Bk9000_MBTApp/Db/Bk9000.tpl-arch
@@ -0,0 +1,7 @@
+# Archive Beckhoff Bk9000 Controller PV list
+$(COUPLER_LOC):CplrReady		1	monitor
+$(COUPLER_LOC):CplrLinkStat		1	monitor
+$(COUPLER_LOC):CplrName			30
+$(COUPLER_LOC):CplrTLostConn	10
+$(COUPLER_LOC):CplrTSetConn		10
+$(COUPLER_LOC):CplrTLastTry		10
diff --git a/Bk9000_MBTApp/Db/Bk9000.tpl-req b/Bk9000_MBTApp/Db/Bk9000.tpl-req
new file mode 100644
index 0000000..099d1a9
--- /dev/null
+++ b/Bk9000_MBTApp/Db/Bk9000.tpl-req
@@ -0,0 +1,2 @@
+# Autosave Beckhoff Bk9000 Controller PV list
+# (empty)
diff --git a/Bk9000_MBTApp/Db/Bk9000Info-lcls.template b/Bk9000_MBTApp/Db/Bk9000Info-lcls.template
new file mode 100644
index 0000000..ec3868b
--- /dev/null
+++ b/Bk9000_MBTApp/Db/Bk9000Info-lcls.template
@@ -0,0 +1,201 @@
+record(stringin, "$(APC):LOCATION") {
+  field(VAL, "$(LOCATION)")
+  field(PINI, "YES")
+}
+record(longin, "$(APC):CPLRCOUTWDS") {
+  field(DESC, "Complex output words")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:COWCNT")
+}
+
+record(longin, "$(APC):CPLRCINWDS") {
+  field(DESC, "Complex input words")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CIWCNT")
+}
+
+record(longin, "$(APC):CPLRDOUTBITS") {
+  field(DESC, "Digital output bits")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:DOBCNT")
+}
+
+record(longin, "$(APC):CPLRDINBITS") {
+  field(DESC, "Digital input bits")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:DIBCNT")
+}
+
+record(longin, "$(APC):CPLRNOFCONN") {
+  field(DESC, "Nth of Connection")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:NOFCONN")
+}
+
+record(longin, "$(APC):CPLRNOFEXCP") {
+  field(DESC, "Nth of Exception")
+  field(SCAN, "1 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:NOFEXCP")
+}
+
+record(longin, "$(APC):CPLRNOFPKTS") {
+  field(DESC, "Number of Packets Sent")
+  field(SCAN, "1 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:NOFPKTS")
+}
+
+record(longin, "$(APC):CPLRNOFSIGS") {
+  field(DESC, "Number of Signals of CPLR")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:NOFSIGS")
+}
+
+record(longin, "$(APC):CPLROPTHRDID") {
+  field(DESC, "Op thread ID")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:OPTHRDID")
+}
+
+record(mbbi, "$(APC):CPLRREADY") {
+  field(DESC, "Is Coupler Ready")
+  field(SCAN, "1 second")
+  field(PINI, "YES")
+  field(PHAS, "2")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CPLRRDY")
+  field(ZRVL, "0")
+  field(ONVL, "1")
+  field(ZRST, "Not Ready")
+  field(ONST, "Ready")
+  field(ZRSV, "MAJOR")
+  field(ONSV, "NO_ALARM")
+  field(SHFT, "0")
+  field(UNSV, "INVALID")
+  field(FLNK, "$(APC):CPLRREPROCCALC")
+}
+
+record(calcout, "$(APC):CPLRREPROCCALC") {
+  field(SCAN, "Passive")
+  field(CALC, "A")
+  field(INPA, "$(APC):CPLRREADY")
+  field(INPB, "$(APC):CPLRREPROCCALC.VAL")
+  field(OUT,  "$(APC):CPLRREPROCFOUT.SELN")
+  field(FLNK, "$(APC):CPLRREPROCFOUT")
+  field(OCAL, "((A=1)&&(B#1))?1:0")
+  field(VAL,  "1")
+  field(DESC, "Calc reprocess")
+  field(OOPT, "Every Time")
+  field(DOPT, "Use OCAL")
+  field(PINI, "NO")
+}
+
+record(fanout, "$(APC):CPLRREPROCFOUT") {
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Passive")
+  field(SELM, "Mask")
+  field(LNK1, "$(APC):OUTPUTREPROCEVT")
+  field(PINI, "NO")
+  field(SELN, "")
+}
+
+record(event, "$(APC):OUTPUTREPROCEVT")
+{
+  field(DESC, "Post event to reproc")
+  field(SCAN, "Passive")
+  field(VAL,  "$(REPROCEVT)")
+}
+
+record(mbbi, "$(APC):CPLRLINKSTAT") {
+  field(DESC, "Coupler MBT Link Stat")
+  field(SCAN, "1 second")
+  field(PINI, "YES")
+  field(PHAS, "2")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:LINKSTAT")
+  field(ZRVL, "0")
+  field(ONVL, "1")
+  field(TWVL, "2")
+  field(THVL, "3")
+  field(ZRST, "Link Down")
+  field(ONST, "Link OK")
+  field(TWST, "Connecting")
+  field(THST, "Unsupported")
+  field(SHFT, "0")
+  field(UNSV, "INVALID")
+}
+
+record(stringin, "$(APC):CPLRNAME") {
+  field(DESC, "Name of Coupler")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CPLRNAME")
+}
+
+record(stringin, "$(APC):CPLRIPADDR") {
+  field(DESC, "IPAddr of Coupler")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CPLRIP")
+}
+
+record(stringin, "$(APC):CPLRTLOSTCONN") {
+  field(DESC, "Time of lost connection")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:TLSTCONN")
+}
+
+record(stringin, "$(APC):CPLRTSETCONN") {
+  field(DESC, "Time of set connection")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:TSETCONN")
+}
+
+record(stringin, "$(APC):CPLRTLASTTRY") {
+  field(DESC, "Time of last try connect")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:TLASTTRY")
+}
+
+record(stringin, "$(APC):CPLRID") {
+  field(DESC, "ID of Coupler")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CPLRID")
+}
+
+record(stringin, "$(APC):CPLROPTHRDNAME") {
+  field(DESC, "Op Thread Name of Coupler")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:OPTHRDNM")
+}
+
+
diff --git a/Bk9000_MBTApp/Db/Bk9000Info.template b/Bk9000_MBTApp/Db/Bk9000Info.template
new file mode 100644
index 0000000..fcdf7b8
--- /dev/null
+++ b/Bk9000_MBTApp/Db/Bk9000Info.template
@@ -0,0 +1,217 @@
+record(longin, "$(COUPLER_LOC):CplrCoutWds")
+{
+  field(DESC, "Complex output words")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:COWCNT")
+}
+
+record(longin, "$(COUPLER_LOC):CplrCinWds")
+{
+  field(DESC, "Complex input words")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CIWCNT")
+}
+
+record(longin, "$(COUPLER_LOC):CplrDoutBits")
+{
+  field(DESC, "Digital output bits")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:DOBCNT")
+}
+
+record(longin, "$(COUPLER_LOC):CplrDinBits")
+{
+  field(DESC, "Digital input bits")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:DIBCNT")
+}
+
+record(longin, "$(COUPLER_LOC):CplrNofConn")
+{
+  field(DESC, "Nth of Connection")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:NOFCONN")
+}
+
+record(longin, "$(COUPLER_LOC):CplrNofExcp")
+{
+  field(DESC, "Nth of Exception")
+  field(SCAN, "1 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:NOFEXCP")
+}
+
+record(longin, "$(COUPLER_LOC):CplrNofPkts")
+{
+  field(DESC, "Number of Packets Sent")
+  field(SCAN, "1 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:NOFPKTS")
+}
+
+record(longin, "$(COUPLER_LOC):CplrNofSigs")
+{
+  field(DESC, "Number of Signals of Cplr")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:NOFSIGS")
+}
+
+record(longin, "$(COUPLER_LOC):CplrOpThrdID")
+{
+  field(DESC, "Op thread ID")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:OPTHRDID")
+}
+
+record(mbbi, "$(COUPLER_LOC):CplrReady")
+{
+  field(DESC, "Is Coupler Ready")
+  field(SCAN, "1 second")
+  field(PINI, "YES")
+  field(PHAS, "2")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CPLRRDY")
+  field(ZRVL, "0")
+  field(ONVL, "1")
+  field(ZRST, "Not Ready")
+  field(ONST, "Ready")
+  field(ZRSV, "MAJOR")
+  field(ONSV, "NO_ALARM")
+  field(SHFT, "0")
+  field(UNSV, "INVALID")
+  field(FLNK, "$(COUPLER_LOC):CplrReprocCalc")
+}
+
+record(calcout, "$(COUPLER_LOC):CplrReprocCalc")
+{
+  field(SCAN, "Passive")
+  field(CALC, "A")
+  field(INPA, "$(COUPLER_LOC):CplrReady")
+  field(INPB, "$(COUPLER_LOC):CplrReprocCalc.VAL")
+  field(OUT,  "$(COUPLER_LOC):CplrReprocFout.SELN")
+  field(FLNK, "$(COUPLER_LOC):CplrReprocFout")
+  field(OCAL, "((A=1)&&(B#1))?1:0")
+  field(VAL,  "1")
+  field(DESC, "Calc reprocess")
+  field(OOPT, "Every Time")
+  field(DOPT, "Use OCAL")
+  field(PINI, "NO")
+}
+
+record(fanout, "$(COUPLER_LOC):CplrReprocFout")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Passive")
+  field(SELM, "Mask")
+  field(LNK1, "$(COUPLER_LOC):OutputReprocEvt")
+  field(PINI, "NO")
+  field(SELN, "")
+}
+
+record(event, "$(COUPLER_LOC):OutputReprocEvt")
+{
+  field(DESC, "Post event to reproc")
+  field(SCAN, "Passive")
+  field(VAL,  "$(REPROCEVT)")
+}
+
+record(mbbi, "$(COUPLER_LOC):CplrLinkStat")
+{
+  field(DESC, "Coupler MBT Link Stat")
+  field(SCAN, "1 second")
+  field(PINI, "YES")
+  field(PHAS, "2")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:LINKSTAT")
+  field(ZRVL, "0")
+  field(ONVL, "1")
+  field(TWVL, "2")
+  field(THVL, "3")
+  field(ZRST, "Link Down")
+  field(ONST, "Link OK")
+  field(TWST, "Connecting")
+  field(THST, "Unsupported")
+  field(SHFT, "0")
+  field(UNSV, "INVALID")
+}
+
+record(stringin, "$(COUPLER_LOC):CplrName")
+{
+  field(DESC, "Name of Coupler")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CPLRNAME")
+}
+
+record(stringin, "$(COUPLER_LOC):CplrIPAddr")
+{
+  field(DESC, "IPAddr of Coupler")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CPLRIP")
+}
+
+record(stringin, "$(COUPLER_LOC):CplrTLostConn")
+{
+  field(DESC, "Time of lost connection")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:TLSTCONN")
+}
+
+record(stringin, "$(COUPLER_LOC):CplrTSetConn")
+{
+  field(DESC, "Time of set connection")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:TSETCONN")
+}
+
+record(stringin, "$(COUPLER_LOC):CplrTLastTry")
+{
+  field(DESC, "Time of last try connect")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:TLASTTRY")
+}
+
+record(stringin, "$(COUPLER_LOC):CplrID")
+{
+  field(DESC, "ID of Coupler")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:CPLRID")
+}
+
+record(stringin, "$(COUPLER_LOC):CplrOpThrdName")
+{
+  field(DESC, "Op Thread Name of Coupler")
+  field(SCAN, "Passive")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):0:OPTHRDNM")
+}
+
+
diff --git a/Bk9000_MBTApp/Db/Bk9000InstalledBTs-lcls.template b/Bk9000_MBTApp/Db/Bk9000InstalledBTs-lcls.template
new file mode 100644
index 0000000..632a2fc
--- /dev/null
+++ b/Bk9000_MBTApp/Db/Bk9000InstalledBTs-lcls.template
@@ -0,0 +1,8 @@
+record(longin, "$(APC):CPLRBTSLOT$(SLOT)") {
+  field(DESC, "Bus Terminal Type of slot $(SLOT)")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):$(SLOT):BTTYPE")
+}
+
diff --git a/Bk9000_MBTApp/Db/Bk9000InstalledBTs.template b/Bk9000_MBTApp/Db/Bk9000InstalledBTs.template
new file mode 100644
index 0000000..9f08ab6
--- /dev/null
+++ b/Bk9000_MBTApp/Db/Bk9000InstalledBTs.template
@@ -0,0 +1,9 @@
+record(longin, "$(COUPLER_LOC):CplrBTSlot$(SLOT)")
+{
+  field(DESC, "Bus Terminal Type of slot $(SLOT)")
+  field(SCAN, "10 second")
+  field(PINI, "YES")
+  field(DTYP, "Bk9000_Info")
+  field(INP,  "@$(COUPLER):$(SLOT):BTTYPE")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL1002.substitutions b/Bk9000_MBTApp/Db/KL1002.substitutions
new file mode 100644
index 0000000..f4446e4
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1002.substitutions
@@ -0,0 +1,19 @@
+file KL1002.template
+{
+	pattern
+	{	SLOT,
+		SIG1,		SIG1.DESC,
+		SIG1.ZNAM,	SIG1.ONAM,	SIG1.ZSV,	SIG1.OSV,	SIG1.COSV,	SIG1.SCAN,
+		SIG2,		SIG2.DESC,
+		SIG2.ZNAM,	SIG2.ONAM,	SIG2.ZSV,	SIG2.OSV,	SIG2.COSV,	SIG2.SCAN
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	5
+		$(COUPLER_LOC):KL1002:SLOT$(SLOT):DIN1, "Signal 1 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1002:SLOT$(SLOT):DIN2, "Signal 2 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+	}
+}
\ No newline at end of file
diff --git a/Bk9000_MBTApp/Db/KL1002.template b/Bk9000_MBTApp/Db/KL1002.template
new file mode 100644
index 0000000..1c07a17
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1002.template
@@ -0,0 +1,26 @@
+record(bi, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL1002")
+  field(INP,  "@$(COUPLER_LOC):$(SLOT):R_DIG_IN_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(ZSV,  "$(SIG1.ZSV)")
+  field(OSV,  "$(SIG1.OSV)")
+  field(COSV, "$(SIG1.COSV)")
+}
+
+record(bi, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL1002")
+  field(INP,  "@$(COUPLER_LOC):$(SLOT):R_DIG_IN_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(ZSV,  "$(SIG2.ZSV)")
+  field(OSV,  "$(SIG2.OSV)")
+  field(COSV, "$(SIG2.COSV)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL1104.substitutions b/Bk9000_MBTApp/Db/KL1104.substitutions
new file mode 100644
index 0000000..30de4aa
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1104.substitutions
@@ -0,0 +1,27 @@
+file KL1104.template
+{
+	pattern
+	{	SLOT,
+		SIG1,		SIG1.DESC,
+		SIG1.ZNAM,	SIG1.ONAM,	SIG1.ZSV,	SIG1.OSV,	SIG1.COSV,	SIG1.SCAN,
+		SIG2,		SIG2.DESC,
+		SIG2.ZNAM,	SIG2.ONAM,	SIG2.ZSV,	SIG2.OSV,	SIG2.COSV,	SIG2.SCAN,
+		SIG3,		SIG3.DESC,
+		SIG3.ZNAM,	SIG3.ONAM,	SIG3.ZSV,	SIG3.OSV,	SIG3.COSV,	SIG3.SCAN,
+		SIG4,		SIG4.DESC,
+		SIG4.ZNAM,	SIG4.ONAM,	SIG4.ZSV,	SIG4.OSV,	SIG4.COSV,	SIG4.SCAN
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	5
+		$(COUPLER_LOC):KL1104:SLOT$(SLOT):DIN1, "Signal 1 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1104:SLOT$(SLOT):DIN2, "Signal 2 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1104:SLOT$(SLOT):DIN3, "Signal 3 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1104:SLOT$(SLOT):DIN4, "Signal 4 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second"
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL1104.template b/Bk9000_MBTApp/Db/KL1104.template
new file mode 100644
index 0000000..139e433
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1104.template
@@ -0,0 +1,52 @@
+record(bi, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL1104")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(ZSV,  "$(SIG1.ZSV)")
+  field(OSV,  "$(SIG1.OSV)")
+  field(COSV, "$(SIG1.COSV)")
+}
+
+record(bi, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL1104")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(ZSV,  "$(SIG2.ZSV)")
+  field(OSV,  "$(SIG2.OSV)")
+  field(COSV, "$(SIG2.COSV)")
+}
+
+record(bi, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL1104")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_3")
+  field(ZNAM, "$(SIG3.ZNAM)")
+  field(ONAM, "$(SIG3.ONAM)")
+  field(ZSV,  "$(SIG3.ZSV)")
+  field(OSV,  "$(SIG3.OSV)")
+  field(COSV, "$(SIG3.COSV)")
+}
+
+record(bi, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL1104")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_4")
+  field(ZNAM, "$(SIG4.ZNAM)")
+  field(ONAM, "$(SIG4.ONAM)")
+  field(ZSV,  "$(SIG4.ZSV)")
+  field(OSV,  "$(SIG4.OSV)")
+  field(COSV, "$(SIG4.COSV)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL1124.substitutions b/Bk9000_MBTApp/Db/KL1124.substitutions
new file mode 100644
index 0000000..9f2a934
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1124.substitutions
@@ -0,0 +1,27 @@
+file KL1124.template
+{
+	pattern
+	{	SLOT,
+		SIG1, 		SIG1.DESC,
+		SIG1.ZNAM,	SIG1.ONAM,	SIG1.ZSV,	SIG1.OSV,	SIG1.COSV,	SIG1.SCAN,
+		SIG2, 		SIG2.DESC,
+		SIG2.ZNAM,	SIG2.ONAM,	SIG2.ZSV,	SIG2.OSV,	SIG2.COSV,	SIG2.SCAN,
+		SIG3, 		SIG3.DESC,
+		SIG3.ZNAM,	SIG3.ONAM,	SIG3.ZSV,	SIG3.OSV,	SIG3.COSV,	SIG3.SCAN,
+		SIG4, 		SIG4.DESC,
+		SIG4.ZNAM,	SIG4.ONAM,	SIG4.ZSV,	SIG4.OSV,	SIG4.COSV,	SIG4.SCAN
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	11,
+		$(COUPLER_LOC):KL1124:SLOT$(SLOT):DIN1,	"Signal 1 Description",
+		Off,	On,		NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1124:SLOT$(SLOT):DIN2,	"Signal 2 Description",
+		Off,	On,		NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1124:SLOT$(SLOT):DIN3,	"Signal 3 Description",
+		Off,	On,		NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1124:SLOT$(SLOT):DIN4,	"Signal 4 Description",
+		Off,	On,		NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL1124.template b/Bk9000_MBTApp/Db/KL1124.template
new file mode 100644
index 0000000..748b816
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1124.template
@@ -0,0 +1,52 @@
+record(bi, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL1124")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(ZSV,  "$(SIG1.ZSV)")
+  field(OSV,  "$(SIG1.OSV)")
+  field(COSV, "$(SIG1.COSV)")
+}
+
+record(bi, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL1124")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(ZSV,  "$(SIG2.ZSV)")
+  field(OSV,  "$(SIG2.OSV)")
+  field(COSV, "$(SIG2.COSV)")
+}
+
+record(bi, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL1124")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_3")
+  field(ZNAM, "$(SIG3.ZNAM)")
+  field(ONAM, "$(SIG3.ONAM)")
+  field(ZSV,  "$(SIG3.ZSV)")
+  field(OSV,  "$(SIG3.OSV)")
+  field(COSV, "$(SIG3.COSV)")
+}
+
+record(bi, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL1124")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_4")
+  field(ZNAM, "$(SIG4.ZNAM)")
+  field(ONAM, "$(SIG4.ONAM)")
+  field(ZSV,  "$(SIG4.ZSV)")
+  field(OSV,  "$(SIG4.OSV)")
+  field(COSV, "$(SIG4.COSV)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL1408.substitutions b/Bk9000_MBTApp/Db/KL1408.substitutions
new file mode 100644
index 0000000..4ae5619
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1408.substitutions
@@ -0,0 +1,44 @@
+
+file KL1408.template
+{
+	pattern
+	{	SLOT,
+		SIG1,		SIG1.DESC,
+		SIG1.ZNAM,	SIG1.ONAM,	SIG1.ZSV,	SIG1.OSV,	SIG1.COSV,	SIG1.SCAN,
+		SIG2,		SIG2.DESC,
+		SIG2.ZNAM,	SIG2.ONAM,	SIG2.ZSV,	SIG2.OSV,	SIG2.COSV,	SIG2.SCAN,
+		SIG3,		SIG3.DESC,
+		SIG3.ZNAM,	SIG3.ONAM,	SIG3.ZSV,	SIG3.OSV,	SIG3.COSV,	SIG3.SCAN,
+		SIG4,		SIG4.DESC,
+		SIG4.ZNAM,	SIG4.ONAM,	SIG4.ZSV,	SIG4.OSV,	SIG4.COSV,	SIG4.SCAN
+		SIG5,		SIG5.DESC,
+		SIG5.ZNAM,	SIG5.ONAM,	SIG5.ZSV,	SIG5.OSV,	SIG5.COSV,	SIG5.SCAN
+		SIG6,		SIG6.DESC,
+		SIG6.ZNAM,	SIG6.ONAM,	SIG6.ZSV,	SIG6.OSV,	SIG6.COSV,	SIG6.SCAN
+		SIG7,		SIG7.DESC,
+		SIG7.ZNAM,	SIG7.ONAM,	SIG7.ZSV,	SIG7.OSV,	SIG7.COSV,	SIG7.SCAN
+		SIG8,		SIG8.DESC,
+		SIG8.ZNAM,	SIG8.ONAM,	SIG8.ZSV,	SIG8.OSV,	SIG8.COSV,	SIG8.SCAN
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	7,
+		$(COUPLER_LOC):KL1408:SLOT$(SLOT):DIN1, "Signal 1 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1408:SLOT$(SLOT):DIN2, "Signal 2 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1408:SLOT$(SLOT):DIN3, "Signal 3 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second",
+		$(COUPLER_LOC):KL1408:SLOT$(SLOT):DIN4, "Signal 4 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second"
+		$(COUPLER_LOC):KL1408:SLOT$(SLOT):DIN5, "Signal 5 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second"
+		$(COUPLER_LOC):KL1408:SLOT$(SLOT):DIN6, "Signal 6 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second"
+		$(COUPLER_LOC):KL1408:SLOT$(SLOT):DIN7, "Signal 7 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second"
+		$(COUPLER_LOC):KL1408:SLOT$(SLOT):DIN8, "Signal 8 Description",
+		Off,		On,			NO_ALARM,	NO_ALARM,	NO_ALARM,	".1 second"
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL1408.template b/Bk9000_MBTApp/Db/KL1408.template
new file mode 100644
index 0000000..ee9e16a
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1408.template
@@ -0,0 +1,104 @@
+record(bi, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL1408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(ZSV,  "$(SIG1.ZSV)")
+  field(OSV,  "$(SIG1.OSV)")
+  field(COSV, "$(SIG1.COSV)")
+}
+
+record(bi, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL1408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(ZSV,  "$(SIG2.ZSV)")
+  field(OSV,  "$(SIG2.OSV)")
+  field(COSV, "$(SIG2.COSV)")
+}
+
+record(bi, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL1408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_3")
+  field(ZNAM, "$(SIG3.ZNAM)")
+  field(ONAM, "$(SIG3.ONAM)")
+  field(ZSV,  "$(SIG3.ZSV)")
+  field(OSV,  "$(SIG3.OSV)")
+  field(COSV, "$(SIG3.COSV)")
+}
+
+record(bi, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL1408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_4")
+  field(ZNAM, "$(SIG4.ZNAM)")
+  field(ONAM, "$(SIG4.ONAM)")
+  field(ZSV,  "$(SIG4.ZSV)")
+  field(OSV,  "$(SIG4.OSV)")
+  field(COSV, "$(SIG4.COSV)")
+}
+
+record(bi, "$(SIG5)")
+{
+  field(DESC, "$(SIG5.DESC)")
+  field(SCAN, "$(SIG5.SCAN)")
+  field(DTYP, "Bk9000_KL1408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_5")
+  field(ZNAM, "$(SIG5.ZNAM)")
+  field(ONAM, "$(SIG5.ONAM)")
+  field(ZSV,  "$(SIG5.ZSV)")
+  field(OSV,  "$(SIG5.OSV)")
+  field(COSV, "$(SIG5.COSV)")
+}
+
+record(bi, "$(SIG6)")
+{
+  field(DESC, "$(SIG6.DESC)")
+  field(SCAN, "$(SIG6.SCAN)")
+  field(DTYP, "Bk9000_KL1408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_6")
+  field(ZNAM, "$(SIG6.ZNAM)")
+  field(ONAM, "$(SIG6.ONAM)")
+  field(ZSV,  "$(SIG6.ZSV)")
+  field(OSV,  "$(SIG6.OSV)")
+  field(COSV, "$(SIG6.COSV)")
+}
+
+record(bi, "$(SIG7)")
+{
+  field(DESC, "$(SIG7.DESC)")
+  field(SCAN, "$(SIG7.SCAN)")
+  field(DTYP, "Bk9000_KL1408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_7")
+  field(ZNAM, "$(SIG7.ZNAM)")
+  field(ONAM, "$(SIG7.ONAM)")
+  field(ZSV,  "$(SIG7.ZSV)")
+  field(OSV,  "$(SIG7.OSV)")
+  field(COSV, "$(SIG7.COSV)")
+}
+
+record(bi, "$(SIG8)")
+{
+  field(DESC, "$(SIG8.DESC)")
+  field(SCAN, "$(SIG8.SCAN)")
+  field(DTYP, "Bk9000_KL1408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_8")
+  field(ZNAM, "$(SIG8.ZNAM)")
+  field(ONAM, "$(SIG8.ONAM)")
+  field(ZSV,  "$(SIG8.ZSV)")
+  field(OSV,  "$(SIG8.OSV)")
+  field(COSV, "$(SIG8.COSV)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL1488-lcls.template b/Bk9000_MBTApp/Db/KL1488-lcls.template
new file mode 100644
index 0000000..73f6131
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1488-lcls.template
@@ -0,0 +1,21 @@
+record(bi, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
+  field(DESC, "Digital Channel $(CH) Readback")
+#Need to scan faster than 1 Hz to avoid bad watchdog state?
+  field(SCAN, ".1 second")
+  field(DTYP, "Bk9000_KL1488")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_$(CH)")
+  field(ZNAM, "$(ZNAM)")
+  field(ONAM, "$(ONAM)")
+  field(FLNK, "$(ALIAS)")
+}
+
+record(bi, "$(ALIAS)") {
+  field(DESC, "$(D)")
+  field(INP, "$(APC):M$(SLOT)_CH$(CH)_SIG")
+  field(ZNAM, "$(ZNAM)")
+  field(ONAM, "$(ONAM)")
+  field(ZSV,  "$(ZSV)")
+  field(OSV,  "$(OSV)")
+  field(COSV, "$(COSV)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL1488.template b/Bk9000_MBTApp/Db/KL1488.template
new file mode 100644
index 0000000..f2d21c0
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL1488.template
@@ -0,0 +1,96 @@
+record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
+  field(DESC, "Digital Channel 1 Readback")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL1488")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(ZSV,  "$(SIG1.ZSV)")
+  field(OSV,  "$(SIG1.OSV)")
+  field(COSV, "$(SIG1.COSV)")
+}
+
+record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
+  field(DESC, "Digital Channel 2 Readback")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL1488")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(ZSV,  "$(SIG2.ZSV)")
+  field(OSV,  "$(SIG2.OSV)")
+  field(COSV, "$(SIG2.COSV)")
+}
+
+record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
+  field(DESC, "Digital Channel 3 Readback")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL1488")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_3")
+  field(ZNAM, "$(SIG3.ZNAM)")
+  field(ONAM, "$(SIG3.ONAM)")
+  field(ZSV,  "$(SIG3.ZSV)")
+  field(OSV,  "$(SIG3.OSV)")
+  field(COSV, "$(SIG3.COSV)")
+}
+
+record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
+  field(DESC, "Digital Channel 4 Readback")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL1488")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_4")
+  field(ZNAM, "$(SIG4.ZNAM)")
+  field(ONAM, "$(SIG4.ONAM)")
+  field(ZSV,  "$(SIG4.ZSV)")
+  field(OSV,  "$(SIG4.OSV)")
+  field(COSV, "$(SIG4.COSV)")
+}
+
+record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG5)") {
+  field(DESC, "Digital Channel 5 Readback")
+  field(SCAN, "$(SIG5.SCAN)")
+  field(DTYP, "Bk9000_KL1488")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_5")
+  field(ZNAM, "$(SIG5.ZNAM)")
+  field(ONAM, "$(SIG5.ONAM)")
+  field(ZSV,  "$(SIG5.ZSV)")
+  field(OSV,  "$(SIG5.OSV)")
+  field(COSV, "$(SIG5.COSV)")
+}
+
+record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG6)") {
+  field(DESC, "Digital Channel 6 Readback")
+  field(SCAN, "$(SIG6.SCAN)")
+  field(DTYP, "Bk9000_KL1488")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_6")
+  field(ZNAM, "$(SIG6.ZNAM)")
+  field(ONAM, "$(SIG6.ONAM)")
+  field(ZSV,  "$(SIG6.ZSV)")
+  field(OSV,  "$(SIG6.OSV)")
+  field(COSV, "$(SIG6.COSV)")
+}
+
+record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG7)") {
+  field(DESC, "Digital Channel 7 Readback")
+  field(SCAN, "$(SIG7.SCAN)")
+  field(DTYP, "Bk9000_KL1488")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_7")
+  field(ZNAM, "$(SIG7.ZNAM)")
+  field(ONAM, "$(SIG7.ONAM)")
+  field(ZSV,  "$(SIG7.ZSV)")
+  field(OSV,  "$(SIG7.OSV)")
+  field(COSV, "$(SIG7.COSV)")
+}
+
+record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG8)") {
+  field(DESC, "Digital Channel 8 Readback")
+  field(SCAN, "$(SIG8.SCAN)")
+  field(DTYP, "Bk9000_KL1488")
+  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_8")
+  field(ZNAM, "$(SIG8.ZNAM)")
+  field(ONAM, "$(SIG8.ONAM)")
+  field(ZSV,  "$(SIG8.ZSV)")
+  field(OSV,  "$(SIG8.OSV)")
+  field(COSV, "$(SIG8.COSV)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL2114.substitutions b/Bk9000_MBTApp/Db/KL2114.substitutions
new file mode 100644
index 0000000..1153cd5
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2114.substitutions
@@ -0,0 +1,28 @@
+
+file KL2114.template
+{
+	pattern
+	{	SLOT,	REPROCEVT,
+		SIG1,		SIG1.DESC,
+		SIG1.ZNAM,	SIG1.ONAM,	SIG1.PINI,
+		SIG2,		SIG2.DESC,
+		SIG2.ZNAM,	SIG2.ONAM,	SIG2.PINI,
+		SIG3,		SIG3.DESC,
+		SIG3.ZNAM,	SIG3.ONAM,	SIG3.PINI,
+		SIG4,		SIG4.DESC,
+		SIG4.ZNAM,	SIG4.ONAM,	SIG4.PINI
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	10,			188,
+		$(COUPLER_LOC):KL2114:SLOT$(SLOT):DOUT1, "Signal 1 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2114:SLOT$(SLOT):DOUT2, "Signal 2 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2114:SLOT$(SLOT):DOUT3, "Signal 3 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2114:SLOT$(SLOT):DOUT4, "Signal 4 Description",
+		Off,		On,			NO,
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL2114.template b/Bk9000_MBTApp/Db/KL2114.template
new file mode 100644
index 0000000..62a9e27
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2114.template
@@ -0,0 +1,54 @@
+record(bo, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(DTYP, "Bk9000_KL2114")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(PINI, "$(SIG1.PINI)")
+}
+
+record(bo, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(DTYP, "Bk9000_KL2114")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(PINI, "$(SIG2.PINI)")
+}
+
+record(bo, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(DTYP, "Bk9000_KL2114")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_3")
+  field(ZNAM, "$(SIG3.ZNAM)")
+  field(ONAM, "$(SIG3.ONAM)")
+  field(PINI, "$(SIG3.PINI)")
+}
+
+record(bo, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(DTYP, "Bk9000_KL2114")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_4")
+  field(ZNAM, "$(SIG4.ZNAM)")
+  field(ONAM, "$(SIG4.ONAM)")
+  field(PINI, "$(SIG4.PINI)")
+}
+
+# We put SIG1 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG1)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG1)")
+  field(LNK2, "$(SIG2)")
+  field(LNK3, "$(SIG3)")
+  field(LNK4, "$(SIG4)")
+  field(PINI, "NO")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL2124-signal.tpl-arch b/Bk9000_MBTApp/Db/KL2124-signal.tpl-arch
new file mode 100644
index 0000000..7e4ca61
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2124-signal.tpl-arch
@@ -0,0 +1,7 @@
+# Archive Beckhoff KL2124 TTL Digital Output PV list
+$(SIG).VAL		1
+$(SIG).DESC		30
+$(SIG).ONAM		30
+$(SIG).OSV		30
+$(SIG).ZNAM		30
+$(SIG).ZSV		30
diff --git a/Bk9000_MBTApp/Db/KL2124-signal.tpl-req b/Bk9000_MBTApp/Db/KL2124-signal.tpl-req
new file mode 100644
index 0000000..a8e2067
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2124-signal.tpl-req
@@ -0,0 +1,7 @@
+# Autosave Beckhoff KL2124 TTL Digital Output PV list
+$(SIG).VAL
+$(SIG).DESC
+$(SIG).ONAM
+$(SIG).OSV
+$(SIG).ZNAM
+$(SIG).ZSV
diff --git a/Bk9000_MBTApp/Db/KL2124.substitutions b/Bk9000_MBTApp/Db/KL2124.substitutions
new file mode 100644
index 0000000..8b0f649
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2124.substitutions
@@ -0,0 +1,28 @@
+
+file KL2124.template
+{
+	pattern
+	{	SLOT,	REPROCEVT,
+		SIG1,		SIG1.DESC,
+		SIG1.ZNAM,	SIG1.ONAM,	SIG1.PINI,
+		SIG2,		SIG2.DESC,
+		SIG2.ZNAM,	SIG2.ONAM,	SIG2.PINI,
+		SIG3,		SIG3.DESC,
+		SIG3.ZNAM,	SIG3.ONAM,	SIG3.PINI,
+		SIG4,		SIG4.DESC,
+		SIG4.ZNAM,	SIG4.ONAM,	SIG4.PINI
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	10,			188,
+		$(COUPLER_LOC):KL2124:SLOT$(SLOT):DOUT1, "Signal 1 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2124:SLOT$(SLOT):DOUT2, "Signal 2 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2124:SLOT$(SLOT):DOUT3, "Signal 3 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2124:SLOT$(SLOT):DOUT4, "Signal 4 Description",
+		Off,		On,			NO,
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL2124.template b/Bk9000_MBTApp/Db/KL2124.template
new file mode 100644
index 0000000..03cb75d
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2124.template
@@ -0,0 +1,54 @@
+record(bo, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(DTYP, "Bk9000_KL2124")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(PINI, "$(SIG1.PINI)")
+}
+
+record(bo, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(DTYP, "Bk9000_KL2124")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(PINI, "$(SIG2.PINI)")
+}
+
+record(bo, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(DTYP, "Bk9000_KL2124")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_3")
+  field(ZNAM, "$(SIG3.ZNAM)")
+  field(ONAM, "$(SIG3.ONAM)")
+  field(PINI, "$(SIG3.PINI)")
+}
+
+record(bo, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(DTYP, "Bk9000_KL2124")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_4")
+  field(ZNAM, "$(SIG4.ZNAM)")
+  field(ONAM, "$(SIG4.ONAM)")
+  field(PINI, "$(SIG4.PINI)")
+}
+
+# We put SIG1 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG1)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG1)")
+  field(LNK2, "$(SIG2)")
+  field(LNK3, "$(SIG3)")
+  field(LNK4, "$(SIG4)")
+  field(PINI, "NO")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL2408-lcls.template b/Bk9000_MBTApp/Db/KL2408-lcls.template
new file mode 100644
index 0000000..2845b44
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2408-lcls.template
@@ -0,0 +1,34 @@
+ record(bo, "$(ALIAS)") {
+   field(DESC, "$(D)")
+   field(OMSL, "supervisory")
+   field(ZNAM, "$(ZNAM)")
+   field(ONAM, "$(ONAM)")
+   field(ZSV,  "$(ZSV)")
+   field(OSV,  "$(OSV)")
+   field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_SIG")
+   field(VAL,  "0")
+   field(PINI, "YES")
+   field(HIGH, "$(HIGH)")
+ }
+
+ record(bo, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
+   field(DESC, "Digital Channel $(CH) Set")
+   field(DTYP, "Bk9000_KL2408")
+   field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_$(CH)")
+   field(DOL, "$(ALIAS)")
+   field(OMSL, "closed_loop")
+   field(ZNAM, "$(ZNAM)")
+   field(ONAM, "$(ONAM)")
+}
+
+# These BCS outputs are only initiated by user. Do not 
+# want to process on reconnect.
+#record(fanout, "$(APC):M$(SLOT)_CH$(CH)_OUT_REPROC") {
+#  field(DESC, "Process on reconnect")
+#  field(SCAN, "Event")
+#  field(EVNT, "$(REPROCEVT)")
+#  field(SELM, "All")
+#  field(LNK1, "$(APC):M$(SLOT)_CH$(CH)_IN")
+#  field(PINI, "NO")
+#}
+
diff --git a/Bk9000_MBTApp/Db/KL2408.substitutions b/Bk9000_MBTApp/Db/KL2408.substitutions
new file mode 100644
index 0000000..22ffbb4
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2408.substitutions
@@ -0,0 +1,44 @@
+
+file KL2408.template
+{
+	pattern
+	{	SLOT,	REPROCEVT,
+		SIG1,		SIG1.DESC,
+		SIG1.ZNAM,	SIG1.ONAM,	SIG1.PINI,
+		SIG2,		SIG2.DESC,
+		SIG2.ZNAM,	SIG2.ONAM,	SIG2.PINI,
+		SIG3,		SIG3.DESC,
+		SIG3.ZNAM,	SIG3.ONAM,	SIG3.PINI,
+		SIG4,		SIG4.DESC,
+		SIG4.ZNAM,	SIG4.ONAM,	SIG4.PINI
+		SIG5,		SIG5.DESC,
+		SIG5.ZNAM,	SIG5.ONAM,	SIG5.PINI
+		SIG6,		SIG6.DESC,
+		SIG6.ZNAM,	SIG6.ONAM,	SIG6.PINI
+		SIG7,		SIG7.DESC,
+		SIG7.ZNAM,	SIG7.ONAM,	SIG7.PINI
+		SIG8,		SIG8.DESC,
+		SIG8.ZNAM,	SIG8.ONAM,	SIG8.PINI
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	4,			188,
+		$(COUPLER_LOC):KL2408:SLOT$(SLOT):DOUT1, "Signal 1 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2408:SLOT$(SLOT):DOUT2, "Signal 2 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2408:SLOT$(SLOT):DOUT3, "Signal 3 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2408:SLOT$(SLOT):DOUT4, "Signal 4 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2408:SLOT$(SLOT):DOUT5, "Signal 5 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2408:SLOT$(SLOT):DOUT6, "Signal 6 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2408:SLOT$(SLOT):DOUT7, "Signal 7 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2408:SLOT$(SLOT):DOUT8, "Signal 8 Description",
+		Off,		On,			NO,
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL2408.template b/Bk9000_MBTApp/Db/KL2408.template
new file mode 100644
index 0000000..6b6bbbc
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2408.template
@@ -0,0 +1,108 @@
+record(bo, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(DTYP, "Bk9000_KL2408")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(PINI, "$(SIG1.PINI)")
+}
+
+record(bo, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(DTYP, "Bk9000_KL2408")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(PINI, "$(SIG2.PINI)")
+}
+
+record(bo, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(DTYP, "Bk9000_KL2408")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_3")
+  field(ZNAM, "$(SIG3.ZNAM)")
+  field(ONAM, "$(SIG3.ONAM)")
+  field(PINI, "$(SIG3.PINI)")
+}
+
+record(bo, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(DTYP, "Bk9000_KL2408")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_4")
+  field(ZNAM, "$(SIG4.ZNAM)")
+  field(ONAM, "$(SIG4.ONAM)")
+  field(PINI, "$(SIG4.PINI)")
+}
+
+record(bo, "$(SIG5)")
+{
+  field(DESC, "$(SIG5.DESC)")
+  field(DTYP, "Bk9000_KL2408")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_5")
+  field(ZNAM, "$(SIG5.ZNAM)")
+  field(ONAM, "$(SIG5.ONAM)")
+  field(PINI, "$(SIG5.PINI)")
+}
+
+record(bo, "$(SIG6)")
+{
+  field(DESC, "$(SIG6.DESC)")
+  field(DTYP, "Bk9000_KL2408")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_6")
+  field(ZNAM, "$(SIG6.ZNAM)")
+  field(ONAM, "$(SIG6.ONAM)")
+  field(PINI, "$(SIG6.PINI)")
+}
+
+record(bo, "$(SIG7)")
+{
+  field(DESC, "$(SIG7.DESC)")
+  field(DTYP, "Bk9000_KL2408")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_7")
+  field(ZNAM, "$(SIG7.ZNAM)")
+  field(ONAM, "$(SIG7.ONAM)")
+  field(PINI, "$(SIG7.PINI)")
+}
+
+record(bo, "$(SIG8)")
+{
+  field(DESC, "$(SIG8.DESC)")
+  field(DTYP, "Bk9000_KL2408")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_8")
+  field(ZNAM, "$(SIG8.ZNAM)")
+  field(ONAM, "$(SIG8.ONAM)")
+  field(PINI, "$(SIG8.PINI)")
+}
+
+# We put SIG1 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG1)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG1)")
+  field(LNK2, "$(SIG2)")
+  field(LNK3, "$(SIG3)")
+  field(LNK4, "$(SIG4)")
+  field(PINI, "NO")
+}
+
+# We put SIG5 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG5)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG5)")
+  field(LNK2, "$(SIG6)")
+  field(LNK3, "$(SIG7)")
+  field(LNK4, "$(SIG8)")
+  field(PINI, "NO")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL2502-signal.tpl-arch b/Bk9000_MBTApp/Db/KL2502-signal.tpl-arch
new file mode 100644
index 0000000..b6765a9
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2502-signal.tpl-arch
@@ -0,0 +1,18 @@
+# Archive Beckhoff KL2502 Analog Output Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).DRVH		30
+$(SIG).DRVL		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
diff --git a/Bk9000_MBTApp/Db/KL2502-signal.tpl-req b/Bk9000_MBTApp/Db/KL2502-signal.tpl-req
new file mode 100644
index 0000000..c22bd72
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2502-signal.tpl-req
@@ -0,0 +1,22 @@
+# Autosave Beckhoff KL2502 Analog Output Signal PV list
+$(SIG).VAL
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).DRVH
+$(SIG).DRVL
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL2502.substitutions b/Bk9000_MBTApp/Db/KL2502.substitutions
new file mode 100644
index 0000000..34b0a09
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2502.substitutions
@@ -0,0 +1,36 @@
+file KL2502.template
+{
+	pattern
+	{	SLOT,		REPROCEVT,
+		SIG1,	
+			SIG1.DESC,	SIG1.UNIT,
+			SIG1.EGUF,	SIG1.EGUL,
+			SIG1.HOPR,	SIG1.LOPR,
+			SIG1.DRVH,	SIG1.DRVL,
+			SIG1.PINI,
+		SIG2,
+			SIG1.DESC,	SIG1.UNIT,
+			SIG2.EGUF,	SIG2.EGUL,
+			SIG2.HOPR,	SIG2.LOPR,
+			SIG2.DRVH,	SIG2.DRVL,
+			SIG2.PINI,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	1,			188,
+			$(COUPLER_LOC):KL2502:SLOT$(SLOT):DUTY_CYCLE1,
+			"Signal 1 Description", Percent,
+			100,		0,
+			100,		0,
+			0x7FFF,		0,
+			NO,
+		$(COUPLER_LOC):KL2502:SLOT$(SLOT):DUTY_CYCLE2,
+			"Signal 2 Description",	Percent,
+			100,		0,
+			100,		0,
+			0x7FFF,		0,
+			NO,
+	}
+}
+
diff --git a/Bk9000_MBTApp/Db/KL2502.template b/Bk9000_MBTApp/Db/KL2502.template
new file mode 100644
index 0000000..d4cdf22
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2502.template
@@ -0,0 +1,46 @@
+record(ao, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(DTYP, "Bk9000_KL2502")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DUTY_CYCLE_1")
+  field(PREC, "3")
+  field(EGUF, "$(SIG1.EGUF)")
+  field(EGUL, "$(SIG1.EGUL)")
+  field(DRVH, "$(SIG1.DRVH)")
+  field(DRVL, "$(SIG1.DRVL)")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(EGU,  "$(SIG1.UNIT)")
+  field(PINI, "$(SIG1.PINI)")
+  field(LINR, "LINEAR")
+}
+
+record(ao, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(DTYP, "Bk9000_KL2502")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DUTY_CYCLE_2")
+  field(PREC, "3")
+  field(EGUF, "$(SIG2.EGUF)")
+  field(EGUL, "$(SIG2.EGUL)")
+  field(DRVH, "$(SIG2.DRVH)")
+  field(DRVL, "$(SIG2.DRVL)")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(EGU,  "$(SIG2.UNIT)")
+  field(PINI, "$(SIG2.PINI)")
+  field(LINR, "LINEAR")
+}
+
+# We put SIG1 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG1)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG1)")
+  field(LNK2, "$(SIG2)")
+  field(PINI, "NO")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL2512-signal.tpl-arch b/Bk9000_MBTApp/Db/KL2512-signal.tpl-arch
new file mode 100644
index 0000000..631e0ba
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2512-signal.tpl-arch
@@ -0,0 +1,18 @@
+# Archive Beckhoff KL2512 Analog Output Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).DRVH		30
+$(SIG).DRVL		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
diff --git a/Bk9000_MBTApp/Db/KL2512-signal.tpl-req b/Bk9000_MBTApp/Db/KL2512-signal.tpl-req
new file mode 100644
index 0000000..06b7505
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2512-signal.tpl-req
@@ -0,0 +1,22 @@
+# Autosave Beckhoff KL2512 Analog Output Signal PV list
+$(SIG).VAL
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).DRVH
+$(SIG).DRVL
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL2512.substitutions b/Bk9000_MBTApp/Db/KL2512.substitutions
new file mode 100644
index 0000000..6ff256d
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2512.substitutions
@@ -0,0 +1,36 @@
+file KL2512.template
+{
+	pattern
+	{	SLOT,		REPROCEVT,
+		SIG1,	
+			SIG1.DESC,	SIG1.UNIT,
+			SIG1.EGUF,	SIG1.EGUL,
+			SIG1.HOPR,	SIG1.LOPR,
+			SIG1.DRVH,	SIG1.DRVL,
+			SIG1.PINI,
+		SIG2,
+			SIG2.DESC,	SIG2.UNIT,
+			SIG2.EGUF,	SIG2.EGUL,
+			SIG2.HOPR,	SIG2.LOPR,
+			SIG2.DRVH,	SIG2.DRVL,
+			SIG2.PINI,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	1,			188,
+			$(COUPLER_LOC):KL2512:SLOT$(SLOT):DUTY_CYCLE1,
+			"Signal 1 Description", Percent,
+			100,		0,
+			100,		0,
+			0x7FFF,		0,
+			NO,
+		$(COUPLER_LOC):KL2512:SLOT$(SLOT):DUTY_CYCLE2,
+			"Signal 2 Description",	Percent,
+			100,		0,
+			100,		0,
+			0x7FFF,		0,
+			NO,
+	}
+}
+
diff --git a/Bk9000_MBTApp/Db/KL2512.template b/Bk9000_MBTApp/Db/KL2512.template
new file mode 100644
index 0000000..075e80d
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2512.template
@@ -0,0 +1,46 @@
+record(ao, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(DTYP, "Bk9000_KL2512")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DUTY_CYCLE_1")
+  field(PREC, "3")
+  field(EGUF, "$(SIG1.EGUF)")
+  field(EGUL, "$(SIG1.EGUL)")
+  field(DRVH, "$(SIG1.DRVH)")
+  field(DRVL, "$(SIG1.DRVL)")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(EGU,  "$(SIG1.UNIT)")
+  field(PINI, "$(SIG1.PINI)")
+  field(LINR, "LINEAR")
+}
+
+record(ao, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(DTYP, "Bk9000_KL2512")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DUTY_CYCLE_2")
+  field(PREC, "3")
+  field(EGUF, "$(SIG2.EGUF)")
+  field(EGUL, "$(SIG2.EGUL)")
+  field(DRVH, "$(SIG2.DRVH)")
+  field(DRVL, "$(SIG2.DRVL)")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(EGU,  "$(SIG2.UNIT)")
+  field(PINI, "$(SIG2.PINI)")
+  field(LINR, "LINEAR")
+}
+
+# We put SIG1 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG1)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG1)")
+  field(LNK2, "$(SIG2)")
+  field(PINI, "NO")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL2622.substitutions b/Bk9000_MBTApp/Db/KL2622.substitutions
new file mode 100644
index 0000000..e3b76f7
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2622.substitutions
@@ -0,0 +1,20 @@
+
+file KL2622.template
+{
+	pattern
+	{	SLOT,	REPROCEVT,
+		SIG1,		SIG1.DESC,
+		SIG1.ZNAM,	SIG1.ONAM,	SIG1.PINI,
+		SIG2,		SIG2.DESC,
+		SIG2.ZNAM,	SIG2.ONAM,	SIG2.PINI,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	6,			188,
+		$(COUPLER_LOC):KL2622:SLOT$(SLOT):DOUT1, "Signal 1 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2622:SLOT$(SLOT):DOUT2, "Signal 2 Description",
+		Off,		On,			NO,
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL2622.template b/Bk9000_MBTApp/Db/KL2622.template
new file mode 100644
index 0000000..a4e5394
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2622.template
@@ -0,0 +1,32 @@
+record(bo, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(DTYP, "Bk9000_KL2622")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(PINI, "$(SIG1.PINI)")
+}
+
+record(bo, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(DTYP, "Bk9000_KL2622")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(PINI, "$(SIG2.PINI)")
+}
+
+# We put SIG1 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG1)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG1)")
+  field(LNK2, "$(SIG2)")
+  field(PINI, "NO")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL2808.substitutions b/Bk9000_MBTApp/Db/KL2808.substitutions
new file mode 100644
index 0000000..b29533a
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2808.substitutions
@@ -0,0 +1,44 @@
+
+file KL2808.template
+{
+	pattern
+	{	SLOT,	REPROCEVT,
+		SIG1,		SIG1.DESC,
+		SIG1.ZNAM,	SIG1.ONAM,	SIG1.PINI,
+		SIG2,		SIG2.DESC,
+		SIG2.ZNAM,	SIG2.ONAM,	SIG2.PINI,
+		SIG3,		SIG3.DESC,
+		SIG3.ZNAM,	SIG3.ONAM,	SIG3.PINI,
+		SIG4,		SIG4.DESC,
+		SIG4.ZNAM,	SIG4.ONAM,	SIG4.PINI
+		SIG5,		SIG5.DESC,
+		SIG5.ZNAM,	SIG5.ONAM,	SIG5.PINI
+		SIG6,		SIG6.DESC,
+		SIG6.ZNAM,	SIG6.ONAM,	SIG6.PINI
+		SIG7,		SIG7.DESC,
+		SIG7.ZNAM,	SIG7.ONAM,	SIG7.PINI
+		SIG8,		SIG8.DESC,
+		SIG8.ZNAM,	SIG8.ONAM,	SIG8.PINI
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	4,			188,
+		$(COUPLER_LOC):KL2808:SLOT$(SLOT):DOUT1, "Signal 1 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2808:SLOT$(SLOT):DOUT2, "Signal 2 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2808:SLOT$(SLOT):DOUT3, "Signal 3 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2808:SLOT$(SLOT):DOUT4, "Signal 4 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2808:SLOT$(SLOT):DOUT5, "Signal 5 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2808:SLOT$(SLOT):DOUT6, "Signal 6 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2808:SLOT$(SLOT):DOUT7, "Signal 7 Description",
+		Off,		On,			NO,
+		$(COUPLER_LOC):KL2808:SLOT$(SLOT):DOUT8, "Signal 8 Description",
+		Off,		On,			NO,
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL2808.template b/Bk9000_MBTApp/Db/KL2808.template
new file mode 100644
index 0000000..661851a
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL2808.template
@@ -0,0 +1,108 @@
+record(bo, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(DTYP, "Bk9000_KL2808")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_1")
+  field(ZNAM, "$(SIG1.ZNAM)")
+  field(ONAM, "$(SIG1.ONAM)")
+  field(PINI, "$(SIG1.PINI)")
+}
+
+record(bo, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(DTYP, "Bk9000_KL2808")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_2")
+  field(ZNAM, "$(SIG2.ZNAM)")
+  field(ONAM, "$(SIG2.ONAM)")
+  field(PINI, "$(SIG2.PINI)")
+}
+
+record(bo, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(DTYP, "Bk9000_KL2808")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_3")
+  field(ZNAM, "$(SIG3.ZNAM)")
+  field(ONAM, "$(SIG3.ONAM)")
+  field(PINI, "$(SIG3.PINI)")
+}
+
+record(bo, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(DTYP, "Bk9000_KL2808")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_4")
+  field(ZNAM, "$(SIG4.ZNAM)")
+  field(ONAM, "$(SIG4.ONAM)")
+  field(PINI, "$(SIG4.PINI)")
+}
+
+record(bo, "$(SIG5)")
+{
+  field(DESC, "$(SIG5.DESC)")
+  field(DTYP, "Bk9000_KL2808")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_5")
+  field(ZNAM, "$(SIG5.ZNAM)")
+  field(ONAM, "$(SIG5.ONAM)")
+  field(PINI, "$(SIG5.PINI)")
+}
+
+record(bo, "$(SIG6)")
+{
+  field(DESC, "$(SIG6.DESC)")
+  field(DTYP, "Bk9000_KL2808")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_6")
+  field(ZNAM, "$(SIG6.ZNAM)")
+  field(ONAM, "$(SIG6.ONAM)")
+  field(PINI, "$(SIG6.PINI)")
+}
+
+record(bo, "$(SIG7)")
+{
+  field(DESC, "$(SIG7.DESC)")
+  field(DTYP, "Bk9000_KL2808")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_7")
+  field(ZNAM, "$(SIG7.ZNAM)")
+  field(ONAM, "$(SIG7.ONAM)")
+  field(PINI, "$(SIG7.PINI)")
+}
+
+record(bo, "$(SIG8)")
+{
+  field(DESC, "$(SIG8.DESC)")
+  field(DTYP, "Bk9000_KL2808")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_8")
+  field(ZNAM, "$(SIG8.ZNAM)")
+  field(ONAM, "$(SIG8.ONAM)")
+  field(PINI, "$(SIG8.PINI)")
+}
+
+# We put SIG1 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG1)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG1)")
+  field(LNK2, "$(SIG2)")
+  field(LNK3, "$(SIG3)")
+  field(LNK4, "$(SIG4)")
+  field(PINI, "NO")
+}
+
+# We put SIG5 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG5)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG5)")
+  field(LNK2, "$(SIG6)")
+  field(LNK3, "$(SIG7)")
+  field(LNK4, "$(SIG8)")
+  field(PINI, "NO")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3064-signal.tpl-arch b/Bk9000_MBTApp/Db/KL3064-signal.tpl-arch
new file mode 100644
index 0000000..be65849
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3064-signal.tpl-arch
@@ -0,0 +1,18 @@
+# Archive Beckhoff KL3064 Analog Input Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
+$(SIG).SMOO		30
+$(SIG).ASLO		30
diff --git a/Bk9000_MBTApp/Db/KL3064-signal.tpl-req b/Bk9000_MBTApp/Db/KL3064-signal.tpl-req
new file mode 100644
index 0000000..eaf0251
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3064-signal.tpl-req
@@ -0,0 +1,21 @@
+# Autosave Beckhoff KL3064 Analog Input Signal PV list
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).SMOO
+$(SIG).PREC
+$(SIG).ASLO
diff --git a/Bk9000_MBTApp/Db/KL3064.substitutions b/Bk9000_MBTApp/Db/KL3064.substitutions
new file mode 100644
index 0000000..28f2a3e
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3064.substitutions
@@ -0,0 +1,44 @@
+
+file KL3064.template
+{
+	pattern
+	{	SLOT,
+		SIG1,		SIG1.DESC,
+			SIG1.ADEL,	SIG1.MDEL,	SIG1.SMOO,	SIG1.UNIT, SIG1.EGUF,	SIG1.EGUL,	
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,	SIG1.HYST,	
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,	SIG1.SCAN,
+		SIG2,		SIG2.DESC,
+			SIG2.ADEL,	SIG2.MDEL,	SIG2.SMOO,	SIG2.UNIT, SIG2.EGUF,	SIG2.EGUL,	
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,	SIG2.HYST,	
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,	SIG2.SCAN,
+		SIG3,		SIG3.DESC,
+			SIG3.ADEL,	SIG3.MDEL,	SIG3.SMOO,	SIG3.UNIT, SIG3.EGUF,	SIG3.EGUL,	
+			SIG3.HOPR,	SIG3.HIHI,	SIG3.HIGH,	SIG3.HYST,	
+			SIG3.LOW,	SIG3.LOLO,	SIG3.LOPR,	SIG3.SCAN,
+		SIG4,		SIG4.DESC,
+			SIG4.ADEL,	SIG4.MDEL,	SIG4.SMOO,	SIG4.UNIT, SIG4.EGUF,	SIG4.EGUL,	
+			SIG4.HOPR,	SIG4.HIHI,	SIG4.HIGH,	SIG4.HYST,	
+			SIG4.LOW,	SIG4.LOLO,	SIG4.LOPR,	SIG4.SCAN,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	12,
+		$(COUPLER_LOC):KL3064:SLOT$(SLOT):AIN1, "Signal 1 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3064:SLOT$(SLOT):AIN2, "Signal 2 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3064:SLOT$(SLOT):AIN3, "Signal 3 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3064:SLOT$(SLOT):AIN4, "Signal 4 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3064.template b/Bk9000_MBTApp/Db/KL3064.template
new file mode 100644
index 0000000..cafc2f1
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3064.template
@@ -0,0 +1,108 @@
+record(ai, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3064")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "3")
+  field(ADEL, "$(SIG1.ADEL)")
+  field(EGUF, "$(SIG1.EGUF)")
+  field(EGUL, "$(SIG1.EGUL)")
+  field(HIGH, "$(SIG1.HIGH)")
+  field(HIHI, "$(SIG1.HIHI)")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(HYST, "$(SIG1.HYST)")
+  field(LOLO, "$(SIG1.LOLO)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(LOW,  "$(SIG1.LOW)")
+  field(MDEL, "$(SIG1.MDEL)")
+  field(SMOO, "$(SIG1.SMOO)")
+  field(EGU,  "$(SIG1.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3064")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "3")
+  field(ADEL, "$(SIG2.ADEL)")
+  field(EGUF, "$(SIG2.EGUF)")
+  field(EGUL, "$(SIG2.EGUL)")
+  field(HIGH, "$(SIG2.HIGH)")
+  field(HIHI, "$(SIG2.HIHI)")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(HYST, "$(SIG2.HYST)")
+  field(LOLO, "$(SIG2.LOLO)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(LOW,  "$(SIG2.LOW)")
+  field(MDEL, "$(SIG2.MDEL)")
+  field(SMOO, "$(SIG2.SMOO)")
+  field(EGU,  "$(SIG2.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL3064")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
+  field(PREC, "3")
+  field(ADEL, "$(SIG3.ADEL)")
+  field(EGUF, "$(SIG3.EGUF)")
+  field(EGUL, "$(SIG3.EGUL)")
+  field(HIGH, "$(SIG3.HIGH)")
+  field(HIHI, "$(SIG3.HIHI)")
+  field(HOPR, "$(SIG3.HOPR)")
+  field(HYST, "$(SIG3.HYST)")
+  field(LOLO, "$(SIG3.LOLO)")
+  field(LOPR, "$(SIG3.LOPR)")
+  field(LOW,  "$(SIG3.LOW)")
+  field(MDEL, "$(SIG3.MDEL)")
+  field(SMOO, "$(SIG3.SMOO)")
+  field(EGU,  "$(SIG3.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL3064")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
+  field(PREC, "3")
+  field(ADEL, "$(SIG4.ADEL)")
+  field(EGUF, "$(SIG4.EGUF)")
+  field(EGUL, "$(SIG4.EGUL)")
+  field(HIGH, "$(SIG4.HIGH)")
+  field(HIHI, "$(SIG4.HIHI)")
+  field(HOPR, "$(SIG4.HOPR)")
+  field(HYST, "$(SIG4.HYST)")
+  field(LOLO, "$(SIG4.LOLO)")
+  field(LOPR, "$(SIG4.LOPR)")
+  field(LOW,  "$(SIG4.LOW)")
+  field(MDEL, "$(SIG4.MDEL)")
+  field(SMOO, "$(SIG4.SMOO)")
+  field(EGU,  "$(SIG4.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3102-signal.tpl-arch b/Bk9000_MBTApp/Db/KL3102-signal.tpl-arch
new file mode 100644
index 0000000..7f4497b
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3102-signal.tpl-arch
@@ -0,0 +1,17 @@
+# Archive Beckhoff KL3102 Analog Input Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
+$(SIG).SMOO		30
diff --git a/Bk9000_MBTApp/Db/KL3102-signal.tpl-req b/Bk9000_MBTApp/Db/KL3102-signal.tpl-req
new file mode 100644
index 0000000..f7ef855
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3102-signal.tpl-req
@@ -0,0 +1,20 @@
+# Autosave Beckhoff KL3102 Analog Input Signal PV list
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).SMOO
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL3102.substitutions b/Bk9000_MBTApp/Db/KL3102.substitutions
new file mode 100644
index 0000000..bd588ca
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3102.substitutions
@@ -0,0 +1,28 @@
+
+file KL3102.template
+{
+	pattern
+	{	SLOT,
+		SIG1,		SIG1.DESC,
+			SIG1.ADEL,	SIG1.MDEL,	SIG1.SMOO,	SIG1.UNIT, SIG1.EGUF,	SIG1.EGUL,	
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,	SIG1.HYST,	
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,	SIG1.SCAN,
+		SIG2,		SIG2.DESC,
+			SIG2.ADEL,	SIG2.MDEL,	SIG2.SMOO,	SIG2.UNIT, SIG2.EGUF,	SIG2.EGUL,	
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,	SIG2.HYST,	
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,	SIG2.SCAN,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	8,
+		$(COUPLER_LOC):KL3102:SLOT$(SLOT):AIN1, "Signal 1 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3102:SLOT$(SLOT):AIN2, "Signal 2 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3102.template b/Bk9000_MBTApp/Db/KL3102.template
new file mode 100644
index 0000000..128a630
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3102.template
@@ -0,0 +1,54 @@
+record(ai, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3102")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "3")
+  field(ADEL, "$(SIG1.ADEL)")
+  field(EGUF, "$(SIG1.EGUF)")
+  field(EGUL, "$(SIG1.EGUL)")
+  field(HIGH, "$(SIG1.HIGH)")
+  field(HIHI, "$(SIG1.HIHI)")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(HYST, "$(SIG1.HYST)")
+  field(LOLO, "$(SIG1.LOLO)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(LOW,  "$(SIG1.LOW)")
+  field(MDEL, "$(SIG1.MDEL)")
+  field(SMOO, "$(SIG1.SMOO)")
+  field(EGU,  "$(SIG1.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3102")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "3")
+  field(ADEL, "$(SIG2.ADEL)")
+  field(EGUF, "$(SIG2.EGUF)")
+  field(EGUL, "$(SIG2.EGUL)")
+  field(HIGH, "$(SIG2.HIGH)")
+  field(HIHI, "$(SIG2.HIHI)")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(HYST, "$(SIG2.HYST)")
+  field(LOLO, "$(SIG2.LOLO)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(LOW,  "$(SIG2.LOW)")
+  field(MDEL, "$(SIG2.MDEL)")
+  field(SMOO, "$(SIG2.SMOO)")
+  field(EGU,  "$(SIG2.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3162-lcls.template b/Bk9000_MBTApp/Db/KL3162-lcls.template
new file mode 100644
index 0000000..730b039
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3162-lcls.template
@@ -0,0 +1,29 @@
+# to be used with analog-conversion-lcls.template
+record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
+  field(DESC, "Analog Ch$(CH) Readback")
+  field(SCAN, "1 second")
+  field(DTYP, "Bk9000_KL3162")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
+  field(PREC, "$(PREC)")
+  field(ADEL, "$(ADEL)")
+  field(EGUF, "$(EGUF)")
+  field(EGUL, "$(EGUL)")
+  field(HIGH, "$(HIGH)")
+  field(HIHI, "$(HIHI)")
+  field(HOPR, "$(HOPR)")
+  field(HYST, "$(HYST)")
+  field(LOLO, "$(LOLO)")
+  field(LOPR, "$(LOPR)")
+  field(LOW,  "$(LOW)")
+  field(MDEL, "$(MDEL)")
+#  field(SMOO, "$(SMOO)")
+  field(EGU,  "V")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_EGU")
+}
+
+
diff --git a/Bk9000_MBTApp/Db/KL3162-signal.tpl-arch b/Bk9000_MBTApp/Db/KL3162-signal.tpl-arch
new file mode 100644
index 0000000..520ca51
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3162-signal.tpl-arch
@@ -0,0 +1,17 @@
+# Archive Beckhoff KL3162 Analog Input Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
+$(SIG).SMOO		30
diff --git a/Bk9000_MBTApp/Db/KL3162-signal.tpl-req b/Bk9000_MBTApp/Db/KL3162-signal.tpl-req
new file mode 100644
index 0000000..b783623
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3162-signal.tpl-req
@@ -0,0 +1,20 @@
+# Autosave Beckhoff KL3162 Analog Input Signal PV list
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).SMOO
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL3162.substitutions b/Bk9000_MBTApp/Db/KL3162.substitutions
new file mode 100644
index 0000000..e6100da
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3162.substitutions
@@ -0,0 +1,40 @@
+# KL3162 2-Ch 16 bit Analog Input Module
+#
+# Macros:
+#	COUPLER		- Coupler name, required
+#	SLOT		- Slot number, required
+#	SIG1		- PV name, required
+#	SIG1.SCAN	- Scan interval, required
+#	SIG1.ADEL	- Archive Deadband, defaults to 0.1
+#	SIG1.DESC	- Description, defaults to "Signal Description"
+#	SIG1.EGUF	- Eng Units Full, defaults to 10
+#	SIG1.EGUL	- Eng Units Low, defaults to 0
+#	SIG1.HHSV	- High High Severity, defaults to NO_ALARM
+#	SIG1.HIGH	- High limit, defaults to 10
+#	SIG1.HIHI	- High High Limit, defaults to 10
+#	SIG1.HOPR	- High Operator Limit, defaults to 10
+#	SIG1.HSV	- High Severity, defaults to NO_ALARM
+#	SIG1.HYST	- Hysterisis, defaults to 0
+#	SIG1.LINR	- Scaling type, defaults to LINEAR
+#	SIG1.LLSV	- Low Low Severity, defaults to NO_ALARM
+#	SIG1.LOLO	- Low Low Limit, defaults to 0
+#	SIG1.LOPR	- Low Oper Limit, defaults to 0
+#	SIG1.LOW	- Low Limit, defaults to 0
+#	SIG1.LSV	- Low Severity, defaults to NO_ALARM
+#	SIG1.MDEL	- Montior Deadbanc, defaults to 0
+#	SIG1.PREC	- Precision, defaults to 3
+#	SIG1.SMOO	- Smoothing, defaults to 0
+#	SIG1.UNIT	- Eng Units, defaults to V
+
+file KL3162.template
+{
+#	Include one bracketed expansion for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	
+		SLOT		=	8,
+		SIG1		=	$(PRE):AIN1,
+		SIG1.SCAN	=	".1 second",
+		SIG1.DESC	=	"Signal 1 Description",
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3162.template b/Bk9000_MBTApp/Db/KL3162.template
new file mode 100644
index 0000000..cb3cfd7
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3162.template
@@ -0,0 +1,56 @@
+# KL3162 2-Ch 16 bit Analog Input Module
+
+record(ai, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC=Signal Description)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3162")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "$(SIG1.PREC=3)")
+  field(ADEL, "$(SIG1.ADEL=0.1)")
+  field(EGUF, "$(SIG1.EGUF=10)")
+  field(EGUL, "$(SIG1.EGUL=0)")
+  field(HIGH, "$(SIG1.HIGH=10)")
+  field(HIHI, "$(SIG1.HIHI=10)")
+  field(HOPR, "$(SIG1.HOPR=10)")
+  field(HYST, "$(SIG1.HYST=0)")
+  field(LOLO, "$(SIG1.LOLO=0)")
+  field(LOPR, "$(SIG1.LOPR=0)")
+  field(LOW,  "$(SIG1.LOW=0)")
+  field(MDEL, "$(SIG1.MDEL=0)")
+  field(SMOO, "$(SIG1.SMOO=0)")
+  field(EGU,  "$(SIG1.UNIT=V)")
+  field(HHSV, "$(SIG1.HHSV=NO_ALARM)")
+  field(LLSV, "$(SIG1.LLSV=NO_ALARM)")
+  field(HSV,  "$(SIG1.HSV=NO_ALARM)")
+  field(LSV,  "$(SIG1.LSV=NO_ALARM)")
+  field(LINR, "$(SIG1.LINR=LINEAR)")
+}
+
+record(ai, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC=Signal Description)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3162")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "$(SIG2.PREC=3)")
+  field(ADEL, "$(SIG2.ADEL=0)")
+  field(EGUF, "$(SIG2.EGUF=10)")
+  field(EGUL, "$(SIG2.EGUL=0)")
+  field(HIGH, "$(SIG2.HIGH=10)")
+  field(HIHI, "$(SIG2.HIHI)=10")
+  field(HOPR, "$(SIG2.HOPR)=10")
+  field(HYST, "$(SIG2.HYST)=0")
+  field(LOLO, "$(SIG2.LOLO)=0")
+  field(LOPR, "$(SIG2.LOPR)=0")
+  field(LOW,  "$(SIG2.LOW)=0")
+  field(MDEL, "$(SIG2.MDEL)=0")
+  field(SMOO, "$(SIG2.SMOO)=0")
+  field(EGU,  "$(SIG2.UNIT)=V")
+  field(HHSV, "$(SIG2.HHSV)=NO_ALARM")
+  field(LLSV, "$(SIG2.LLSV)=NO_ALARM")
+  field(HSV,  "$(SIG2.HSV)=NO_ALARM")
+  field(LSV,  "$(SIG2.LSV)=NO_ALARM")
+  field(LINR, "$(SIG2.LINR)=LINEAR")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3202-lcls.template b/Bk9000_MBTApp/Db/KL3202-lcls.template
new file mode 100644
index 0000000..e412465
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3202-lcls.template
@@ -0,0 +1,135 @@
+#==============================================================================
+#
+# Abs:  RTD module KL3202 template, customized for LCLS conventions
+#
+# Name: KL3202-lcls.template
+# 
+# Macros: 
+#
+#	APC	(All Purpose Controller) 
+#		First three fields of APC device name, for example: APC:LTU0:1
+#		(Numbering convention: Each set of I/O modules that share a single
+#		controller is one unit. All PVs associated with this set of modules 
+#		should share this APC device name.)
+#
+#	COUPLER Node name of coupler, for example: bkhf-ltu0-tm01
+#
+#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
+#		The first module to the right of the coupler is in slot 1.
+#
+#	D	Type of device (string), for example: "RTD" 
+#               or device description, for example "50B1"
+#
+#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
+#		The first module to the right of the coupler is in slot 1.
+#
+#	CH	Channel number, from 1 to 4	
+#
+#	ALIAS   Device name, for example: QUAD:LTU0:110:TEMP
+#
+#       SCAN    Data acquisition rate in EPICS record SCAN format. If you are not using data
+#               averaging, set this to "1 second". Otherwise, set it to your desired 
+#               data acquisition rate. It will set the scan rate for the low-level PVs.
+#               The high-level PVs (ALIAS) still scan at "1 second".
+#               
+# 	NSAM	Number of samples to average in _AVG compress record.
+#               Set to "1" if no averaging desired.
+#
+#       ASG     Access Security Group (used by RTDs for MPS)
+#
+#==============================================================================
+
+record(ai, "$(ALIAS)") {
+  field(DESC,"$(D)")
+  field(SCAN, "1 second")
+  field(INP, "$(ALIAS)_AVG PP MS")
+  field(PREC, "$(P)")
+  field(EGU, "DegF")
+  field(HOPR, "$(H)")
+  field(LOPR, "$(L)")
+  field(HIHI, "$(HH)")
+  field(LOLO, "$(LL)")
+  field(HIGH, "$(HI)")
+  field(LOW, "$(LO)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV, "MINOR")
+  field(LSV, "MINOR")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(ASG, "$(ASG)")
+}
+
+# Optional averaging
+# If no averaging desired, 
+#    set $(NSAM) to "1" and $(SCAN) to "1 second"
+#---------------------------------------
+record(compress, "$(ALIAS)_AVG") {
+  field(DESC, "Avg sig samples")
+  field(INP, "$(ALIAS)_DATA NPP MS")
+  field(ALG, "N to 1 Average")
+  field(N, "$(NSAM)")
+  field(NSAM, "1")
+  field(PREC, "$(P)")
+  field(ASG, "$(ASG)")
+}
+
+record(compress, "$(ALIAS)_DATA") {
+  field(DESC, "Samples to avg")
+  field(INP, "$(APC):M$(SLOT)_CH$(CH)_TEMP NPP MS")
+  field(ALG, "Circular Buffer")
+  field(NSAM, "$(NSAM)")
+  field(PREC, "$(P)")
+  field(ASG, "$(ASG)")
+}
+#-----------------------------------------
+
+# Convert degC to degF
+# .VAL and .A  used by generic KL3314 diagnostic display
+record(calc, "$(APC):M$(SLOT)_CH$(CH)_TEMP") {
+  field(DESC, "$(D)")
+  field(FLNK, "$(ALIAS)")
+  field(CALC, "A*1.8+32")
+  field(INPA, "$(APC):M$(SLOT)_CH$(CH)_SIG NPP MS")
+  field(EGU, "DegF")
+  field(PREC, "$(P)")
+  field(HOPR, "$(H)")
+  field(LOPR, "$(L)")
+  field(HIHI, "$(HH)")
+  field(LOLO, "$(LL)")
+  field(HIGH, "$(HI)")
+  field(LOW, "$(LO)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV, "MINOR")
+  field(LSV, "MINOR")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(FLNK, "$(ALIAS)_DATA")
+  field(ASG, "$(ASG)")
+}
+
+record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
+  field(DESC, "RTD Readback")
+  field(SCAN, "1 second")
+  field(DTYP, "Bk9000_KL3202")
+  field(INP, "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
+  field(PREC, "1")
+  field(HOPR, "500")
+  field(HIHI, "500")
+  field(HIGH, "500")
+  field(LOW,  "-100")
+  field(LOLO, "-100")
+  field(LOPR, "-100")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(EGU, "DegC")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_TEMP")
+  field(ASG, "$(ASG)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3202-signal.tpl-arch b/Bk9000_MBTApp/Db/KL3202-signal.tpl-arch
new file mode 100644
index 0000000..cddf721
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3202-signal.tpl-arch
@@ -0,0 +1,17 @@
+# Archive Beckhoff KL3202 Analog Input Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
+$(SIG).SMOO		30
diff --git a/Bk9000_MBTApp/Db/KL3202-signal.tpl-req b/Bk9000_MBTApp/Db/KL3202-signal.tpl-req
new file mode 100644
index 0000000..90a1a2f
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3202-signal.tpl-req
@@ -0,0 +1,20 @@
+# Autosave Beckhoff KL3202 Analog Input Signal PV list
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).SMOO
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL3202.substitutions b/Bk9000_MBTApp/Db/KL3202.substitutions
new file mode 100644
index 0000000..3a062e5
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3202.substitutions
@@ -0,0 +1,40 @@
+#==============================================================================
+#
+# Abs:  Beckhoff KL3202 2 Ch RTD
+#
+# Name: KL3202.substitutions
+#
+# Auth: 10-oct-2010, Ravi Mirakhur			(rmirakhu)
+# Rev : 3-Nov-2011, Garth Brown		(gwbrown) Changed macros to match the template file
+#
+#==============================================================================
+#
+
+file KL3202.template
+{
+	pattern
+	{	SLOT,
+		SIG1, SIG1.DESC,
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,
+			SIG1.HYST,	SIG1.ADEL,	SIG1.MDEL,
+			SIG1.SMOO,	SIG1.SCAN,	
+		SIG2, SIG2.DESC,
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,
+			SIG2.HYST,	SIG2.ADEL,	SIG2.MDEL,
+			SIG2.SMOO,	SIG2.SCAN
+	}
+	{	2,
+		$(COUPLER_LOC):KL3202:SLOT$(SLOT):TEMP1, "Temperature 1",
+			850,		60,			55,
+			0,			0,			-250,
+			1,			1,			0.1,
+			0,			"1 second",	
+		$(COUPLER_LOC):KL3202:SLOT$(SLOT):TEMP2, "Temperature 2",
+			850,		60,		55,
+			0,			0,			-250,
+			1,			1,			0.1,
+			0,			"1 second"
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3202.template b/Bk9000_MBTApp/Db/KL3202.template
new file mode 100644
index 0000000..1b8d7ff
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3202.template
@@ -0,0 +1,45 @@
+record(ai, "$(SIG1)") {
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3202")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "1")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(HIHI, "$(SIG1.HIHI)")
+  field(HIGH, "$(SIG1.HIGH)")
+  field(LOW,  "$(SIG1.LOW)")
+  field(LOLO, "$(SIG1.LOLO)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(HYST, "$(SIG1.HYST)")
+  field(ADEL, "$(SIG1.ADEL)")
+  field(MDEL, "$(SIG1.MDEL)")
+  field(SMOO, "$(SIG1.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
+record(ai, "$(SIG2)") {
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3202")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "1")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(HIHI, "$(SIG2.HIHI)")
+  field(HIGH, "$(SIG2.HIGH)")
+  field(LOW,  "$(SIG2.LOW)")
+  field(LOLO, "$(SIG2.LOLO)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(HYST, "$(SIG2.HYST)")
+  field(ADEL, "$(SIG2.ADEL)")
+  field(MDEL, "$(SIG2.MDEL)")
+  field(SMOO, "$(SIG2.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
diff --git a/Bk9000_MBTApp/Db/KL3204-signal.tpl-arch b/Bk9000_MBTApp/Db/KL3204-signal.tpl-arch
new file mode 100644
index 0000000..4ecdbac
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3204-signal.tpl-arch
@@ -0,0 +1,17 @@
+# Archive Beckhoff KL3204 Analog Input Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
+$(SIG).SMOO		30
diff --git a/Bk9000_MBTApp/Db/KL3204-signal.tpl-req b/Bk9000_MBTApp/Db/KL3204-signal.tpl-req
new file mode 100644
index 0000000..4c55d0a
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3204-signal.tpl-req
@@ -0,0 +1,20 @@
+# Autosave Beckhoff KL3204 Analog Input Signal PV list
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).SMOO
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL3204.substitutions b/Bk9000_MBTApp/Db/KL3204.substitutions
new file mode 100644
index 0000000..a3f37a6
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3204.substitutions
@@ -0,0 +1,60 @@
+#==============================================================================
+#
+# Abs:  Beckhoff KL3204 4 Ch RTD
+#
+# Name: KL3204.substitutions
+#
+# Auth: 28-oct-2010, Garth Brown		(gwbrown)
+# Rev : dd-mmm-yyyy, Reviewer's Name	(USERNAME)
+#
+#==============================================================================
+#
+
+file KL3204.template
+{
+	pattern
+	{	SLOT,	COUPLER,
+		SIG1, SIG1.DESC,
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,
+			SIG1.HYST,	SIG1.ADEL,	SIG1.MDEL,
+			SIG1.SMOO,	SIG1.SCAN,	
+		SIG2, SIG2.DESC,
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,
+			SIG2.HYST,	SIG2.ADEL,	SIG2.MDEL,
+			SIG2.SMOO,	SIG2.SCAN,	
+		SIG3, SIG3.DESC,
+			SIG3.HOPR,	SIG3.HIHI,	SIG3.HIGH,
+			SIG3.LOW,	SIG3.LOLO,	SIG3.LOPR,
+			SIG3.HYST,	SIG3.ADEL,	SIG3.MDEL,
+			SIG3.SMOO,	SIG3.SCAN,	
+		SIG4, SIG4.DESC,
+			SIG4.HOPR,	SIG4.HIHI,	SIG4.HIGH,
+			SIG4.LOW,	SIG4.LOLO,	SIG4.LOPR,
+			SIG4.HYST,	SIG4.ADEL,	SIG4.MDEL,
+			SIG4.SMOO,	SIG4.SCAN
+	}
+	{	2,	"CXI-R51-BHC-08",
+		$(COUPLER_LOC):KL3204:SLOT$(SLOT):TEMP1, "Temperature 1",
+			850,		60,			55,
+			0,			0,			-250,
+			1,			1,			0.1,
+			0,			"1 second",	
+		$(COUPLER_LOC):KL3204:SLOT$(SLOT):TEMP2, "Temperature 2",
+			850,		60,		55,
+			0,			0,			-250,
+			1,			1,			0.1,
+			0,			"1 second",		
+		$(COUPLER_LOC):KL3204:SLOT$(SLOT):TEMP3, "Temperature 3",
+			850,		60,		55,
+			0,			0,			-250,
+			1,			1,			0.1,
+			0,			"1 second",	
+		$(COUPLER_LOC):KL3204:SLOT$(SLOT):TEMP4, "Temperature 4",
+			850,		60,		55,
+			0,			0,			-250,
+			1,			1,			0.1,
+			0,			"1 second",
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3204.template b/Bk9000_MBTApp/Db/KL3204.template
new file mode 100644
index 0000000..ad23229
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3204.template
@@ -0,0 +1,94 @@
+# KL3204 is 4-Ch RTD module, 0.1 degree C per count
+
+record(ai, "$(SIG1)") {
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3204")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "1")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(HIHI, "$(SIG1.HIHI)")
+  field(HIGH, "$(SIG1.HIGH)")
+  field(LOW,  "$(SIG1.LOW)")
+  field(LOLO, "$(SIG1.LOLO)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(HYST, "$(SIG1.HYST)")
+  field(ADEL, "$(SIG1.ADEL)")
+  field(MDEL, "$(SIG1.MDEL)")
+  field(SMOO, "$(SIG1.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
+record(ai, "$(SIG2)") {
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3204")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "1")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(HIHI, "$(SIG2.HIHI)")
+  field(HIGH, "$(SIG2.HIGH)")
+  field(LOW,  "$(SIG2.LOW)")
+  field(LOLO, "$(SIG2.LOLO)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(HYST, "$(SIG2.HYST)")
+  field(ADEL, "$(SIG2.ADEL)")
+  field(MDEL, "$(SIG2.MDEL)")
+  field(SMOO, "$(SIG2.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
+record(ai, "$(SIG3)") {
+  field(DESC, "$(SIG3.DESC)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL3204")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
+  field(PREC, "1")
+  field(HOPR, "$(SIG3.HOPR)")
+  field(HIHI, "$(SIG3.HIHI)")
+  field(HIGH, "$(SIG3.HIGH)")
+  field(LOW,  "$(SIG3.LOW)")
+  field(LOLO, "$(SIG3.LOLO)")
+  field(LOPR, "$(SIG3.LOPR)")
+  field(HYST, "$(SIG3.HYST)")
+  field(ADEL, "$(SIG3.ADEL)")
+  field(MDEL, "$(SIG3.MDEL)")
+  field(SMOO, "$(SIG3.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
+record(ai, "$(SIG4)") {
+  field(DESC, "$(SIG4.DESC)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL3204")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
+  field(PREC, "1")
+  field(HOPR, "$(SIG4.HOPR)")
+  field(HIHI, "$(SIG4.HIHI)")
+  field(HIGH, "$(SIG4.HIGH)")
+  field(LOW,  "$(SIG4.LOW)")
+  field(LOLO, "$(SIG4.LOLO)")
+  field(LOPR, "$(SIG4.LOPR)")
+  field(HYST, "$(SIG4.HYST)")
+  field(ADEL, "$(SIG4.ADEL)")
+  field(MDEL, "$(SIG4.MDEL)")
+  field(SMOO, "$(SIG4.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3222-lcls.template b/Bk9000_MBTApp/Db/KL3222-lcls.template
new file mode 100644
index 0000000..62eae91
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3222-lcls.template
@@ -0,0 +1,135 @@
+#==============================================================================
+#
+# Abs:  RTD module KL3222 template, customized for LCLS conventions
+#
+# Name: KL3222-lcls.template
+# 
+# Macros: 
+#
+#	APC	(All Purpose Controller) 
+#		First three fields of APC device name, for example: APC:LTU0:1
+#		(Numbering convention: Each set of I/O modules that share a single
+#		controller is one unit. All PVs associated with this set of modules 
+#		should share this APC device name.)
+#
+#	COUPLER Node name of coupler, for example: bkhf-ltu0-tm01
+#
+#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
+#		The first module to the right of the coupler is in slot 1.
+#
+#	D	Type of device (string), for example: "RTD" 
+#               or device description, for example "50B1"
+#
+#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
+#		The first module to the right of the coupler is in slot 1.
+#
+#	CH	Channel number, from 1 to 4	
+#
+#	ALIAS   Device name, for example: QUAD:LTU0:110:TEMP
+#
+#       SCAN    Data acquisition rate in EPICS record SCAN format. If you are not using data
+#               averaging, set this to "1 second". Otherwise, set it to your desired 
+#               data acquisition rate. It will set the scan rate for the low-level PVs.
+#               The high-level PVs (ALIAS) still scan at "1 second".
+#               
+# 	NSAM	Number of samples to average in _AVG compress record.
+#               Set to "1" if no averaging desired.
+#       
+#       ASG     Access Security Group (used by RTDs for MPS)
+#
+#==============================================================================
+
+record(ai, "$(ALIAS)") {
+  field(DESC,"$(D)")
+  field(SCAN, "1 second")
+  field(INP, "$(ALIAS)_AVG PP MS")
+  field(PREC, "$(P)")
+  field(EGU, "DegF")
+  field(HOPR, "$(H)")
+  field(LOPR, "$(L)")
+  field(HIHI, "$(HH)")
+  field(LOLO, "$(LL)")
+  field(HIGH, "$(HI)")
+  field(LOW, "$(LO)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV, "MINOR")
+  field(LSV, "MINOR")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(ASG, "$(ASG)")
+}
+
+# Optional averaging
+# If no averaging desired, 
+#    set $(NSAM) to "1" and $(SCAN) to "1 second"
+#---------------------------------------
+record(compress, "$(ALIAS)_AVG") {
+  field(DESC, "Avg sig samples")
+  field(INP, "$(ALIAS)_DATA NPP MS")
+  field(ALG, "N to 1 Average")
+  field(N, "$(NSAM)")
+  field(NSAM, "1")
+  field(PREC, "$(P)")
+  field(ASG, "$(ASG)")
+}
+
+record(compress, "$(ALIAS)_DATA") {
+  field(DESC, "Samples to avg")
+  field(INP, "$(APC):M$(SLOT)_CH$(CH)_TEMP NPP MS")
+  field(ALG, "Circular Buffer")
+  field(NSAM, "$(NSAM)")
+  field(PREC, "$(P)")
+  field(ASG, "$(ASG)")
+}
+#-----------------------------------------
+
+# Convert degC to degF
+# .VAL and .A  used by generic KL3314 diagnostic display
+record(calc, "$(APC):M$(SLOT)_CH$(CH)_TEMP") {
+  field(DESC, "$(D)")
+  field(FLNK, "$(ALIAS)")
+  field(CALC, "A*1.8+32")
+  field(INPA, "$(APC):M$(SLOT)_CH$(CH)_SIG NPP MS")
+  field(EGU, "DegF")
+  field(PREC, "$(P)")
+  field(HOPR, "$(H)")
+  field(LOPR, "$(L)")
+  field(HIHI, "$(HH)")
+  field(LOLO, "$(LL)")
+  field(HIGH, "$(HI)")
+  field(LOW, "$(LO)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV, "MINOR")
+  field(LSV, "MINOR")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(FLNK, "$(ALIAS)_DATA")
+  field(ASG, "$(ASG)")
+}
+
+record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
+  field(DESC, "RTD Readback")
+  field(SCAN, "1 second")
+  field(DTYP, "Bk9000_KL3222")
+  field(INP, "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
+  field(PREC, "1")
+  field(HOPR, "500")
+  field(HIHI, "500")
+  field(HIGH, "500")
+  field(LOW,  "-100")
+  field(LOLO, "-100")
+  field(LOPR, "-100")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(EGU, "DegC")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_TEMP")
+  field(ASG, "$(ASG)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3222.substitutions b/Bk9000_MBTApp/Db/KL3222.substitutions
new file mode 100644
index 0000000..65f83a2
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3222.substitutions
@@ -0,0 +1,40 @@
+#==============================================================================
+#
+# Abs:  Beckhoff KL3222 2 Ch RTD
+#
+# Name: KL3222.substitutions
+#
+# Auth: 10-oct-2010, Ravi Mirakhur			(rmirakhu)
+# Rev : 3-Nov-2011, Garth Brown		(gwbrown) Changed macros to match the template file
+#
+#==============================================================================
+#
+
+file KL3222.template
+{
+	pattern
+	{	SLOT,
+		SIG1, SIG1.DESC,
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,
+			SIG1.HYST,	SIG1.ADEL,	SIG1.MDEL,
+			SIG1.SMOO,	SIG1.SCAN,	
+		SIG2, SIG2.DESC,
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,
+			SIG2.HYST,	SIG2.ADEL,	SIG2.MDEL,
+			SIG2.SMOO,	SIG2.SCAN
+	}
+	{	2,
+		$(COUPLER_LOC):KL3222:SLOT$(SLOT):TEMP1, "Temperature 1",
+			850,		60,			55,
+			0,			0,			-250,
+			1,			1,			0.1,
+			0,			"1 second",	
+		$(COUPLER_LOC):KL3222:SLOT$(SLOT):TEMP2, "Temperature 2",
+			850,		60,		55,
+			0,			0,			-250,
+			1,			1,			0.1,
+			0,			"1 second"
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3222.template b/Bk9000_MBTApp/Db/KL3222.template
new file mode 100644
index 0000000..c9b4e92
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3222.template
@@ -0,0 +1,45 @@
+record(ai, "$(SIG1)") {
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3222")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "1")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(HIHI, "$(SIG1.HIHI)")
+  field(HIGH, "$(SIG1.HIGH)")
+  field(LOW,  "$(SIG1.LOW)")
+  field(LOLO, "$(SIG1.LOLO)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(HYST, "$(SIG1.HYST)")
+  field(ADEL, "$(SIG1.ADEL)")
+  field(MDEL, "$(SIG1.MDEL)")
+  field(SMOO, "$(SIG1.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
+record(ai, "$(SIG2)") {
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3222")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "1")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(HIHI, "$(SIG2.HIHI)")
+  field(HIGH, "$(SIG2.HIGH)")
+  field(LOW,  "$(SIG2.LOW)")
+  field(LOLO, "$(SIG2.LOLO)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(HYST, "$(SIG2.HYST)")
+  field(ADEL, "$(SIG2.ADEL)")
+  field(MDEL, "$(SIG2.MDEL)")
+  field(SMOO, "$(SIG2.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
diff --git a/Bk9000_MBTApp/Db/KL3312-signal.tpl-arch b/Bk9000_MBTApp/Db/KL3312-signal.tpl-arch
new file mode 100644
index 0000000..ac14f20
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3312-signal.tpl-arch
@@ -0,0 +1,17 @@
+# Archive Beckhoff KL3312 Thermocouple Input Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
+$(SIG).SMOO		30
diff --git a/Bk9000_MBTApp/Db/KL3312-signal.tpl-req b/Bk9000_MBTApp/Db/KL3312-signal.tpl-req
new file mode 100644
index 0000000..b61e0d9
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3312-signal.tpl-req
@@ -0,0 +1,20 @@
+# Autosave Beckhoff KL3312 Thermocouple Input Signal PV list
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).SMOO
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL3312.substitutions b/Bk9000_MBTApp/Db/KL3312.substitutions
new file mode 100644
index 0000000..131f072
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3312.substitutions
@@ -0,0 +1,43 @@
+#==============================================================================
+#
+# Abs:  Beckhoff KL3312 2 Ch Thermocouple
+#
+# Name: KL3312.substitutions
+#
+# Auth: 8-Jun-2009, Bruce Hill			(bhill)
+# Rev : dd-mmm-yyyy, Reviewer's Name	(USERNAME)
+#
+#==============================================================================
+#
+
+file KL3312.template
+{
+	pattern
+	{	SLOT,	
+		SIG1, SIG1.EGU, SIG1.DESC,
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,
+			SIG1.HYST,	SIG1.ADEL,	SIG1.MDEL,
+			SIG1.SMOO,	SIG1.SCAN,	
+		SIG2, SIG1.EGU,	SIG2.DESC,	
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,
+			SIG2.HYST,	SIG2.ADEL,	SIG2.MDEL,
+			SIG2.SMOO,	SIG2.SCAN,	
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	3,	
+		$(COUPLER_LOC):KL3312:SLOT$(SLOT):TEMP1, "C", "Temperature 1",
+			150,		120,		100,
+			40,			20,			0,
+			0,			0,			0,
+			0,			".1 second",	
+		$(COUPLER_LOC):KL3312:SLOT$(SLOT):TEMP2, "C", "Temperature 2",
+			150,		120,		100,
+			40,			20,			0,
+			0,			0,			0,
+			0,			".1 second",	
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3312.template b/Bk9000_MBTApp/Db/KL3312.template
new file mode 100644
index 0000000..473c8b2
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3312.template
@@ -0,0 +1,49 @@
+# KL3312 is thermocouple module, 0.1 degree C per count
+record(ai, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC=Signal Description)")
+  field(SCAN, "$(SIG1.SCAN=1 second)")
+  field(DTYP, "Bk9000_KL3312")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "$(SIG1.PREC=1)")
+  field(HOPR, "$(SIG1.HOPR=0)")
+  field(HIHI, "$(SIG1.HIHI=0)")
+  field(HIGH, "$(SIG1.HIGH=0)")
+  field(LOW,  "$(SIG1.LOW=0)")
+  field(LOLO, "$(SIG1.LOLO=0)")
+  field(LOPR, "$(SIG1.LOPR=0)")
+  field(HYST, "$(SIG1.HYST=0)")
+  field(ADEL, "$(SIG1.ADEL=0.1)")
+  field(MDEL, "$(SIG1.MDEL=0)")
+  field(SMOO, "$(SIG1.SMOO=0)")
+  field(EGU,  "$(SIG1.EGU=C)")
+  field(HHSV, "$(SIG1.HHSV=NO_ALARM)")
+  field(LLSV, "$(SIG1.LLSV=NO_ALARM)")
+  field(HSV,  "$(SIG1.HSV=NO_ALARM)")
+  field(LSV,  "$(SIG1.LSV=NO_ALARM)")
+}
+
+record(ai, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC=Signal Description)")
+  field(SCAN, "$(SIG2.SCAN=1 second)")
+  field(DTYP, "Bk9000_KL3312")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "$(SIG2.PREC=1)")
+  field(HOPR, "$(SIG2.HOPR=0)")
+  field(HIHI, "$(SIG2.HIHI=0)")
+  field(HIGH, "$(SIG2.HIGH=0)")
+  field(LOW,  "$(SIG2.LOW=0)")
+  field(LOLO, "$(SIG2.LOLO=0)")
+  field(LOPR, "$(SIG2.LOPR=0)")
+  field(HYST, "$(SIG2.HYST=0)")
+  field(ADEL, "$(SIG2.ADEL=0.1)")
+  field(MDEL, "$(SIG2.MDEL=0)")
+  field(SMOO, "$(SIG2.SMOO=0)")
+  field(EGU,  "$(SIG2.EGU=C)")
+  field(HHSV, "$(SIG2.HHSV=NO_ALARM)")
+  field(LLSV, "$(SIG2.LLSV=NO_ALARM)")
+  field(HSV,  "$(SIG2.HSV=NO_ALARM)")
+  field(LSV,  "$(SIG2.LSV=NO_ALARM)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3314-lcls.template b/Bk9000_MBTApp/Db/KL3314-lcls.template
new file mode 100644
index 0000000..dcea554
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3314-lcls.template
@@ -0,0 +1,127 @@
+#==============================================================================
+#
+# Abs:  Thermocouple module KL3314 template, customized for LCLS conventions
+#
+# Name: KL3314-lcls.template
+# 
+# Macros: 
+#
+#	APC	(All Purpose Controller) 
+#		First three fields of APC device name, for example: APC:LTU0:1
+#		(Numbering convention: Each set of I/O modules that share a single
+#		controller is one unit. All PVs associated with this set of modules 
+#		should share this APC device name.)
+#
+#	COUPLER Node name of coupler, for example: bkhf-ltu0-tm01
+#
+#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
+#		The first module to the right of the coupler is in slot 1.
+#
+#	D	Type of device (string), for example: "Thermocouple" 
+#               or device description, for example "50B1"
+#
+#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
+#		The first module to the right of the coupler is in slot 1.
+#
+#	CH	Channel number, from 1 to 4	
+#
+#	ALIAS   Device name, for example: QUAD:LTU0:110:TEMP
+#
+#       SCAN    Data acquisition rate in EPICS record SCAN format. If you are not using data
+#               averaging, set this to "1 second". Otherwise, set it to your desired 
+#               data acquisition rate. It will set the scan rate for the low-level PVs.
+#               The high-level PVs (ALIAS) still scan at "1 second".
+#               
+# 	NSAM	Number of samples to average in _AVG compress record.
+#               Set to "1" if no averaging desired.
+#
+#==============================================================================
+
+record(ai, "$(ALIAS)") {
+  field(DESC,"$(D)")
+  field(SCAN, "1 second")
+  field(INP, "$(ALIAS)_AVG PP MS")
+  field(PREC, "$(P)")
+  field(EGU, "DegF")
+  field(HOPR, "$(H)")
+  field(LOPR, "$(L)")
+  field(HIHI, "$(HH)")
+  field(LOLO, "$(LL)")
+  field(HIGH, "$(HI)")
+  field(LOW, "$(LO)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV, "MINOR")
+  field(LSV, "MINOR")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+}
+
+# Optional averaging
+# If no averaging desired, 
+#    set $(NSAM) to "1" and $(SCAN) to "1 second"
+#---------------------------------------
+record(compress, "$(ALIAS)_AVG") {
+  field(DESC, "Avg sig samples")
+  field(INP, "$(ALIAS)_DATA NPP MS")
+  field(ALG, "N to 1 Average")
+  field(N, "$(NSAM)")
+  field(NSAM, "1")
+  field(PREC, "$(P)")
+}
+
+record(compress, "$(ALIAS)_DATA") {
+  field(DESC, "Samples to avg")
+  field(INP, "$(APC):M$(SLOT)_CH$(CH)_TEMP NPP MS")
+  field(ALG, "Circular Buffer")
+  field(NSAM, "$(NSAM)")
+  field(PREC, "$(P)")
+}
+#-----------------------------------------
+
+# Convert degC to degF
+# .VAL and .A  used by generic KL3314 diagnostic display
+record(calc, "$(APC):M$(SLOT)_CH$(CH)_TEMP") {
+  field(DESC, "$(D)")
+  field(CALC, "A*1.8+32")
+  field(INPA, "$(APC):M$(SLOT)_CH$(CH)_SIG NPP MS")
+  field(EGU, "DegF")
+  field(PREC, "$(P)")
+  field(HOPR, "$(H)")
+  field(LOPR, "$(L)")
+  field(HIHI, "$(HH)")
+  field(LOLO, "$(LL)")
+  field(HIGH, "$(HI)")
+  field(LOW, "$(LO)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV, "MINOR")
+  field(LSV, "MINOR")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(FLNK, "$(ALIAS)_DATA")
+}
+
+record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
+  field(DESC, "Thermocouple Readback")
+  field(SCAN, "$(SCAN)")
+  field(DTYP, "Bk9000_KL3314")
+  field(INP, "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
+  field(PREC, "1")
+  field(HOPR, "500")
+  field(HIHI, "500")
+  field(HIGH, "500")
+  field(LOW,  "-100")
+  field(LOLO, "-100")
+  field(LOPR, "-100")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(EGU, "DegC")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_TEMP")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3314-signal.tpl-arch b/Bk9000_MBTApp/Db/KL3314-signal.tpl-arch
new file mode 100644
index 0000000..d5cecb6
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3314-signal.tpl-arch
@@ -0,0 +1,17 @@
+# Archive Beckhoff KL3314 Thermocouple Input Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
+$(SIG).SMOO		30
diff --git a/Bk9000_MBTApp/Db/KL3314-signal.tpl-req b/Bk9000_MBTApp/Db/KL3314-signal.tpl-req
new file mode 100644
index 0000000..409081e
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3314-signal.tpl-req
@@ -0,0 +1,20 @@
+# Autosave Beckhoff KL3314 Thermocouple Input Signal PV list
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).SMOO
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL3314.substitutions b/Bk9000_MBTApp/Db/KL3314.substitutions
new file mode 100644
index 0000000..6d16e99
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3314.substitutions
@@ -0,0 +1,66 @@
+#==============================================================================
+#
+# Abs:  Beckhoff KL3314 4 Ch Thermocouple
+#
+# Name: KL3314.substitutions
+#
+# Auth: 22-May-2009, Bruce Hill			(bhill)
+# Rev : dd-mmm-yyyy, Reviewer's Name	(USERNAME)
+#
+#==============================================================================
+#
+
+file KL3314.template
+{
+	pattern
+	{	SLOT,	
+		SIG1, SIG1.DESC,
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,
+			SIG1.HYST,	SIG1.ADEL,	SIG1.MDEL,
+			SIG1.SMOO,	SIG1.SCAN,	
+		SIG2, SIG2.DESC,
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,
+			SIG2.HYST,	SIG2.ADEL,	SIG2.MDEL,
+			SIG2.SMOO,	SIG2.SCAN,	
+		SIG3, SIG3.DESC,
+			SIG3.HOPR,	SIG3.HIHI,	SIG3.HIGH,
+			SIG3.LOW,	SIG3.LOLO,	SIG3.LOPR,
+			SIG3.HYST,	SIG3.ADEL,	SIG3.MDEL,
+			SIG3.SMOO,	SIG3.SCAN,	
+		SIG4, SIG4.DESC,
+			SIG4.HOPR,	SIG4.HIHI,	SIG4.HIGH,
+			SIG4.LOW,	SIG4.LOLO,	SIG4.LOPR,
+			SIG4.HYST,	SIG4.ADEL,	SIG4.MDEL,
+			SIG4.SMOO,	SIG4.SCAN
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	2,	
+		$(COUPLER_LOC):KL3314:SLOT$(SLOT):TEMP1, "Temperature 1",
+			150,		120,		100,
+			40,			20,			0,
+			0,			.2,			0,
+			0,			"1 second",	
+		$(COUPLER_LOC):KL3314:SLOT$(SLOT):TEMP2, "Temperature 2",
+			150,		120,		100,
+			40,			20,			0,
+			0,			.2,			0,
+			0,			"1 second",	
+		$(COUPLER_LOC):KL3314:SLOT$(SLOT):TEMP3, "Temperature 3",
+			150,		120,		100,
+			40,			20,			0,
+			0,			.2,			0,
+			0,			"1 second",	
+		$(COUPLER_LOC):KL3314:SLOT$(SLOT):TEMP4, "Temperature 4",
+			150,		120,		100,
+			40,			20,			0,
+			0,			.2,			0,
+			0,			"1 second",	
+	}
+}
+
+
+
diff --git a/Bk9000_MBTApp/Db/KL3314.template b/Bk9000_MBTApp/Db/KL3314.template
new file mode 100644
index 0000000..d266903
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3314.template
@@ -0,0 +1,96 @@
+record(ai, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3314")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "1")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(HIHI, "$(SIG1.HIHI)")
+  field(HIGH, "$(SIG1.HIGH)")
+  field(LOW,  "$(SIG1.LOW)")
+  field(LOLO, "$(SIG1.LOLO)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(HYST, "$(SIG1.HYST)")
+  field(ADEL, "$(SIG1.ADEL)")
+  field(MDEL, "$(SIG1.MDEL)")
+  field(SMOO, "$(SIG1.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
+record(ai, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3314")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "1")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(HIHI, "$(SIG2.HIHI)")
+  field(HIGH, "$(SIG2.HIGH)")
+  field(LOW,  "$(SIG2.LOW)")
+  field(LOLO, "$(SIG2.LOLO)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(HYST, "$(SIG2.HYST)")
+  field(ADEL, "$(SIG2.ADEL)")
+  field(MDEL, "$(SIG2.MDEL)")
+  field(SMOO, "$(SIG2.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
+record(ai, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL3314")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
+  field(PREC, "1")
+  field(HOPR, "$(SIG3.HOPR)")
+  field(HIHI, "$(SIG3.HIHI)")
+  field(HIGH, "$(SIG3.HIGH)")
+  field(LOW,  "$(SIG3.LOW)")
+  field(LOLO, "$(SIG3.LOLO)")
+  field(LOPR, "$(SIG3.LOPR)")
+  field(HYST, "$(SIG3.HYST)")
+  field(ADEL, "$(SIG3.ADEL)")
+  field(MDEL, "$(SIG3.MDEL)")
+  field(SMOO, "$(SIG3.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
+record(ai, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL3314")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
+  field(PREC, "1")
+  field(HOPR, "$(SIG4.HOPR)")
+  field(HIHI, "$(SIG4.HIHI)")
+  field(HIGH, "$(SIG4.HIGH)")
+  field(LOW,  "$(SIG4.LOW)")
+  field(LOLO, "$(SIG4.LOLO)")
+  field(LOPR, "$(SIG4.LOPR)")
+  field(HYST, "$(SIG4.HYST)")
+  field(ADEL, "$(SIG4.ADEL)")
+  field(MDEL, "$(SIG4.MDEL)")
+  field(SMOO, "$(SIG4.SMOO)")
+  field(EGU,  "C")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3404-signal.template b/Bk9000_MBTApp/Db/KL3404-signal.template
new file mode 100644
index 0000000..be2782b
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3404-signal.template
@@ -0,0 +1,29 @@
+# KL3404 is a 4-ch 12 bit analog input module
+
+record(ai, "$(SIG)")
+{
+  field(DESC, "$(SIG.DESC=Signal Description)")
+  field(SCAN, "$(SIG.SCAN)")
+  field(DTYP, "Bk9000_KL3404")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
+  field(PREC, "$(SIG.PREC=3)")
+  field(ADEL, "$(SIG.ADEL=0.01)")
+  field(EGUF, "$(SIG.EGUF=10)")
+  field(EGUL, "$(SIG.EGUL=-10)")
+  field(HIGH, "$(SIG.HIGH=0)")
+  field(HIHI, "$(SIG.HIHI=0)")
+  field(HOPR, "$(SIG.HOPR=10)")
+  field(HYST, "$(SIG.HYST=0)")
+  field(LOLO, "$(SIG.LOLO=0)")
+  field(LOPR, "$(SIG.LOPR=-10)")
+  field(LOW,  "$(SIG.LOW=0)")
+  field(MDEL, "$(SIG.MDEL=0)")
+  field(SMOO, "$(SIG.SMOO=0)")
+  field(EGU,  "$(SIG.EGU=V)")
+  field(HHSV, "$(SIG.HHSV=NO_ALARM)")
+  field(LLSV, "$(SIG.LLSV=NO_ALARM)")
+  field(HSV,  "$(SIG.HSV=NO_ALARM)")
+  field(LSV,  "$(SIG.LSV=NO_ALARM)")
+  field(LINR, "$(SIG.LINR=LINEAR)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3404-signal.tpl-arch b/Bk9000_MBTApp/Db/KL3404-signal.tpl-arch
new file mode 100644
index 0000000..51056ce
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3404-signal.tpl-arch
@@ -0,0 +1,17 @@
+# Archive Beckhoff KL3404 Analog Input Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
+$(SIG).SMOO		30
diff --git a/Bk9000_MBTApp/Db/KL3404-signal.tpl-req b/Bk9000_MBTApp/Db/KL3404-signal.tpl-req
new file mode 100644
index 0000000..6c3a340
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3404-signal.tpl-req
@@ -0,0 +1,20 @@
+# Autosave Beckhoff KL3404 Analog Input Signal PV list
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).SMOO
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL3404.substitutions b/Bk9000_MBTApp/Db/KL3404.substitutions
new file mode 100644
index 0000000..fd478b8
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3404.substitutions
@@ -0,0 +1,45 @@
+# KL3404 is a 4-ch 12 bit analog input module
+
+file KL3404.template
+{
+	pattern
+	{	SLOT,
+		SIG1,		SIG1.DESC,
+			SIG1.ADEL,	SIG1.MDEL,	SIG1.SMOO,	SIG1.UNIT, SIG1.EGUF,	SIG1.EGUL,	
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,	SIG1.HYST,	
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,	SIG1.SCAN,
+		SIG2,		SIG2.DESC,
+			SIG2.ADEL,	SIG2.MDEL,	SIG2.SMOO,	SIG2.UNIT, SIG2.EGUF,	SIG2.EGUL,	
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,	SIG2.HYST,	
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,	SIG2.SCAN,
+		SIG3,		SIG3.DESC,
+			SIG3.ADEL,	SIG3.MDEL,	SIG3.SMOO,	SIG3.UNIT, SIG3.EGUF,	SIG3.EGUL,	
+			SIG3.HOPR,	SIG3.HIHI,	SIG3.HIGH,	SIG3.HYST,	
+			SIG3.LOW,	SIG3.LOLO,	SIG3.LOPR,	SIG3.SCAN,
+		SIG4,		SIG4.DESC,
+			SIG4.ADEL,	SIG4.MDEL,	SIG4.SMOO,	SIG4.UNIT, SIG4.EGUF,	SIG4.EGUL,	
+			SIG4.HOPR,	SIG4.HIHI,	SIG4.HIGH,	SIG4.HYST,	
+			SIG4.LOW,	SIG4.LOLO,	SIG4.LOPR,	SIG4.SCAN,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	15,
+		$(COUPLER_LOC):KL3404:SLOT$(SLOT):AIN1, "Signal 1 Description",
+			0,			0,			0,			Volt,		10,			-10,
+			10,			9,			5,			0,
+			-5,			-9,			-10,		".1 second",
+		$(COUPLER_LOC):KL3404:SLOT$(SLOT):AIN2, "Signal 2 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3404:SLOT$(SLOT):AIN3, "Signal 3 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3404:SLOT$(SLOT):AIN4, "Signal 4 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3404.template b/Bk9000_MBTApp/Db/KL3404.template
new file mode 100644
index 0000000..a87dec9
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3404.template
@@ -0,0 +1,110 @@
+# KL3404 is a 4-ch 12 bit analog input module
+
+record(ai, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC=Signal Description)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3404")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "$(SIG1.PREC=3)")
+  field(ADEL, "$(SIG1.ADEL=0.01)")
+  field(EGUF, "$(SIG1.EGUF=10)")
+  field(EGUL, "$(SIG1.EGUL=-10)")
+  field(HIGH, "$(SIG1.HIGH=0)")
+  field(HIHI, "$(SIG1.HIHI=0)")
+  field(HOPR, "$(SIG1.HOPR=10)")
+  field(HYST, "$(SIG1.HYST=0)")
+  field(LOLO, "$(SIG1.LOLO=0)")
+  field(LOPR, "$(SIG1.LOPR=-10)")
+  field(LOW,  "$(SIG1.LOW=0)")
+  field(MDEL, "$(SIG1.MDEL=0)")
+  field(SMOO, "$(SIG1.SMOO=0)")
+  field(EGU,  "$(SIG1.EGU=V)")
+  field(HHSV, "$(SIG1.HHSV=NO_ALARM)")
+  field(LLSV, "$(SIG1.LLSV=NO_ALARM)")
+  field(HSV,  "$(SIG1.HSV=NO_ALARM)")
+  field(LSV,  "$(SIG1.LSV=NO_ALARM)")
+  field(LINR, "$(SIG1.LINR=LINEAR)")
+}
+
+record(ai, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC=Signal Description)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3404")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "$(SIG2.PREC=3)")
+  field(ADEL, "$(SIG2.ADEL=0.01)")
+  field(EGUF, "$(SIG2.EGUF=10)")
+  field(EGUL, "$(SIG2.EGUL=-10)")
+  field(HIGH, "$(SIG2.HIGH=0)")
+  field(HIHI, "$(SIG2.HIHI=0)")
+  field(HOPR, "$(SIG2.HOPR=10)")
+  field(HYST, "$(SIG2.HYST=0)")
+  field(LOLO, "$(SIG2.LOLO=0)")
+  field(LOPR, "$(SIG2.LOPR=-10)")
+  field(LOW,  "$(SIG2.LOW=0)")
+  field(MDEL, "$(SIG2.MDEL=0)")
+  field(SMOO, "$(SIG2.SMOO=0)")
+  field(EGU,  "$(SIG2.EGU=V)")
+  field(HHSV, "$(SIG2.HHSV=NO_ALARM)")
+  field(LLSV, "$(SIG2.LLSV=NO_ALARM)")
+  field(HSV,  "$(SIG2.HSV=NO_ALARM)")
+  field(LSV,  "$(SIG2.LSV=NO_ALARM)")
+  field(LINR, "$(SIG2.LINR=LINEAR)")
+}
+
+record(ai, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC=Signal Description)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL3404")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
+  field(PREC, "$(SIG3.PREC=3)")
+  field(ADEL, "$(SIG3.ADEL=0.01)")
+  field(EGUF, "$(SIG3.EGUF=10)")
+  field(EGUL, "$(SIG3.EGUL=-10)")
+  field(HIGH, "$(SIG3.HIGH=0)")
+  field(HIHI, "$(SIG3.HIHI=0)")
+  field(HOPR, "$(SIG3.HOPR=10)")
+  field(HYST, "$(SIG3.HYST=0)")
+  field(LOLO, "$(SIG3.LOLO=0)")
+  field(LOPR, "$(SIG3.LOPR=-10)")
+  field(LOW,  "$(SIG3.LOW=0)")
+  field(MDEL, "$(SIG3.MDEL=0)")
+  field(SMOO, "$(SIG3.SMOO=0)")
+  field(EGU,  "$(SIG3.EGU=V)")
+  field(HHSV, "$(SIG3.HHSV=NO_ALARM)")
+  field(LLSV, "$(SIG3.LLSV=NO_ALARM)")
+  field(HSV,  "$(SIG3.HSV=NO_ALARM)")
+  field(LSV,  "$(SIG3.LSV=NO_ALARM)")
+  field(LINR, "$(SIG3.LINR=LINEAR)")
+}
+
+record(ai, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC=Signal Description)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL3404")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
+  field(PREC, "$(SIG4.PREC=3)")
+  field(ADEL, "$(SIG4.ADEL=0.01)")
+  field(EGUF, "$(SIG4.EGUF=10)")
+  field(EGUL, "$(SIG4.EGUL=-10)")
+  field(HIGH, "$(SIG4.HIGH=0)")
+  field(HIHI, "$(SIG4.HIHI=0)")
+  field(HOPR, "$(SIG4.HOPR=10)")
+  field(HYST, "$(SIG4.HYST=0)")
+  field(LOLO, "$(SIG4.LOLO=0)")
+  field(LOPR, "$(SIG4.LOPR=-10)")
+  field(LOW,  "$(SIG4.LOW=0)")
+  field(MDEL, "$(SIG4.MDEL=0)")
+  field(SMOO, "$(SIG4.SMOO=0)")
+  field(EGU,  "$(SIG4.EGU=V)")
+  field(HHSV, "$(SIG4.HHSV=NO_ALARM)")
+  field(LLSV, "$(SIG4.LLSV=NO_ALARM)")
+  field(HSV,  "$(SIG4.HSV=NO_ALARM)")
+  field(LSV,  "$(SIG4.LSV=NO_ALARM)")
+  field(LINR, "$(SIG4.LINR=LINEAR)")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3408-lcls.template b/Bk9000_MBTApp/Db/KL3408-lcls.template
new file mode 100644
index 0000000..4e9085d
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3408-lcls.template
@@ -0,0 +1,24 @@
+record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
+  field(DESC, "$(D)")
+  field(SCAN, "1 second")
+  field(DTYP, "Bk9000_KL3408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
+  field(EGUF, "$(EGUF)")
+  field(EGUL, "$(EGUL)")
+  field(HOPR, "11")
+  field(LOPR, "-11")
+  field(HIHI, "10")
+  field(LOLO, "-10")
+  field(HIGH, "10")
+  field(LOW,  "-10")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(EGU,  "Volts")
+  field(SMOO, "$(SMOO)")
+  field(LINR, "LINEAR")
+  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_EGU")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3408-signal.tpl-arch b/Bk9000_MBTApp/Db/KL3408-signal.tpl-arch
new file mode 100644
index 0000000..ce3888b
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3408-signal.tpl-arch
@@ -0,0 +1,17 @@
+# Archive Beckhoff KL3408 Analog Input Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
+$(SIG).SMOO		30
diff --git a/Bk9000_MBTApp/Db/KL3408-signal.tpl-req b/Bk9000_MBTApp/Db/KL3408-signal.tpl-req
new file mode 100644
index 0000000..dc62a99
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3408-signal.tpl-req
@@ -0,0 +1,20 @@
+# Autosave Beckhoff KL3408 Analog Input Signal PV list
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).SMOO
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL3408.substitutions b/Bk9000_MBTApp/Db/KL3408.substitutions
new file mode 100644
index 0000000..152258e
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3408.substitutions
@@ -0,0 +1,76 @@
+
+file KL3408.template
+{
+	pattern
+	{	SLOT,
+		SIG1,		SIG1.DESC,
+			SIG1.ADEL,	SIG1.MDEL,	SIG1.SMOO,	SIG1.UNIT, SIG1.EGUF,	SIG1.EGUL,	
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,	SIG1.HYST,	
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,	SIG1.SCAN,
+		SIG2,		SIG2.DESC,
+			SIG2.ADEL,	SIG2.MDEL,	SIG2.SMOO,	SIG2.UNIT, SIG2.EGUF,	SIG2.EGUL,	
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,	SIG2.HYST,	
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,	SIG2.SCAN,
+		SIG3,		SIG3.DESC,
+			SIG3.ADEL,	SIG3.MDEL,	SIG3.SMOO,	SIG3.UNIT, SIG3.EGUF,	SIG3.EGUL,	
+			SIG3.HOPR,	SIG3.HIHI,	SIG3.HIGH,	SIG3.HYST,	
+			SIG3.LOW,	SIG3.LOLO,	SIG3.LOPR,	SIG3.SCAN,
+		SIG4,		SIG4.DESC,
+			SIG4.ADEL,	SIG4.MDEL,	SIG4.SMOO,	SIG4.UNIT, SIG4.EGUF,	SIG4.EGUL,	
+			SIG4.HOPR,	SIG4.HIHI,	SIG4.HIGH,	SIG4.HYST,	
+			SIG4.LOW,	SIG4.LOLO,	SIG4.LOPR,	SIG4.SCAN,
+		SIG5,		SIG5.DESC,
+			SIG5.ADEL,	SIG5.MDEL,	SIG5.SMOO,	SIG5.UNIT, SIG5.EGUF,	SIG5.EGUL,	
+			SIG5.HOPR,	SIG5.HIHI,	SIG5.HIGH,	SIG5.HYST,	
+			SIG5.LOW,	SIG5.LOLO,	SIG5.LOPR,	SIG5.SCAN,
+		SIG6,		SIG6.DESC,
+			SIG6.ADEL,	SIG6.MDEL,	SIG6.SMOO,	SIG6.UNIT, SIG6.EGUF,	SIG6.EGUL,	
+			SIG6.HOPR,	SIG6.HIHI,	SIG6.HIGH,	SIG6.HYST,	
+			SIG6.LOW,	SIG6.LOLO,	SIG6.LOPR,	SIG6.SCAN,
+		SIG7,		SIG7.DESC,
+			SIG7.ADEL,	SIG7.MDEL,	SIG7.SMOO,	SIG7.UNIT, SIG7.EGUF,	SIG7.EGUL,	
+			SIG7.HOPR,	SIG7.HIHI,	SIG7.HIGH,	SIG7.HYST,	
+			SIG7.LOW,	SIG7.LOLO,	SIG7.LOPR,	SIG7.SCAN,
+		SIG8,		SIG8.DESC,
+			SIG8.ADEL,	SIG8.MDEL,	SIG8.SMOO,	SIG8.UNIT, SIG8.EGUF,	SIG8.EGUL,	
+			SIG8.HOPR,	SIG8.HIHI,	SIG8.HIGH,	SIG8.HYST,	
+			SIG8.LOW,	SIG8.LOLO,	SIG8.LOPR,	SIG8.SCAN,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	15,
+		$(COUPLER_LOC):KL3408:SLOT$(SLOT):AIN1, "Signal 1 Description",
+			0,			0,			0,			Volt,		10,			-10,
+			10,			9,			5,			0,
+			-5,			-9,			-10,		".1 second",
+		$(COUPLER_LOC):KL3408:SLOT$(SLOT):AIN2, "Signal 2 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3408:SLOT$(SLOT):AIN3, "Signal 3 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3408:SLOT$(SLOT):AIN4, "Signal 4 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3408:SLOT$(SLOT):AIN5, "Signal 5 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3408:SLOT$(SLOT):AIN6, "Signal 6 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3408:SLOT$(SLOT):AIN7, "Signal 7 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3408:SLOT$(SLOT):AIN8, "Signal 8 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3408.template b/Bk9000_MBTApp/Db/KL3408.template
new file mode 100644
index 0000000..f7ecdd7
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3408.template
@@ -0,0 +1,216 @@
+record(ai, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "3")
+  field(ADEL, "$(SIG1.ADEL)")
+  field(EGUF, "$(SIG1.EGUF)")
+  field(EGUL, "$(SIG1.EGUL)")
+  field(HIGH, "$(SIG1.HIGH)")
+  field(HIHI, "$(SIG1.HIHI)")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(HYST, "$(SIG1.HYST)")
+  field(LOLO, "$(SIG1.LOLO)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(LOW,  "$(SIG1.LOW)")
+  field(MDEL, "$(SIG1.MDEL)")
+  field(SMOO, "$(SIG1.SMOO)")
+  field(EGU,  "$(SIG1.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "3")
+  field(ADEL, "$(SIG2.ADEL)")
+  field(EGUF, "$(SIG2.EGUF)")
+  field(EGUL, "$(SIG2.EGUL)")
+  field(HIGH, "$(SIG2.HIGH)")
+  field(HIHI, "$(SIG2.HIHI)")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(HYST, "$(SIG2.HYST)")
+  field(LOLO, "$(SIG2.LOLO)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(LOW,  "$(SIG2.LOW)")
+  field(MDEL, "$(SIG2.MDEL)")
+  field(SMOO, "$(SIG2.SMOO)")
+  field(EGU,  "$(SIG2.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL3408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
+  field(PREC, "3")
+  field(ADEL, "$(SIG3.ADEL)")
+  field(EGUF, "$(SIG3.EGUF)")
+  field(EGUL, "$(SIG3.EGUL)")
+  field(HIGH, "$(SIG3.HIGH)")
+  field(HIHI, "$(SIG3.HIHI)")
+  field(HOPR, "$(SIG3.HOPR)")
+  field(HYST, "$(SIG3.HYST)")
+  field(LOLO, "$(SIG3.LOLO)")
+  field(LOPR, "$(SIG3.LOPR)")
+  field(LOW,  "$(SIG3.LOW)")
+  field(MDEL, "$(SIG3.MDEL)")
+  field(SMOO, "$(SIG3.SMOO)")
+  field(EGU,  "$(SIG3.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL3408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
+  field(PREC, "3")
+  field(ADEL, "$(SIG4.ADEL)")
+  field(EGUF, "$(SIG4.EGUF)")
+  field(EGUL, "$(SIG4.EGUL)")
+  field(HIGH, "$(SIG4.HIGH)")
+  field(HIHI, "$(SIG4.HIHI)")
+  field(HOPR, "$(SIG4.HOPR)")
+  field(HYST, "$(SIG4.HYST)")
+  field(LOLO, "$(SIG4.LOLO)")
+  field(LOPR, "$(SIG4.LOPR)")
+  field(LOW,  "$(SIG4.LOW)")
+  field(MDEL, "$(SIG4.MDEL)")
+  field(SMOO, "$(SIG4.SMOO)")
+  field(EGU,  "$(SIG4.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG5)")
+{
+  field(DESC, "$(SIG5.DESC)")
+  field(SCAN, "$(SIG5.SCAN)")
+  field(DTYP, "Bk9000_KL3408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_5")
+  field(PREC, "3")
+  field(ADEL, "$(SIG5.ADEL)")
+  field(EGUF, "$(SIG5.EGUF)")
+  field(EGUL, "$(SIG5.EGUL)")
+  field(HIGH, "$(SIG5.HIGH)")
+  field(HIHI, "$(SIG5.HIHI)")
+  field(HOPR, "$(SIG5.HOPR)")
+  field(HYST, "$(SIG5.HYST)")
+  field(LOLO, "$(SIG5.LOLO)")
+  field(LOPR, "$(SIG5.LOPR)")
+  field(LOW,  "$(SIG5.LOW)")
+  field(MDEL, "$(SIG5.MDEL)")
+  field(SMOO, "$(SIG5.SMOO)")
+  field(EGU,  "$(SIG5.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG6)")
+{
+  field(DESC, "$(SIG6.DESC)")
+  field(SCAN, "$(SIG6.SCAN)")
+  field(DTYP, "Bk9000_KL3408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_6")
+  field(PREC, "3")
+  field(ADEL, "$(SIG6.ADEL)")
+  field(EGUF, "$(SIG6.EGUF)")
+  field(EGUL, "$(SIG6.EGUL)")
+  field(HIGH, "$(SIG6.HIGH)")
+  field(HIHI, "$(SIG6.HIHI)")
+  field(HOPR, "$(SIG6.HOPR)")
+  field(HYST, "$(SIG6.HYST)")
+  field(LOLO, "$(SIG6.LOLO)")
+  field(LOPR, "$(SIG6.LOPR)")
+  field(LOW,  "$(SIG6.LOW)")
+  field(MDEL, "$(SIG6.MDEL)")
+  field(SMOO, "$(SIG6.SMOO)")
+  field(EGU,  "$(SIG6.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG7)")
+{
+  field(DESC, "$(SIG7.DESC)")
+  field(SCAN, "$(SIG7.SCAN)")
+  field(DTYP, "Bk9000_KL3408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_7")
+  field(PREC, "3")
+  field(ADEL, "$(SIG7.ADEL)")
+  field(EGUF, "$(SIG7.EGUF)")
+  field(EGUL, "$(SIG7.EGUL)")
+  field(HIGH, "$(SIG7.HIGH)")
+  field(HIHI, "$(SIG7.HIHI)")
+  field(HOPR, "$(SIG7.HOPR)")
+  field(HYST, "$(SIG7.HYST)")
+  field(LOLO, "$(SIG7.LOLO)")
+  field(LOPR, "$(SIG7.LOPR)")
+  field(LOW,  "$(SIG7.LOW)")
+  field(MDEL, "$(SIG7.MDEL)")
+  field(SMOO, "$(SIG7.SMOO)")
+  field(EGU,  "$(SIG7.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG8)")
+{
+  field(DESC, "$(SIG8.DESC)")
+  field(SCAN, "$(SIG8.SCAN)")
+  field(DTYP, "Bk9000_KL3408")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_8")
+  field(PREC, "3")
+  field(ADEL, "$(SIG8.ADEL)")
+  field(EGUF, "$(SIG8.EGUF)")
+  field(EGUL, "$(SIG8.EGUL)")
+  field(HIGH, "$(SIG8.HIGH)")
+  field(HIHI, "$(SIG8.HIHI)")
+  field(HOPR, "$(SIG8.HOPR)")
+  field(HYST, "$(SIG8.HYST)")
+  field(LOLO, "$(SIG8.LOLO)")
+  field(LOPR, "$(SIG8.LOPR)")
+  field(LOW,  "$(SIG8.LOW)")
+  field(MDEL, "$(SIG8.MDEL)")
+  field(SMOO, "$(SIG8.SMOO)")
+  field(EGU,  "$(SIG8.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3464.substitutions b/Bk9000_MBTApp/Db/KL3464.substitutions
new file mode 100644
index 0000000..0b44383
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3464.substitutions
@@ -0,0 +1,44 @@
+
+file KL3464.template
+{
+	pattern
+	{	SLOT,
+		SIG1,		SIG1.DESC,
+			SIG1.ADEL,	SIG1.MDEL,	SIG1.SMOO,	SIG1.UNIT, SIG1.EGUF,	SIG1.EGUL,	
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,	SIG1.HYST,	
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,	SIG1.SCAN,
+		SIG2,		SIG2.DESC,
+			SIG2.ADEL,	SIG2.MDEL,	SIG2.SMOO,	SIG2.UNIT, SIG2.EGUF,	SIG2.EGUL,	
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,	SIG2.HYST,	
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,	SIG2.SCAN,
+		SIG3,		SIG3.DESC,
+			SIG3.ADEL,	SIG3.MDEL,	SIG3.SMOO,	SIG3.UNIT, SIG3.EGUF,	SIG3.EGUL,	
+			SIG3.HOPR,	SIG3.HIHI,	SIG3.HIGH,	SIG3.HYST,	
+			SIG3.LOW,	SIG3.LOLO,	SIG3.LOPR,	SIG3.SCAN,
+		SIG4,		SIG4.DESC,
+			SIG4.ADEL,	SIG4.MDEL,	SIG4.SMOO,	SIG4.UNIT, SIG4.EGUF,	SIG4.EGUL,	
+			SIG4.HOPR,	SIG4.HIHI,	SIG4.HIGH,	SIG4.HYST,	
+			SIG4.LOW,	SIG4.LOLO,	SIG4.LOPR,	SIG4.SCAN
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	14,
+		$(COUPLER_LOC):KL3464:SLOT$(SLOT):AIN1, "Signal 1 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3464:SLOT$(SLOT):AIN2, "Signal 2 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3464:SLOT$(SLOT):AIN3, "Signal 3 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3464:SLOT$(SLOT):AIN4, "Signal 4 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second"
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3464.template b/Bk9000_MBTApp/Db/KL3464.template
new file mode 100644
index 0000000..04b0493
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3464.template
@@ -0,0 +1,108 @@
+record(ai, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3464")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "3")
+  field(ADEL, "$(SIG1.ADEL)")
+  field(EGUF, "$(SIG1.EGUF)")
+  field(EGUL, "$(SIG1.EGUL)")
+  field(HIGH, "$(SIG1.HIGH)")
+  field(HIHI, "$(SIG1.HIHI)")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(HYST, "$(SIG1.HYST)")
+  field(LOLO, "$(SIG1.LOLO)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(LOW,  "$(SIG1.LOW)")
+  field(MDEL, "$(SIG1.MDEL)")
+  field(SMOO, "$(SIG1.SMOO)")
+  field(EGU,  "$(SIG1.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3464")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "3")
+  field(ADEL, "$(SIG2.ADEL)")
+  field(EGUF, "$(SIG2.EGUF)")
+  field(EGUL, "$(SIG2.EGUL)")
+  field(HIGH, "$(SIG2.HIGH)")
+  field(HIHI, "$(SIG2.HIHI)")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(HYST, "$(SIG2.HYST)")
+  field(LOLO, "$(SIG2.LOLO)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(LOW,  "$(SIG2.LOW)")
+  field(MDEL, "$(SIG2.MDEL)")
+  field(SMOO, "$(SIG2.SMOO)")
+  field(EGU,  "$(SIG2.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL3464")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
+  field(PREC, "3")
+  field(ADEL, "$(SIG3.ADEL)")
+  field(EGUF, "$(SIG3.EGUF)")
+  field(EGUL, "$(SIG3.EGUL)")
+  field(HIGH, "$(SIG3.HIGH)")
+  field(HIHI, "$(SIG3.HIHI)")
+  field(HOPR, "$(SIG3.HOPR)")
+  field(HYST, "$(SIG3.HYST)")
+  field(LOLO, "$(SIG3.LOLO)")
+  field(LOPR, "$(SIG3.LOPR)")
+  field(LOW,  "$(SIG3.LOW)")
+  field(MDEL, "$(SIG3.MDEL)")
+  field(SMOO, "$(SIG3.SMOO)")
+  field(EGU,  "$(SIG3.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL3464")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
+  field(PREC, "3")
+  field(ADEL, "$(SIG4.ADEL)")
+  field(EGUF, "$(SIG4.EGUF)")
+  field(EGUL, "$(SIG4.EGUL)")
+  field(HIGH, "$(SIG4.HIGH)")
+  field(HIHI, "$(SIG4.HIHI)")
+  field(HOPR, "$(SIG4.HOPR)")
+  field(HYST, "$(SIG4.HYST)")
+  field(LOLO, "$(SIG4.LOLO)")
+  field(LOPR, "$(SIG4.LOPR)")
+  field(LOW,  "$(SIG4.LOW)")
+  field(MDEL, "$(SIG4.MDEL)")
+  field(SMOO, "$(SIG4.SMOO)")
+  field(EGU,  "$(SIG4.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL3468.substitutions b/Bk9000_MBTApp/Db/KL3468.substitutions
new file mode 100644
index 0000000..ab00118
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3468.substitutions
@@ -0,0 +1,76 @@
+
+file KL3468.template
+{
+	pattern
+	{	SLOT,
+		SIG1,		SIG1.DESC,
+			SIG1.ADEL,	SIG1.MDEL,	SIG1.SMOO,	SIG1.UNIT, SIG1.EGUF,	SIG1.EGUL,	
+			SIG1.HOPR,	SIG1.HIHI,	SIG1.HIGH,	SIG1.HYST,	
+			SIG1.LOW,	SIG1.LOLO,	SIG1.LOPR,	SIG1.SCAN,
+		SIG2,		SIG2.DESC,
+			SIG2.ADEL,	SIG2.MDEL,	SIG2.SMOO,	SIG2.UNIT, SIG2.EGUF,	SIG2.EGUL,	
+			SIG2.HOPR,	SIG2.HIHI,	SIG2.HIGH,	SIG2.HYST,	
+			SIG2.LOW,	SIG2.LOLO,	SIG2.LOPR,	SIG2.SCAN,
+		SIG3,		SIG3.DESC,
+			SIG3.ADEL,	SIG3.MDEL,	SIG3.SMOO,	SIG3.UNIT, SIG3.EGUF,	SIG3.EGUL,	
+			SIG3.HOPR,	SIG3.HIHI,	SIG3.HIGH,	SIG3.HYST,	
+			SIG3.LOW,	SIG3.LOLO,	SIG3.LOPR,	SIG3.SCAN,
+		SIG4,		SIG4.DESC,
+			SIG4.ADEL,	SIG4.MDEL,	SIG4.SMOO,	SIG4.UNIT, SIG4.EGUF,	SIG4.EGUL,	
+			SIG4.HOPR,	SIG4.HIHI,	SIG4.HIGH,	SIG4.HYST,	
+			SIG4.LOW,	SIG4.LOLO,	SIG4.LOPR,	SIG4.SCAN,
+		SIG5,		SIG5.DESC,
+			SIG5.ADEL,	SIG5.MDEL,	SIG5.SMOO,	SIG5.UNIT, SIG5.EGUF,	SIG5.EGUL,	
+			SIG5.HOPR,	SIG5.HIHI,	SIG5.HIGH,	SIG5.HYST,	
+			SIG5.LOW,	SIG5.LOLO,	SIG5.LOPR,	SIG5.SCAN,
+		SIG6,		SIG6.DESC,
+			SIG6.ADEL,	SIG6.MDEL,	SIG6.SMOO,	SIG6.UNIT, SIG6.EGUF,	SIG6.EGUL,	
+			SIG6.HOPR,	SIG6.HIHI,	SIG6.HIGH,	SIG6.HYST,	
+			SIG6.LOW,	SIG6.LOLO,	SIG6.LOPR,	SIG6.SCAN,
+		SIG7,		SIG7.DESC,
+			SIG7.ADEL,	SIG7.MDEL,	SIG7.SMOO,	SIG7.UNIT, SIG7.EGUF,	SIG7.EGUL,	
+			SIG7.HOPR,	SIG7.HIHI,	SIG7.HIGH,	SIG7.HYST,	
+			SIG7.LOW,	SIG7.LOLO,	SIG7.LOPR,	SIG7.SCAN,
+		SIG8,		SIG8.DESC,
+			SIG8.ADEL,	SIG8.MDEL,	SIG8.SMOO,	SIG8.UNIT, SIG8.EGUF,	SIG8.EGUL,	
+			SIG8.HOPR,	SIG8.HIHI,	SIG8.HIGH,	SIG8.HYST,	
+			SIG8.LOW,	SIG8.LOLO,	SIG8.LOPR,	SIG8.SCAN,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	14,
+		$(COUPLER_LOC):KL3468:SLOT$(SLOT):AIN1, "Signal 1 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3468:SLOT$(SLOT):AIN2, "Signal 2 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3468:SLOT$(SLOT):AIN3, "Signal 3 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3468:SLOT$(SLOT):AIN4, "Signal 4 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3468:SLOT$(SLOT):AIN5, "Signal 5 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3468:SLOT$(SLOT):AIN6, "Signal 6 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3468:SLOT$(SLOT):AIN7, "Signal 7 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+		$(COUPLER_LOC):KL3468:SLOT$(SLOT):AIN8, "Signal 8 Description",
+			0,			0,			0,			Volt,		10,			0,
+			10,			9,			5,			0,
+			2,			1,			0,			".1 second",
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL3468.template b/Bk9000_MBTApp/Db/KL3468.template
new file mode 100644
index 0000000..ea3ac51
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL3468.template
@@ -0,0 +1,216 @@
+record(ai, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(SCAN, "$(SIG1.SCAN)")
+  field(DTYP, "Bk9000_KL3468")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
+  field(PREC, "3")
+  field(ADEL, "$(SIG1.ADEL)")
+  field(EGUF, "$(SIG1.EGUF)")
+  field(EGUL, "$(SIG1.EGUL)")
+  field(HIGH, "$(SIG1.HIGH)")
+  field(HIHI, "$(SIG1.HIHI)")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(HYST, "$(SIG1.HYST)")
+  field(LOLO, "$(SIG1.LOLO)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(LOW,  "$(SIG1.LOW)")
+  field(MDEL, "$(SIG1.MDEL)")
+  field(SMOO, "$(SIG1.SMOO)")
+  field(EGU,  "$(SIG1.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(SCAN, "$(SIG2.SCAN)")
+  field(DTYP, "Bk9000_KL3468")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
+  field(PREC, "3")
+  field(ADEL, "$(SIG2.ADEL)")
+  field(EGUF, "$(SIG2.EGUF)")
+  field(EGUL, "$(SIG2.EGUL)")
+  field(HIGH, "$(SIG2.HIGH)")
+  field(HIHI, "$(SIG2.HIHI)")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(HYST, "$(SIG2.HYST)")
+  field(LOLO, "$(SIG2.LOLO)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(LOW,  "$(SIG2.LOW)")
+  field(MDEL, "$(SIG2.MDEL)")
+  field(SMOO, "$(SIG2.SMOO)")
+  field(EGU,  "$(SIG2.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG3)")
+{
+  field(DESC, "$(SIG3.DESC)")
+  field(SCAN, "$(SIG3.SCAN)")
+  field(DTYP, "Bk9000_KL3468")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
+  field(PREC, "3")
+  field(ADEL, "$(SIG3.ADEL)")
+  field(EGUF, "$(SIG3.EGUF)")
+  field(EGUL, "$(SIG3.EGUL)")
+  field(HIGH, "$(SIG3.HIGH)")
+  field(HIHI, "$(SIG3.HIHI)")
+  field(HOPR, "$(SIG3.HOPR)")
+  field(HYST, "$(SIG3.HYST)")
+  field(LOLO, "$(SIG3.LOLO)")
+  field(LOPR, "$(SIG3.LOPR)")
+  field(LOW,  "$(SIG3.LOW)")
+  field(MDEL, "$(SIG3.MDEL)")
+  field(SMOO, "$(SIG3.SMOO)")
+  field(EGU,  "$(SIG3.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG4)")
+{
+  field(DESC, "$(SIG4.DESC)")
+  field(SCAN, "$(SIG4.SCAN)")
+  field(DTYP, "Bk9000_KL3468")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
+  field(PREC, "3")
+  field(ADEL, "$(SIG4.ADEL)")
+  field(EGUF, "$(SIG4.EGUF)")
+  field(EGUL, "$(SIG4.EGUL)")
+  field(HIGH, "$(SIG4.HIGH)")
+  field(HIHI, "$(SIG4.HIHI)")
+  field(HOPR, "$(SIG4.HOPR)")
+  field(HYST, "$(SIG4.HYST)")
+  field(LOLO, "$(SIG4.LOLO)")
+  field(LOPR, "$(SIG4.LOPR)")
+  field(LOW,  "$(SIG4.LOW)")
+  field(MDEL, "$(SIG4.MDEL)")
+  field(SMOO, "$(SIG4.SMOO)")
+  field(EGU,  "$(SIG4.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG5)")
+{
+  field(DESC, "$(SIG5.DESC)")
+  field(SCAN, "$(SIG5.SCAN)")
+  field(DTYP, "Bk9000_KL3468")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_5")
+  field(PREC, "3")
+  field(ADEL, "$(SIG5.ADEL)")
+  field(EGUF, "$(SIG5.EGUF)")
+  field(EGUL, "$(SIG5.EGUL)")
+  field(HIGH, "$(SIG5.HIGH)")
+  field(HIHI, "$(SIG5.HIHI)")
+  field(HOPR, "$(SIG5.HOPR)")
+  field(HYST, "$(SIG5.HYST)")
+  field(LOLO, "$(SIG5.LOLO)")
+  field(LOPR, "$(SIG5.LOPR)")
+  field(LOW,  "$(SIG5.LOW)")
+  field(MDEL, "$(SIG5.MDEL)")
+  field(SMOO, "$(SIG5.SMOO)")
+  field(EGU,  "$(SIG5.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG6)")
+{
+  field(DESC, "$(SIG6.DESC)")
+  field(SCAN, "$(SIG6.SCAN)")
+  field(DTYP, "Bk9000_KL3468")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_6")
+  field(PREC, "3")
+  field(ADEL, "$(SIG6.ADEL)")
+  field(EGUF, "$(SIG6.EGUF)")
+  field(EGUL, "$(SIG6.EGUL)")
+  field(HIGH, "$(SIG6.HIGH)")
+  field(HIHI, "$(SIG6.HIHI)")
+  field(HOPR, "$(SIG6.HOPR)")
+  field(HYST, "$(SIG6.HYST)")
+  field(LOLO, "$(SIG6.LOLO)")
+  field(LOPR, "$(SIG6.LOPR)")
+  field(LOW,  "$(SIG6.LOW)")
+  field(MDEL, "$(SIG6.MDEL)")
+  field(SMOO, "$(SIG6.SMOO)")
+  field(EGU,  "$(SIG6.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG7)")
+{
+  field(DESC, "$(SIG7.DESC)")
+  field(SCAN, "$(SIG7.SCAN)")
+  field(DTYP, "Bk9000_KL3468")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_7")
+  field(PREC, "3")
+  field(ADEL, "$(SIG7.ADEL)")
+  field(EGUF, "$(SIG7.EGUF)")
+  field(EGUL, "$(SIG7.EGUL)")
+  field(HIGH, "$(SIG7.HIGH)")
+  field(HIHI, "$(SIG7.HIHI)")
+  field(HOPR, "$(SIG7.HOPR)")
+  field(HYST, "$(SIG7.HYST)")
+  field(LOLO, "$(SIG7.LOLO)")
+  field(LOPR, "$(SIG7.LOPR)")
+  field(LOW,  "$(SIG7.LOW)")
+  field(MDEL, "$(SIG7.MDEL)")
+  field(SMOO, "$(SIG7.SMOO)")
+  field(EGU,  "$(SIG7.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
+record(ai, "$(SIG8)")
+{
+  field(DESC, "$(SIG8.DESC)")
+  field(SCAN, "$(SIG8.SCAN)")
+  field(DTYP, "Bk9000_KL3468")
+  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_8")
+  field(PREC, "3")
+  field(ADEL, "$(SIG8.ADEL)")
+  field(EGUF, "$(SIG8.EGUF)")
+  field(EGUL, "$(SIG8.EGUL)")
+  field(HIGH, "$(SIG8.HIGH)")
+  field(HIHI, "$(SIG8.HIHI)")
+  field(HOPR, "$(SIG8.HOPR)")
+  field(HYST, "$(SIG8.HYST)")
+  field(LOLO, "$(SIG8.LOLO)")
+  field(LOPR, "$(SIG8.LOPR)")
+  field(LOW,  "$(SIG8.LOW)")
+  field(MDEL, "$(SIG8.MDEL)")
+  field(SMOO, "$(SIG8.SMOO)")
+  field(EGU,  "$(SIG8.UNIT)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV,  "MINOR")
+  field(LSV,  "MINOR")
+  field(LINR, "LINEAR")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL4002-signal.tpl-arch b/Bk9000_MBTApp/Db/KL4002-signal.tpl-arch
new file mode 100644
index 0000000..ad03162
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL4002-signal.tpl-arch
@@ -0,0 +1,18 @@
+# Archive Beckhoff KL4002 Analog Output Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).DRVH		30
+$(SIG).DRVL		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
diff --git a/Bk9000_MBTApp/Db/KL4002-signal.tpl-req b/Bk9000_MBTApp/Db/KL4002-signal.tpl-req
new file mode 100644
index 0000000..0afc8c1
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL4002-signal.tpl-req
@@ -0,0 +1,22 @@
+# Autosave Beckhoff KL4002 Analog Output Signal PV list
+$(SIG).VAL
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).DRVH
+$(SIG).DRVL
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL4002.substitutions b/Bk9000_MBTApp/Db/KL4002.substitutions
new file mode 100644
index 0000000..f4e24f0
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL4002.substitutions
@@ -0,0 +1,24 @@
+
+file KL4002.template
+{
+	pattern
+	{	SLOT,		REPROCEVT,
+		SIG1,		SIG1.DESC,
+			SIG1.UNIT,	SIG1.EGUF,	SIG1.EGUL,
+			SIG1.HOPR,	SIG1.LOPR,	SIG1.DRVH,	SIG1.DRVL,	SIG1.PINI,
+		SIG2,		SIG2.DESC,
+			SIG2.UNIT,	SIG2.EGUF,	SIG2.EGUL,
+			SIG2.HOPR,	SIG2.LOPR,	SIG2.DRVH,	SIG2.DRVL,	SIG2.PINI,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	13,			188,
+		$(COUPLER_LOC):KL4002:SLOT$(SLOT):AOUT1, "Signal 1 Description",
+			Volt,		10,			0,
+			10,			0,			10,			0,			NO,
+		$(COUPLER_LOC):KL4002:SLOT$(SLOT):AOUT2, "Signal 2 Description",
+			Volt,		10,			0,
+			10,			0,			10,			0,			NO,
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL4002.template b/Bk9000_MBTApp/Db/KL4002.template
new file mode 100644
index 0000000..4c239b7
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL4002.template
@@ -0,0 +1,46 @@
+record(ao, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(DTYP, "Bk9000_KL4002")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_1")
+  field(PREC, "3")
+  field(EGUF, "$(SIG1.EGUF)")
+  field(EGUL, "$(SIG1.EGUL)")
+  field(DRVH, "$(SIG1.DRVH)")
+  field(DRVL, "$(SIG1.DRVL)")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(EGU,  "$(SIG1.UNIT)")
+  field(PINI, "$(SIG1.PINI)")
+  field(LINR, "LINEAR")
+}
+
+record(ao, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(DTYP, "Bk9000_KL4002")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_2")
+  field(PREC, "3")
+  field(EGUF, "$(SIG2.EGUF)")
+  field(EGUL, "$(SIG2.EGUL)")
+  field(DRVH, "$(SIG2.DRVH)")
+  field(DRVL, "$(SIG2.DRVL)")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(EGU,  "$(SIG2.UNIT)")
+  field(PINI, "$(SIG2.PINI)")
+  field(LINR, "LINEAR")
+}
+
+# We put SIG1 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG1)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG1)")
+  field(LNK2, "$(SIG2)")
+  field(PINI, "NO")
+}
+
diff --git a/Bk9000_MBTApp/Db/KL4132-signal.tpl-arch b/Bk9000_MBTApp/Db/KL4132-signal.tpl-arch
new file mode 100644
index 0000000..6e7560e
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL4132-signal.tpl-arch
@@ -0,0 +1,18 @@
+# Archive Beckhoff KL4132 Analog Output Signal PV list
+$(SIG).VAL		1
+$(SIG).ADEL		30
+$(SIG).DESC		30
+$(SIG).DRVH		30
+$(SIG).DRVL		30
+$(SIG).EGU		30
+$(SIG).EGUF		30
+$(SIG).EGUL		30
+$(SIG).HHSV		30
+$(SIG).HOPR		30
+$(SIG).HSV		30
+$(SIG).HYST		30
+$(SIG).LLSV		30
+$(SIG).LOPR		30
+$(SIG).LSV		30
+$(SIG).MDEL		30
+$(SIG).PREC		30
diff --git a/Bk9000_MBTApp/Db/KL4132-signal.tpl-req b/Bk9000_MBTApp/Db/KL4132-signal.tpl-req
new file mode 100644
index 0000000..6d50012
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL4132-signal.tpl-req
@@ -0,0 +1,22 @@
+# Autosave Beckhoff KL4132 Analog Output Signal PV list
+$(SIG).VAL
+$(SIG).ADEL
+$(SIG).DESC
+$(SIG).DRVH
+$(SIG).DRVL
+$(SIG).EGU
+$(SIG).EGUF
+$(SIG).EGUL
+$(SIG).HHSV
+$(SIG).HIGH
+$(SIG).HIHI
+$(SIG).HOPR
+$(SIG).HSV
+$(SIG).HYST
+$(SIG).LLSV
+$(SIG).LOLO
+$(SIG).LOPR
+$(SIG).LOW
+$(SIG).LSV
+$(SIG).MDEL
+$(SIG).PREC
diff --git a/Bk9000_MBTApp/Db/KL4132.substitutions b/Bk9000_MBTApp/Db/KL4132.substitutions
new file mode 100644
index 0000000..414249d
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL4132.substitutions
@@ -0,0 +1,23 @@
+file KL4132.template
+{
+	pattern
+	{	SLOT,		REPROCEVT,
+		SIG1,		SIG1.DESC,
+			SIG1.UNIT,	SIG1.EGUF,	SIG1.EGUL,
+			SIG1.HOPR,	SIG1.LOPR,	SIG1.DRVH,	SIG1.DRVL,	SIG1.PINI,
+		SIG2,		SIG2.DESC,
+			SIG2.UNIT,	SIG2.EGUF,	SIG2.EGUL,
+			SIG2.HOPR,	SIG2.LOPR,	SIG2.DRVH,	SIG2.DRVL,	SIG2.PINI,
+	}
+#	Include one instance of the pattern for each instance
+#	of this module, substituting the appropriate slot number
+#	and signal attributes
+	{	9,			188,
+		$(COUPLER_LOC):KL4132:SLOT$(SLOT):AOUT1, "Signal 1 Description",
+			Volt,		10,			-10,
+			10,			-10,		10,			-10,			NO,
+		$(COUPLER_LOC):KL4132:SLOT$(SLOT):AOUT2, "Signal 2 Description",
+			Volt,		10,			-10,
+			10,			-10,		10,			-10,			NO,
+	}
+}
diff --git a/Bk9000_MBTApp/Db/KL4132.template b/Bk9000_MBTApp/Db/KL4132.template
new file mode 100644
index 0000000..b770412
--- /dev/null
+++ b/Bk9000_MBTApp/Db/KL4132.template
@@ -0,0 +1,46 @@
+record(ao, "$(SIG1)")
+{
+  field(DESC, "$(SIG1.DESC)")
+  field(DTYP, "Bk9000_KL4132")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_1")
+  field(PREC, "3")
+  field(EGUF, "$(SIG1.EGUF)")
+  field(EGUL, "$(SIG1.EGUL)")
+  field(DRVH, "$(SIG1.DRVH)")
+  field(DRVL, "$(SIG1.DRVL)")
+  field(HOPR, "$(SIG1.HOPR)")
+  field(LOPR, "$(SIG1.LOPR)")
+  field(EGU,  "$(SIG1.UNIT)")
+  field(PINI, "$(SIG1.PINI)")
+  field(LINR, "LINEAR")
+}
+
+record(ao, "$(SIG2)")
+{
+  field(DESC, "$(SIG2.DESC)")
+  field(DTYP, "Bk9000_KL4132")
+  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_2")
+  field(PREC, "3")
+  field(EGUF, "$(SIG2.EGUF)")
+  field(EGUL, "$(SIG2.EGUL)")
+  field(DRVH, "$(SIG2.DRVH)")
+  field(DRVL, "$(SIG2.DRVL)")
+  field(HOPR, "$(SIG2.HOPR)")
+  field(LOPR, "$(SIG2.LOPR)")
+  field(EGU,  "$(SIG2.UNIT)")
+  field(PINI, "$(SIG2.PINI)")
+  field(LINR, "LINEAR")
+}
+
+# We put SIG1 macro in the name just to avoid name overlaping
+record(fanout, "$(SIG1)ReProc")
+{
+  field(DESC, "FANOUT Reproc")
+  field(SCAN, "Event")
+  field(EVNT, "$(REPROCEVT)")
+  field(SELM, "All")
+  field(LNK1, "$(SIG1)")
+  field(LNK2, "$(SIG2)")
+  field(PINI, "NO")
+}
+
diff --git a/Bk9000_MBTApp/Db/Makefile b/Bk9000_MBTApp/Db/Makefile
new file mode 100644
index 0000000..a83cab4
--- /dev/null
+++ b/Bk9000_MBTApp/Db/Makefile
@@ -0,0 +1,126 @@
+TOP=../..
+include $(TOP)/configure/CONFIG
+#----------------------------------------
+#  ADD MACRO DEFINITIONS AFTER THIS LINE
+
+#----------------------------------------------------
+#  Optimization of db files using dbst (DEFAULT: NO)
+#DB_OPT = YES
+
+#----------------------------------------------------
+# Create and install (or just install)
+# databases, templates, substitutions like this
+DB += Bk9000Info.template
+DB += Bk9000InstalledBTs.template
+DB += KL1104.template
+DB += KL1002.template
+DB += KL1124.template
+DB += KL1408.template
+DB += KL1488.template
+DB += KL2114.template
+DB += KL2124.template
+DB += KL2408.template
+DB += KL2502.template
+DB += KL2808.template
+DB += KL2512.template
+DB += KL2622.template
+DB += KL3064.template
+DB += KL3102.template
+DB += KL3162.template
+DB += KL3202.template
+DB += KL3204.template
+DB += KL3222.template
+DB += KL3312.template
+DB += KL3314.template
+DB += KL3404.template
+DB += KL3408.template
+DB += KL3468.template
+DB += KL4002.template
+DB += KL4132.template
+DB += KL3464.template
+
+DB += KL3404-signal.template
+
+
+# Also install substitutions files for easy access
+DB += Bk9000.substitutions
+DB += KL1104.substitutions
+DB += KL1002.substitutions
+DB += KL1124.substitutions
+DB += KL1408.substitutions
+DB += KL2114.substitutions
+DB += KL2124.substitutions
+DB += KL2408.substitutions
+DB += KL2808.substitutions
+DB += KL2502.substitutions
+DB += KL2512.substitutions
+DB += KL2622.substitutions
+DB += KL3064.substitutions
+DB += KL3102.substitutions
+DB += KL3162.substitutions
+DB += KL3202.substitutions
+DB += KL3204.substitutions
+DB += KL3222.substitutions
+DB += KL3312.substitutions
+DB += KL3314.substitutions
+DB += KL3404.substitutions
+DB += KL3408.substitutions
+DB += KL3468.substitutions
+DB += KL4002.substitutions
+DB += KL4132.substitutions
+DB += KL3464.substitutions
+
+DB += Bk9000Info-lcls.template
+DB += Bk9000InstalledBTs-lcls.template
+DB += KL1488-lcls.template
+DB += KL3162-lcls.template
+DB += KL2408-lcls.template
+DB += KL3202-lcls.template 
+DB += KL3222-lcls.template 
+DB += KL3314-lcls.template 
+DB += KL3408-lcls.template
+DB += analog-conversion-lcls.template
+
+#----------------------------------------------------
+# If <anyname>.db template is not named <anyname>*.template add
+# <anyname>_TEMPLATE = <templatename>
+
+# Install Archive files
+ARCHIVE += Bk9000.tpl-arch
+ARCHIVE += KL2124-signal.tpl-arch
+ARCHIVE += KL2502-signal.tpl-arch
+ARCHIVE += KL2512-signal.tpl-arch
+ARCHIVE += KL3064-signal.tpl-arch
+ARCHIVE += KL3102-signal.tpl-arch
+ARCHIVE += KL3162-signal.tpl-arch
+ARCHIVE += KL3202-signal.tpl-arch
+ARCHIVE += KL3204-signal.tpl-arch
+ARCHIVE += KL3312-signal.tpl-arch
+ARCHIVE += KL3314-signal.tpl-arch
+ARCHIVE += KL3404-signal.tpl-arch
+ARCHIVE += KL3408-signal.tpl-arch
+ARCHIVE += KL4002-signal.tpl-arch
+ARCHIVE += KL4132-signal.tpl-arch
+
+# Install Autosave templates
+REQ += Bk9000.tpl-req
+REQ += KL2124-signal.tpl-req
+REQ += KL2502-signal.tpl-req
+REQ += KL2512-signal.tpl-req
+REQ += KL3064-signal.tpl-req
+REQ += KL3102-signal.tpl-req
+REQ += KL3162-signal.tpl-req
+REQ += KL3202-signal.tpl-req
+REQ += KL3204-signal.tpl-req
+REQ += KL3312-signal.tpl-req
+REQ += KL3314-signal.tpl-req
+REQ += KL3404-signal.tpl-req
+REQ += KL3408-signal.tpl-req
+REQ += KL4002-signal.tpl-req
+REQ += KL4132-signal.tpl-req
+
+
+include $(TOP)/configure/RULES
+#----------------------------------------
+#  ADD RULES AFTER THIS LINE
+
diff --git a/Bk9000_MBTApp/Db/analog-conversion-lcls.template b/Bk9000_MBTApp/Db/analog-conversion-lcls.template
new file mode 100644
index 0000000..c50653c
--- /dev/null
+++ b/Bk9000_MBTApp/Db/analog-conversion-lcls.template
@@ -0,0 +1,59 @@
+record(ai, "$(ALIAS)") {
+  field(DESC, "$(D)")
+  field(DTYP, "Soft Channel")
+  field(INP, "$(APC):M$(SLOT)_CH$(CH)_EGU  NPP MS")
+  field(PREC, "$(P)")
+  field(EGU, "$(EGU)")
+  field(HOPR, "$(H)")
+  field(LOPR, "$(L)")
+  field(HIHI, "$(HH)")
+  field(LOLO, "$(LL)")
+  field(HIGH, "$(HI)")
+  field(LOW, "$(LO)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV, "MINOR")
+  field(LSV, "MINOR")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+
+}
+
+
+# Subroutine record that performs calculation for 
+# these analog signal types:
+# 1 = linear analog in
+# 2 = log analog in
+# 3 = phase mixer
+record(sub, "$(APC):M$(SLOT)_CH$(CH)_EGU") {
+  field(DESC, "$(D)")
+  field(INAM, "InitAnalogCalc")
+  field(SNAM, "AnalogCalc")
+#Signal type (see comments above)
+  field(A, "$(TYPE)")
+#Raw signal
+  field(INPB, "$(APC):M$(SLOT)_CH$(CH)_SIG NPP MS")
+  field(C, "$(OFFS)")
+  field(D, "$(COEF)")
+#Associated device, used by phase mixer
+  field(INPE, "$(ASSOC)")
+#1/-1 determined by ASSOC, used by phase mixer
+  field(F, "$(SIGN)")
+  field(PREC, "$(P)")
+  field(EGU, "$(EGU)")
+  field(HOPR, "$(H)")
+  field(LOPR, "$(L)")
+  field(HIHI, "$(HH)")
+  field(LOLO, "$(LL)")
+  field(HIGH, "$(HI)")
+  field(LOW, "$(LO)")
+  field(HHSV, "MAJOR")
+  field(LLSV, "MAJOR")
+  field(HSV, "MINOR")
+  field(LSV, "MINOR")
+  field(HYST, "$(HY)")
+  field(ADEL, "$(AD)")
+  field(MDEL, "$(MD)")
+  field(FLNK, "$(ALIAS)")
+}
diff --git a/Bk9000_MBTApp/Makefile b/Bk9000_MBTApp/Makefile
new file mode 100644
index 0000000..60f5ad4
--- /dev/null
+++ b/Bk9000_MBTApp/Makefile
@@ -0,0 +1,7 @@
+TOP = ..
+include $(TOP)/configure/CONFIG
+DIRS += $(wildcard *src*)
+DIRS += $(wildcard *Src*)
+DIRS += $(wildcard *db*)
+DIRS += $(wildcard *Db*)
+include $(TOP)/configure/RULES_DIRS
diff --git a/Bk9000_MBTApp/src/Bk9000_BTDef.h b/Bk9000_MBTApp/src/Bk9000_BTDef.h
new file mode 100644
index 0000000..d27cfb2
--- /dev/null
+++ b/Bk9000_MBTApp/src/Bk9000_BTDef.h
@@ -0,0 +1,115 @@
+#ifndef	_Bk9000_BTDEF_H_
+#define	_Bk9000_BTDEF_H_
+
+#include "Bk9000_MBT_Common.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif  /* __cplusplus */
+
+#if	0	/* Must be 0, just for reference here */
+typedef	struct BUSTERM_IMG_DEF
+{
+	UINT8			busterm_string[8];	/* String name of bus terminal, must be 6 characters */
+	E_BUSTERM_TYPE	busterm_type;		/* number name of bus terminal */
+	UINT32          term_reg_exist;     /* 1: This terminal has registers, for coupler, this is not used, stay 0 */
+	UINT16          term_r32_dft;       /* default value of feature register */
+	UINT16			complex_in_words;	/* how many words in complex input processing image */
+	UINT16			complex_out_words;	/* how many words in complex output processing image */
+	UINT16			digital_in_bits;	/* how many bits in digital input processing image */
+	UINT16			digital_out_bits;	/* how many bits in digital output processing image */
+}	BUSTERM_IMG_DEF;
+#endif
+
+/*
+ *	Feature Register Options
+ *	Note:	Added w/ KL3404 support
+ *	TODO:	See if any features are shared between modules
+ *	TODO:	Expand to other modules
+ */
+#define	FEAT_IIR_FILTER_OFF	0x0000
+#define	FEAT_IIR_FILTER_ON	0x0800
+
+#define	FEAT_LIMIT_1_OFF	0x0000
+#define	FEAT_LIMIT_1_ON		0x0400
+
+#define	FEAT_LIMIT_2_OFF	0x0000
+#define	FEAT_LIMIT_2_ON		0x0200
+
+#define	FEAT_OR_PROT_OFF	0x0000
+#define	FEAT_OR_PROT_ON		0x0100
+
+#define	FEAT_FMT_STANDARD	0x0000
+#define	FEAT_FMT_SIEMENS	0x0010
+
+#define	FEAT_REP_TWOS_COMP	0x0000
+#define	FEAT_REP_SIGN_MAG	0x0008
+
+#define	FEAT_WD_TIMER_OFF	0x0000
+#define	FEAT_WD_TIMER_ON	0x0004
+
+#define	FEAT_MFG_SCALE_OFF	0x0000
+#define	FEAT_MFG_SCALE_ON	0x0002
+
+#define	FEAT_USR_SCALE_OFF	0x0000
+#define	FEAT_USR_SCALE_ON	0x0001
+
+/* KL3404 Default Feature Register */
+#define FEAT_KL3404	(	FEAT_IIR_FILTER_ON	\
+					|	FEAT_LIMIT_1_OFF	\
+					|	FEAT_LIMIT_2_OFF	\
+					|	FEAT_OR_PROT_OFF	\
+					|	FEAT_FMT_STANDARD	\
+					|	FEAT_REP_TWOS_COMP	\
+					|	FEAT_WD_TIMER_ON	\
+					|	FEAT_MFG_SCALE_ON	\
+					|	FEAT_USR_SCALE_OFF	)
+
+static BUSTERM_IMG_DEF	busterm_img_def[]={
+	{"Bk9000",	BT_TYPE_Bk9000,	0,	0,	0,	0,	0,	0},
+	{"KL1104",      BT_TYPE_KL1104, 0,      0,      0,      0,      4,      0},
+	{"KL1002",      BT_TYPE_KL1002, 0,      0,      0,      0,      2,      0},
+	{"KL1124",      BT_TYPE_KL1124, 0,      0,      0,      0,      4,      0},
+	{"KL1408",      BT_TYPE_KL1408, 0,      0,      0,      0,      8,      0},
+	{"KL1488",      BT_TYPE_KL1488, 0,      0,      0,      0,      8,      0},
+	{"KL2012",		BT_TYPE_KL2012,	0,		0,		0,		0,		0,		2},
+	{"KL2114",		BT_TYPE_KL2114,	0,		0,		0,		0,		0,		4},
+	{"KL2124",		BT_TYPE_KL2124,	0,		0,		0,		0,		0,		4},
+	{"KL2408",      BT_TYPE_KL2408, 0,      0,      0,      0,      0,      8},
+	{"KL2502",      BT_TYPE_KL2502, 1,      0x0004, 4,      4,      0,      0},
+	{"KL2808",      BT_TYPE_KL2808, 0,      0,      0,      0,      0,      8},
+	{"KL2512",      BT_TYPE_KL2512, 1,      0x0004, 4,      4,      0,      0},
+	{"KL2622",      BT_TYPE_KL2622, 0,      0,      0,      0,      0,      2},
+	{"KL3064",      BT_TYPE_KL3064, 1,      0x1106, 8,      8,      0,      0},
+	{"KL3102",		BT_TYPE_KL3102,	1,		0x0000,	4,		4,		0,		0},
+/* per files Access from User Program-Register Overveiw.pdf and Access from User Program-Mapping.pdf; "Complete evaluation in Intel format with word alignment" --AC */
+    {"KL3162",      BT_TYPE_KL3162, 1,      0x0180, 4,      4,      0,      0},
+/* per KL320xen.pdf, top of p. 14 -- AC */
+    {"KL3202",      BT_TYPE_KL3202, 1,      0x1006, 4,      4,      0,      0},
+    {"KL3204",      BT_TYPE_KL3204, 1,      0x1006, 8,      8,      0,      0},
+    /* Why is the 0x parameter different for the KL3222 between ours and lcls? */
+    /* For feature register: NI100 type, 2 wire, 0.1C resolution, watchdog active, manufacturer scaling active */
+/*	{"KL3222",      BT_TYPE_KL3222, 1,      0x1006, 4,      4,      0,      0}, */
+	/* For feature retister: PT100 type, 4 wire, 0.1C resolution, watchdog inactive */
+    {"KL3222",      BT_TYPE_KL3222, 1,      0x0080, 4,      4,      0,      0},
+	{"KL3312",      BT_TYPE_KL3312, 1,      0x1006, 4,      4,      0,      0},
+	{"KL3314",      BT_TYPE_KL3314, 1,      0x1006, 8,      8,      0,      0},
+	{"KL3404",      BT_TYPE_KL3404, 1, FEAT_KL3404, 8,      8,      0,      0},
+	{"KL3408",      BT_TYPE_KL3408, 1,      0x1106, 16,     16,     0,      0},
+	{"KL3468",      BT_TYPE_KL3468, 1,      0x1106, 16,     16,     0,      0},
+	{"KL3464",      BT_TYPE_KL3464, 1,      0x1106, 8,     8,     0,      0},
+	{"KL4002",		BT_TYPE_KL4002,	1,		0x0006,	4,		4,		0,		0},
+	{"KL4132",		BT_TYPE_KL4132,	1,		0x0006,	4,		4,		0,		0},
+	{"KL9505",		BT_TYPE_KL9505,	0,	0,	0,	0,	0,	0},	/* Power Supply Module */
+	{"KL9020",		BT_TYPE_KL9020,	0,	0,	0,	0,	0,	0},
+	{"KL9080",		BT_TYPE_KL9080,	0,	0,	0,	0,	0,	0}, /* Separation terminal, just a blank */
+	{"KL9010",		BT_TYPE_KL9010,	0,	0,	0,	0,	0,	0}	/* This must be last one */
+};
+
+#define	N_BT_IMG_DEF	(sizeof(busterm_img_def)/sizeof(BUSTERM_IMG_DEF))
+
+#ifdef __cplusplus
+}
+#endif  /* __cplusplus */
+
+#endif
diff --git a/Bk9000_MBTApp/src/Bk9000_MBT.dbd b/Bk9000_MBTApp/src/Bk9000_MBT.dbd
new file mode 100644
index 0000000..afc42d2
--- /dev/null
+++ b/Bk9000_MBTApp/src/Bk9000_MBT.dbd
@@ -0,0 +1,33 @@
+device(longin,INST_IO,devLiBk9000Info,"Bk9000_Info")
+device(mbbi,INST_IO,devMbbiBk9000Info,"Bk9000_Info")
+device(stringin,INST_IO,devSiBk9000Info,"Bk9000_Info")
+
+device(bi,INST_IO,devBiKL1104,"Bk9000_KL1104")
+device(bi,INST_IO,devBiKL1002,"Bk9000_KL1002")
+device(bi,INST_IO,devBiKL1124,"Bk9000_KL1124")
+device(bi,INST_IO,devBiKL1408,"Bk9000_KL1408")
+device(bi,INST_IO,devBiKL1488,"Bk9000_KL1488")
+device(bo,INST_IO,devBoKL2012,"Bk9000_KL2012")
+device(bo,INST_IO,devBoKL2114,"Bk9000_KL2114")
+device(bo,INST_IO,devBoKL2124,"Bk9000_KL2124")
+device(bo,INST_IO,devBoKL2408,"Bk9000_KL2408")
+device(ao,INST_IO,devAoKL2502,"Bk9000_KL2502")
+device(bo,INST_IO,devBoKL2808,"Bk9000_KL2808")
+device(ao,INST_IO,devAoKL2512,"Bk9000_KL2512")
+device(bo,INST_IO,devBoKL2622,"Bk9000_KL2622")
+device(ai,INST_IO,devAiKL3064,"Bk9000_KL3064")
+device(ai,INST_IO,devAiKL3102,"Bk9000_KL3102")
+device(ai,INST_IO,devAiKL3162,"Bk9000_KL3162")
+device(ai,INST_IO,devAiKL3202,"Bk9000_KL3202")
+device(ai,INST_IO,devAiKL3204,"Bk9000_KL3204")
+device(ai,INST_IO,devAiKL3222,"Bk9000_KL3222")
+device(ai,INST_IO,devAiKL3312,"Bk9000_KL3312")
+device(ai,INST_IO,devAiKL3314,"Bk9000_KL3314")
+device(ai,INST_IO,devAiKL3404,"Bk9000_KL3404")
+device(ai,INST_IO,devAiKL3408,"Bk9000_KL3408")
+device(ai,INST_IO,devAiKL3464,"Bk9000_KL3464")
+device(ai,INST_IO,devAiKL3468,"Bk9000_KL3468")
+device(ao,INST_IO,devAoKL4002,"Bk9000_KL4002")
+device(ao,INST_IO,devAoKL4132,"Bk9000_KL4132")
+driver(drvBk9000_MBT)
+registrar("drvBk9000_MBT_Register")
diff --git a/Bk9000_MBTApp/src/Bk9000_MBT_Common.h b/Bk9000_MBTApp/src/Bk9000_MBT_Common.h
new file mode 100644
index 0000000..9965862
--- /dev/null
+++ b/Bk9000_MBTApp/src/Bk9000_MBT_Common.h
@@ -0,0 +1,732 @@
+#ifndef	_Bk9000_MBT_COMMON_H_
+#define	_Bk9000_MBT_COMMON_H_
+
+/* This is the header file of Beckhoff BK9000/BC9000/BK9000 EPICS driver */
+/* Because we use OSI interface, so we need EPICS 3.14 or above */
+#ifdef _WIN32
+#include <winsock2.h>
+#pragma pack(push, 1)
+#else
+
+#ifdef vxWorks
+#include <vxWorks.h>
+#include <sysLib.h>
+#include <sys/types.h>
+#include <sys/times.h>
+#include <sys/socket.h>
+#include <sockLib.h>
+#include <sys/ioctl.h>
+#include <errno.h>
+#include <netinet/in.h>
+#include <netinet/tcp.h>
+#include <arpa/inet.h>
+#include <net/if.h>
+#include <inetLib.h>
+#include <ioLib.h>
+#include <hostLib.h>
+#include <selectLib.h>
+#include <ctype.h>
+#include <tickLib.h>
+#include <unistd.h>
+#include <rebootLib.h>
+#else
+/* Unix settings */
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/time.h>
+#include <sys/ioctl.h>
+#include <sys/fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <netinet/in.h>
+#include <netinet/tcp.h>
+#include <arpa/inet.h>
+#include <netdb.h>
+#ifdef SOLARIS
+#include <sys/filio.h>
+#endif
+/* end of Unix settings */
+#endif
+#endif
+
+#include "string.h"
+#include "stdio.h"
+#include "stdlib.h"
+
+#include <epicsVersion.h>
+#if EPICS_VERSION>=3 && EPICS_REVISION>=14
+#include <epicsExport.h>
+#include <alarm.h>
+#include <dbDefs.h>
+#include <dbAccess.h>
+#include <recSup.h>
+#include <recGbl.h>
+#include <devSup.h>
+#include <drvSup.h>
+#include <link.h>
+#include <ellLib.h>
+#include <errlog.h>
+#include <special.h>
+#include <epicsTime.h>
+#include <epicsMutex.h>
+#include <epicsMessageQueue.h>
+#include <epicsThread.h>
+#else
+#error "We need EPICS 3.14 or above to support OSI calls!"
+#endif
+
+#include "ModBusTCPClnt.h"
+
+/******************************************************************************************/
+/***** important!!! important!!! important!!! important!!! important!!! important!!! ******/
+/* We support only default image mapping. That means:                                     */
+/* Complete evaluation: map control & status register                                     */
+/* Word alignment                                                                         */
+/* No motorola format                                                                     */
+/******************************************************************************************/
+#define	Bk9000_MBT_DRV_VER_STRING	"Bk9000_MBT driver version 1.2.6"
+/******************************************************************************************/
+/*********************         define general data type         ***************************/
+/* we don't use epicsType because under vxWorks, char is unsigned by default              */
+/******************************************************************************************/
+#ifndef	vxWorks	/* because vxWorks already defined them */
+typedef unsigned char		UINT8;
+typedef unsigned short int	UINT16;
+typedef unsigned int		UINT32;
+#endif
+
+typedef signed char		SINT8;
+typedef signed short int	SINT16;
+typedef signed int		SINT32;
+typedef float			FLOAT32;
+typedef double			DOUBLE64;
+/******************************************************************************************/
+
+/******************************************************************************************/
+/* We have an opThread running for each Bk9000 coupler,                                   */
+/* it picks up request from msgQ and line them up in link list and execute it             */
+/* it also keep talking to coupler to avoid link drop                                     */
+/******************************************************************************************/
+#define OPTHREAD_PRIORITY       (50)		/* opthread Priority, make it a little lower than scan task to finish all request once */
+#define OPTHREAD_STACK          (0x20000)	/* opthread Stack Size */
+#define OPTHREAD_MSGQ_CAPACITY	(200)		/* This means we can support 200 signal records per coupler */
+#define	OPTHREAD_MSGQ_TMOUT	(0.5)		/* Even no request, we timeout then check link to avoid link drop */
+#define	OPTHREAD_RECON_INTVL	(30)		/* If coupler not ready, we try to reconnect every 30 seconds */
+/******************************************************************************************/
+
+/******************************************************************************************/
+/*********************       EPICS device support return        ***************************/
+/******************************************************************************************/
+#define CONVERT			(0)
+#define NO_CONVERT		(2)
+#define MAX_CA_STRING_SIZE      (40)
+/******************************************************************************************/
+
+/******************************************************************************************/
+/* Below the information is from Beckhoff BC9000/BK9000 manual                            */
+/* With BK9000, normally it supports up to 64 terminals,                                  */
+/* but with K-bus extension, it might support up to 255                                   */
+/* BK9000 and BC9000 can only support up to 64 bus terminals,                             */
+/* for portability, we support 255 here                                                   */
+/******************************************************************************************/
+#define	MAX_NUM_OF_BUSTERM	255	/* The max number of bus terminals per coupler */
+
+/* For BC9000/BK9000, this is 256, but for BK9000, it is 1024 */
+#define	MAX_WORDS_OF_INPIMG	1024	/* The max number of word of input processing image */
+/* For BC9000/BK9000, this is 256, but for BK9000, it is 1024 */
+#define MAX_WORDS_OF_OUTIMG	1024    /* The max number of word of output processing image */
+
+/* Below we define some special offset of memory based registers */
+#define	INPUT_IMG_BASE		0
+#define	OUTPUT_IMG_BASE		0x800
+#define	COUPLER_MREG_START	0x1000
+
+#define	COUPLER_ID_MREG		0x1000	/* Totally 7 words 0x1000 ~ 0x1006 */
+#define	COUPLER_ID_SIZE		7		/* words */
+
+/* Below two registers are used to access table/register in coupler, has nothing to do with PLC */
+#define	PLC_READ_INTERFACE	0x100A
+#define	PLC_WRITE_INTERFACE	0x110A
+
+/* We can read back the image size to verify our mapping */
+#define	COMPLEX_OUT_IMG_BITS_MREG	0x1010
+#define	COMPLEX_IN_IMG_BITS_MREG	0x1011
+#define	DIGITAL_OUT_IMG_BITS_MREG	0x1012
+#define	DIGITAL_IN_IMG_BITS_MREG	0x1013
+/******************************************************************************************/
+
+/* Beckhoff Diagnostic Sub-Functions */
+#define	BT_DIAG_SUB_FUNC_ECHO		0x0000	/* Echos write data */
+#define	BT_DIAG_SUB_FUNC_RESET		0x0001	/* Reset and self-test Coupler, clear diag counters */
+#define	BT_DIAG_SUB_FUNC_CLR_CTRS	0x000A	/* Clear all diagnostic counters */
+#define	BT_DIAG_SUB_FUNC_RD_ANS_CTR	0x000B	/* Read Bus comm. answer counter */
+#define	BT_DIAG_SUB_FUNC_RD_ANS_ERR	0x000D	/* Read Answer error counter */
+#define	BT_DIAG_SUB_FUNC_RD_SLV_ANS	0x000E	/* Read Slave answer counter */
+#define	BT_DIAG_SUB_FUNC_RD_UNANS	0x000F	/* Read Slave unanswered telegram counter */
+#define	BT_DIAG_SUB_FUNC_RD_SLV_ERR	0x0010	/* Read Slave error answer counter */
+
+/******************************************************************************************/
+/* We define the default time out for ModBusTCP transaction and when we issue reset       */
+/******************************************************************************************/
+#define	DFT_MBT_TOUT	3	/* 3 seconds */
+#define	N_EXC_TO_RST	20	/* How many exception PDU will cause us to reset coupler */
+/******************************************************************************************/
+
+#ifdef __cplusplus
+extern "C" {
+#endif  /* __cplusplus */
+
+/******************************************************************************************/
+/* Below we defined all currently existing terminals,                                     */
+/* you might add some new entries once Beckhoff releases some new terminals               */
+/* The reason we use number to indicate bus terminal type is Bk9000 table 9 does same     */
+/******************************************************************************************/
+typedef enum BUSTERM_TYPE
+{
+	BT_TYPE_Bk9000 = 9000,	/* This is coupler */
+	BT_TYPE_KL9010 = 9010,	/* This is terminator */
+	BT_TYPE_KL9020 = 9020,	/* This is expander */
+	BT_TYPE_KL9080 = 9080,	/* Blank/separator */
+	BT_TYPE_KL9505 = 9505,	/* Power Supply Module */
+
+	/* 32 bits counter */
+	BT_TYPE_KL1501 = 1501,	/* Up/down counter 24 V DC, 100 kHz */
+
+	/* Multi-I/O Function Terminal */
+	BT_TYPE_KL1528 = 1528,	/* multi-I/O function, fast In-/Outputs */
+
+	/* Stepper motor terminal */
+	BT_TYPE_KL2531 = 2531,	/* Stepper motor terminal, 24 V DC, 1.5 A */
+	BT_TYPE_KL2541 = 2541,	/* Stepper motor terminal with incremental encoder, 50 V DC, 5 A */
+
+	/* pulse train output terminal RS422/24 V DC */
+	BT_TYPE_KL2521 = 2521,	/* 1-channel pulse train output terminal RS422/24 V DC */
+
+	/* pulse width output terminal */
+	BT_TYPE_KL2502 = 2502,  /* 2-channel Pulse width modulated digital output terminal 24 V DC, switched pos, 100ma */
+	BT_TYPE_KL2512 = 2512,  /* 2-channel Pulse width modulated digital output terminal 24 V DC, switched neg, 1A */
+
+	/* Digital terminal with both input/output */
+	BT_TYPE_KL2212 = 2212,	/* Imax = 0.5 A, diagnostic, rotectored sensor supply */
+	BT_TYPE_KL2641 = 2641,	/* 1-channel relay output terminal 230 V AC, 16 A, manual operation */
+	BT_TYPE_KL2692 = 2692,	/* Cycle monitoring terminal (watchdog) */
+	
+	/* Digital Input, last digit means num of channels */
+	BT_TYPE_KL1002 = 1002,	/* 24V DC, filter 3.0ms */
+	BT_TYPE_KL1012 = 1012,	/* 24V DC, filter 0.2ms */
+	BT_TYPE_KL1032 = 1032,	/* 48V DC, filter 3.0ms */
+	BT_TYPE_KL1052 = 1052,	/* 24V DC, filter 3.0ms, p/n switching */
+	BT_TYPE_KL1104 = 1104,  /* 24V DC, filter 3.0ms */
+	BT_TYPE_KL1114 = 1114,  /* 24V DC, filter 0.2ms */
+	BT_TYPE_KL1124 = 1124,  /* 5V DC, filter 3.0ms */
+	BT_TYPE_KL1154 = 1154,  /* 24V DC, filter 3.0ms, p/n switching */
+	BT_TYPE_KL1164 = 1164,  /* 24V DC, filter 0.2ms, p/n switching */
+	BT_TYPE_KL1184 = 1184,	/* 24V DC, filter 3.0ms, p switching */
+	BT_TYPE_KL1194 = 1194,	/* 24V DC, filter 0.2ms, p switching */
+	BT_TYPE_KL1212 = 1212,	/* 24V DC, filter 3.0ms, short protect */
+	BT_TYPE_KL1232 = 1232,	/* 24V DC, filter 0.2ms, pulse expansion */
+	BT_TYPE_KL1302 = 1302,	/* 24V DC, filter 3.0ms, type 2 sensors */
+	BT_TYPE_KL1304 = 1304,	/* 24V DC, filter 3.0ms, type 2 sensors */
+	BT_TYPE_KL1312 = 1312,	/* 24V DC, filter 0.2ms, type 2 sensors */
+	BT_TYPE_KL1314 = 1314,	/* 24V DC, filter 0.2ms, type 2 sensors */
+	BT_TYPE_KL1352 = 1352,	/* 24 V DC, filter 3.0ms, for NAMUR sensors */
+	BT_TYPE_KL1362 = 1362,	/* 24V DC, filter 3.0ms, break-in alarm */
+	BT_TYPE_KL1382 = 1382,	/* 24V DC, filter 30ms, thermistor */ 
+	BT_TYPE_KL1404 = 1404,	/* 24V DC, filter 3.0ms, 4 x 2-wire connection */
+	BT_TYPE_KL1408 = 1408,	/* 24V DC, filter 3.0ms */
+	BT_TYPE_KL1414 = 1414,	/* 24V DC, filter 0.2ms, 4 x 2-wire connection */
+	BT_TYPE_KL1418 = 1418,	/* 24V DC, filter 0.2ms */
+	BT_TYPE_KL1434 = 1434,	/* 24V DC, filter 0.2ms, type 2 sensors, 4 x 2-wire connection */
+	BT_TYPE_KL1488 = 1488,  /* 24V DC, filter 3.0ms, n switching */
+	BT_TYPE_KL1498 = 1498,  /* 24V DC, filter 0.2ms, n switching */
+	BT_TYPE_KL1702 = 1702,	/* 230V AC/DC, power contacts */
+	BT_TYPE_KL1712 = 1712,	/* 120V AC/DC, power contacts */
+	BT_TYPE_KL1722 = 1722,	/* 230V AC/DC, no power contacts */
+
+	/* Digital Output, last digit means num of channels */
+	BT_TYPE_KL2012 = 2012,  /* 24 V DC, Imax = 0.5A */
+	BT_TYPE_KL2022 = 2022,  /* 24 V DC, Imax = 2.0A */
+	BT_TYPE_KL2032 = 2032,  /* 24 V DC, Imax = 0.5A, reverse voltage protection */
+	BT_TYPE_KL2114 = 2114,  /* 4-channel digital output terminal 24 V DC */
+	BT_TYPE_KL2124 = 2124,  /* 4-channel 5 V DC */
+	BT_TYPE_KL2134 = 2134,  /* 4-channel digital output terminal 24 V DC, reverse voltage protection */
+	BT_TYPE_KL2184 = 2184,  /* 4-channel digital output terminal 24 V DC, n switching */
+	BT_TYPE_KL2404 = 2404,  /* 4-channel digital output terminal 24 V DC, Imax=0.5A, 4x2-wire conn */
+	BT_TYPE_KL2408 = 2408,  /* 8-channel digital output terminal 24 V DC */
+	BT_TYPE_KL2808 = 2808,  /* 8-channel digital output terminal 24 V DC (with GND)*/
+	BT_TYPE_KL2488 = 2488,  /* 8-channel digital output terminal 24 V DC, n-switch */
+	BT_TYPE_KL2602 = 2602,  /* relay output terminal 230 VAC, make contacts */
+	BT_TYPE_KL2612 = 2612,  /* relay output terminal 120 VAC, change-over */
+	BT_TYPE_KL2622 = 2622,  /* relay output terminal 230 VAC, make contacts, np power contact */
+	BT_TYPE_KL2631 = 2631,  /* 1-channel relay output terminal 400 V AC, 300 V DC */
+	BT_TYPE_KL2702 = 2702,  /* 2-channel solid state load relay up to 230 V AC/DC, 0.3 A */
+	BT_TYPE_KL2712 = 2712,  /* 2-channel triac output terminal 12 ... 230 V AC , 0.5 A */
+	BT_TYPE_KL2722 = 2722,  /* 2-channel triac output terminal 12 ... 230 V AC , 1 A */
+	BT_TYPE_KL2732 = 2732,  /* 2-channel triac output terminal 12 ... 230 V AC , 1 A, no power contact */
+
+	/* Analog terminal with both input and output */
+	BT_TYPE_KL4494 = 4494,  /* 2-channel analog input, 2-channel analog output terminal -10 V ... 10 V, 12 bits */
+
+	/* Analog Input, last digit means num of channels */	
+	BT_TYPE_KL3001 = 3001,  /* 1-channel analog input terminal -10 ... 10 V, 12 bits */
+	BT_TYPE_KL3002 = 3002,  /* 2-channel analog input terminal, -10 ... 10 V, 12 bits */
+	BT_TYPE_KL3011 = 3011,  /* 1-channel analog input terminal 0 ... 20 mA, 12 bits */
+	BT_TYPE_KL3012 = 3012,  /* 2-channel analog input terminal, 0 ... 20 mA, 12 bits */
+	BT_TYPE_KL3021 = 3021,  /* 1-channel analog input terminal 4 ... 20 mA, 12 bits */
+	BT_TYPE_KL3022 = 3022,  /* 2-channel analog input terminal, 4 ... 20 mA, 12 bits */
+	BT_TYPE_KL3041 = 3041,  /* 1-channel loop-powered input terminal 0 ... 20 mA, 12 bits */
+	BT_TYPE_KL3042 = 3042,  /* 2-channel loop-powered input terminal 0 ... 20 mA, 12 bits */
+	BT_TYPE_KL3044 = 3044,  /* 4-channel analog input terminal, 0 ... 20 mA, 12 bits */
+	BT_TYPE_KL3051 = 3051,  /* 1-channel loop-powered input terminal 4 ... 20 mA, 12 bits */
+	BT_TYPE_KL3052 = 3052,  /* 2-channel loop-powered input terminal 4 ... 20 mA, 12 bits */
+	BT_TYPE_KL3054 = 3054,  /* 4-channel analog input terminal, 4 ... 20 mA, 12 bits */
+	BT_TYPE_KL3061 = 3061,  /* 1-channel analog input terminal 0 ... 10 V, 12 bits */
+	BT_TYPE_KL3062 = 3062,  /* 2-channel analog input terminal, 0 ... 10 V, 12 bits */
+	BT_TYPE_KL3064 = 3064,  /* 4-channel analog input terminal, 0 ... 10 V, 12 bits */
+	BT_TYPE_KL3102 = 3102,  /* 2-channel analog input terminal, -10 ... 10 V, 16 bits */
+	BT_TYPE_KL3112 = 3112,  /* 2-channel analog input terminal, 0 ... 20 mA, 15/16 bits */
+	BT_TYPE_KL3122 = 3122,  /* 2-channel analog input terminal, 4 ... 20 mA, 15/16 bits */
+	BT_TYPE_KL3132 = 3132,  /* 2-channel analog input terminal, -10 ... 10 V, 16 bits */
+	BT_TYPE_KL3142 = 3142,  /* 2-channel analog input terminal, 0 ... 20 mA, 16 bits */
+	BT_TYPE_KL3152 = 3152,  /* 2-channel analog input terminal, 4 ... 20 mA, 16 bits */
+	BT_TYPE_KL3162 = 3162,  /* 2-channel analog input terminal, 0 ... 10 V, 16 bits */
+	BT_TYPE_KL3172 = 3172,  /* 2-channel analog input terminal, 0 ... 2 V, 16 bits */
+	BT_TYPE_KL3182 = 3182,  /* 2-channel analog input terminal, -2 ... 2 V, 16 bits */
+	BT_TYPE_KL3201 = 3201,  /* 1-channel input terminal PT100 (RTD), 16 bits */
+	BT_TYPE_KL3202 = 3202,  /* 2-channel input terminal PT100 (RTD), 16 bits */
+	BT_TYPE_KL3204 = 3204,  /* 4-channel input terminal PT100 (RTD), 16 bits */
+	BT_TYPE_KL3222 = 3222,  /* 2-channel input terminal PT100 (RTD) 4 wire type, 16 bits */
+	BT_TYPE_KL3311 = 3311,  /* 1-channel thermocouple with open-circuit recognition, 16 bits */
+	BT_TYPE_KL3312 = 3312,	/* 2-channel thermocouple with open-circuit recognition, 16 bits */
+	BT_TYPE_KL3314 = 3314,	/* 4-channel thermocouple with open-circuit recognition, 16 bits */
+	BT_TYPE_KL3351 = 3351,  /* 1-channel resistor bridge input terminal (strain gauge), 16 bits */
+	BT_TYPE_KL3356 = 3356,  /* 1-channel accurate resistance bridge evaluation, 16 bits */
+	BT_TYPE_KL3361 = 3361,  /* 1-channel oscilloscope terminal -16 mV ... +16 mV, 15 bits */
+	BT_TYPE_KL3362 = 3362,  /* 2-channel oscilloscope terminal -10 V ... +10 V, 15 bits */
+	BT_TYPE_KL3403 = 3403,  /* 3-phase power measurement terminal, 16 bits */
+	BT_TYPE_KL3404 = 3404,  /* 4-channel analog input terminal, -10 ... 10 V, 12 bits, 4x2-wire */
+	BT_TYPE_KL3408 = 3408,  /* 8-channel analog input terminal, -10 ... 10 V, 12 bits, 8x1-wire */
+	BT_TYPE_KL3444 = 3444,  /* 4-channel analog input terminal, 0 ... 20 mA, 12 bits, 4x2-wire */
+	BT_TYPE_KL3448 = 3448,  /* 8-channel analog input terminal, 0 ... 20 mA, 12 bits, 8x1-wire */
+	BT_TYPE_KL3454 = 3454,  /* 4-channel analog input terminal, 4 ... 20 mA, 12 bits, 4x2-wire */
+	BT_TYPE_KL3458 = 3458,  /* 8-channel analog input terminal, 4 ... 20 mA, 12 bits, 8x1-wire */
+	BT_TYPE_KL3464 = 3464,  /* 4-channel analog input terminal, 0 ... 10 V, 12 bits, 4x2-wire */
+	BT_TYPE_KL3468 = 3468,  /* 8-channel analog input terminal, 0 ... 10 V, 12 bits, 8x1-wire */
+
+	/* Analog Output, last digit means num of channels */
+	BT_TYPE_KL4001 = 4001,  /* 1-channel analog output terminal 0 ... 10 V, 12 bits */
+	BT_TYPE_KL4002 = 4002,  /* 2-channel analog output terminal 0 ... 10 V, 12 bits */
+	BT_TYPE_KL4004 = 4004,  /* 4-channel analog output terminal 0 ... 10 V, 12 bits */
+	BT_TYPE_KL4011 = 4011,  /* 1-channel analog output terminal 0 ... 20 mA, 12 bits */
+	BT_TYPE_KL4012 = 4012,  /* 2-channel analog output terminal 0 ... 20 mA, 12 bits */
+	BT_TYPE_KL4021 = 4021,  /* 1-channel analog output terminal 4 ... 20 mA, 12 bits */
+	BT_TYPE_KL4022 = 4022,  /* 2-channel analog output terminal 4 ... 20 mA, 12 bits */
+	BT_TYPE_KL4031 = 4031,  /* 1-channel analog output terminal -10 ... 10 V, 12 bits */
+	BT_TYPE_KL4032 = 4032,  /* 2-channel analog output terminal -10 ... 10 V, 12 bits */
+	BT_TYPE_KL4034 = 4034,  /* 4-channel analog output terminal -10 ... 10 V, 12 bits */
+	BT_TYPE_KL4112 = 4112,  /* 2-channel analog output terminal 0 ... 20 mA, 16 bits */
+	BT_TYPE_KL4132 = 4132,  /* 2-channel analog output terminal -10 ... 10 V, 16 bits */
+	BT_TYPE_KL4404 = 4404,  /* 4-channel analog output terminal 0 ... 10 V, 12 bits, 4x2-wire */
+	BT_TYPE_KL4408 = 4408,  /* 8-channel analog output terminal 0 ... 10 V, 12 bits, 8x1-wire */
+	BT_TYPE_KL4414 = 4414,  /* 4-channel analog output terminal 0 ... 20 mA, 12 bits, 4x2-wire */
+	BT_TYPE_KL4418 = 4418,  /* 8-channel analog output terminal 0 ... 20 mA, 12 bits, 8x1-wire */
+	BT_TYPE_KL4424 = 4424,  /* 4-channel analog output terminal 4 ... 20 mA, 12 bits, 4x2-wire */
+	BT_TYPE_KL4428 = 4428,  /* 8-channel analog output terminal 4 ... 20 mA, 12 bits, 8x1-wire */
+	BT_TYPE_KL4434 = 4434,  /* 4-channel analog output terminal -10 ... 10 V, 12 bits, 4x2-wire */
+	BT_TYPE_KL4438 = 4438,  /* 8-channel analog output terminal -10 ... 10 V, 12 bits, 8x1-wire */
+
+}	E_BUSTERM_TYPE;
+
+/******************************************************************************************/
+/* We try to describe bus terminal here, some info maybe overkill                         */
+/* We can't use input/output to describe terminal because some terminals have both        */
+/* We don't use analog/digital to describe terminal because complex is more accurate      */
+/* complex_in_bits is always same as complex_out_bits, for more general, we define both   */
+/* This definition is for image mapping only, Bk9000_BTDef.h defines terminals            */
+/******************************************************************************************/
+typedef	struct BUSTERM_IMG_DEF
+{
+	char			busterm_string[8];	/* String name of bus terminal, must be 6 characters */
+	E_BUSTERM_TYPE	busterm_type;		/* number name of bus terminal */
+	UINT32			term_reg_exist;		/* 1: This terminal has registers, for coupler, this is not used, stay 0 */
+	UINT16			term_r32_dft;		/* default value of feature register, if not exist, stay 0 */
+	UINT16			complex_in_words;	/* how many words in complex input processing image */
+	UINT16			complex_out_words;	/* how many words in complex output processing image */
+	UINT16			digital_in_bits;	/* how many bits in digital input processing image */
+	UINT16			digital_out_bits;	/* how many bits in digital output processing image */
+}	BUSTERM_IMG_DEF;
+
+/******************************************************************************************/
+/* We defined all possible operations, and default function only handle these             */
+/* CIMG means complex image, all offset is word, DIMG is digital image and bit based      */
+/******************************************************************************************/
+typedef enum    BUSTERM_OPTYPE
+{
+	BT_OPTYPE_READ_INPUT_CIMG,
+	BT_OPTYPE_READ_OUTPUT_CIMG,
+	BT_OPTYPE_WRITE_OUTPUT_CIMG,
+	BT_OPTYPE_READ_INPUT_DIMG,
+	BT_OPTYPE_READ_OUTPUT_DIMG,
+	BT_OPTYPE_WRITE_OUTPUT_DIMG,
+	BT_OPTYPE_READ_CPLR_MREG,
+	BT_OPTYPE_WRITE_CPLR_MREG,
+	BT_OPTYPE_READ_CPLR_REG,
+	BT_OPTYPE_WRITE_CPLR_REG,
+	BT_OPTYPE_CPLR_DIAG,
+	BT_OPTYPE_READ_TERM_REG,
+	BT_OPTYPE_WRITE_TERM_REG
+}	E_BUSTERM_OPTYPE;
+/******************************************************************************************/
+
+/******************************************************************************************/
+/*********************       Record type we support             ***************************/
+/******************************************************************************************/
+typedef	enum	EPICS_RTYPE
+{
+	EPICS_RTYPE_NONE,
+	EPICS_RTYPE_AI,
+	EPICS_RTYPE_AO,
+	EPICS_RTYPE_BI,
+	EPICS_RTYPE_BO,
+	EPICS_RTYPE_LI,
+	EPICS_RTYPE_LO,
+	EPICS_RTYPE_MBBI,
+	EPICS_RTYPE_MBBO,
+	EPICS_RTYPE_MBBID,
+	EPICS_RTYPE_MBBOD,
+	EPICS_RTYPE_SI,
+	EPICS_RTYPE_SO,
+	EPICS_RTYPE_WF
+}	E_EPICS_RTYPE;
+/******************************************************************************************/
+
+/******************************************************************************************/
+/* Data type of signal, it only means scalar value. For more complicated case             */
+/* user should have special function to process it                                        */
+/******************************************************************************************/
+typedef	enum	DATA_TYPE
+{
+	DTYP_UINT8,
+	DTYP_UINT16,
+	DTYP_UINT32,
+	DTYP_SINT8,
+	DTYP_SINT16,
+	DTYP_SINT32,
+	DTYP_FLOAT32,
+	DTYP_DOUBLE64
+}	E_DATA_TYPE;
+/******************************************************************************************/
+
+/******************************************************************************************/
+/* The signal definition, the busterm_string/type and function combination must be unique */
+/* The definition of arg1 -> arg3 is different between different operation                */
+/*	BT_OPTYPE_READ_INPUT_CIMG/BT_OPTYPE_READ_OUTPUT_CIMG/BT_OPTYPE_WRITE_OUTPUT_CIMG: */
+/* word offset to start of terminal, number of words, effective bits                      */
+/*	BT_OPTYPE_READ_INPUT_DIMG/BT_OPTYPE_READ_OUTPUT_DIMG/BT_OPTYPE_WRITE_OUTPUT_DIMG: */
+/* bit offset to start of terminal, number of bits, 0                                     */
+/*	BT_OPTYPE_READ_CPLR_MREG/BT_OPTYPE_WRITE_CPLR_MREG:                               */
+/* word offset in image above COUPLER_MREG_START, Reset to apply, 0?                      */
+/*	BT_OPTYPE_READ_CPLR_REG/BT_OPTYPE_WRITE_CPLR_REG:                                 */
+/* table, register, Reset to apply?                                                       */
+/*	BT_OPTYPE_CPLR_DIAG                                                               */
+/* sub-function, 0, 0                                                                     */
+/*	BT_OPTYPE_READ_TERM_REG/BT_OPTYPE_WRITE_TERM_REG:                                 */
+/* C/S word offset in complex input image, C/S word offset in complex output image, reg   */ 
+/******************************************************************************************/
+typedef	struct BUSTERM_SIG_PREDEF
+{/* We use this one to define signals */
+	char				busterm_string[8];		/* String name of bus terminal, must be 6 characters */
+	E_BUSTERM_TYPE		busterm_type;			/* number name of bus terminal */
+	char				function[MAX_CA_STRING_SIZE];	/* Function name, should be the third part of INP/OUT field */
+	E_BUSTERM_OPTYPE	busterm_optype;			/* The operation type, one of above list */
+	E_EPICS_RTYPE		epics_rtype;			/* EPICS record type to use this signal, EPICS_RTYP_NONE means not for EPICS or waive check */
+	E_DATA_TYPE		data_type;
+	UINT32			arg1;
+	UINT32			arg2;
+	UINT32			arg3;
+}	BUSTERM_SIG_PREDEF;
+
+typedef	struct BUSTERM_SIG_DEF
+{/* We use this one to really handle sigals */
+	char				busterm_string[8];		/* String name of bus terminal, must be 6 characters */
+	E_BUSTERM_TYPE		busterm_type;			/* number name of bus terminal */
+	char				function[MAX_CA_STRING_SIZE];	/* Function name, should be the third part of INP/OUT field */
+	E_BUSTERM_OPTYPE	busterm_optype;			/* The operation type, one of above list */
+	E_EPICS_RTYPE		epics_rtype;			/* EPICS record type to use this signal, EPICS_RTYP_NONE means not for EPICS or waive check */
+	E_DATA_TYPE		data_type;
+	union ARGS
+	{
+		struct CIMG_rw
+		{
+			UINT32	woffset;
+			UINT32	nwords;
+			UINT32	effbits;
+		}cimg_rw;
+		struct DIMG_rw
+		{
+			UINT32	boffset;
+			UINT32	nbits;
+			UINT32	not_used1;
+		}dimg_rw;
+		struct CPLR_MREG
+		{
+			UINT32	woffset;
+			UINT32	reset;
+			UINT32	not_used1;
+		}cplr_mreg;
+		struct CPLR_REG
+		{
+			UINT32	table;
+			UINT32	reg;
+			UINT32	reset;
+		}cplr_reg;
+		struct CPLR_DIAG
+		{
+			UINT32	subfunc;
+			UINT32	not_used1;
+			UINT32	not_used2;
+		}cplr_diag;
+		struct TERM_REG
+		{
+			UINT32	Rwoffset;
+			UINT32	Wwoffset;
+			UINT32	reg;
+		}term_reg;
+
+	}	args;
+}	BUSTERM_SIG_DEF;
+/******************************************************************************************/
+
+/******************************************************************************************/
+/* Below we define the run-time control structures                                        */
+/******************************************************************************************/
+typedef ELLLIST Bk9000_INIT_LIST;
+typedef ELLLIST Bk9000_COUPLER_LIST;
+typedef ELLLIST Bk9000_SIGNAL_LIST;
+typedef	ELLLIST	Bk9000_SIGPTR_LIST;
+
+typedef	struct Bk9000_INIT
+{
+	ELLNODE			node;	/* Linked List Node */
+	
+	BUSTERM_SIG_DEF		* pbusterm_sig_def;
+	UINT16			init_value;
+}	Bk9000_INIT;
+
+typedef	struct INSTALLED_BUSTERM
+{
+	BUSTERM_IMG_DEF		* pbusterm_img_def;
+	Bk9000_INIT_LIST	init_list;
+	UINT16			term_r32_value;		/* If this terminal has registers, this will hold the latest setting of feature register, or else stays 0 */
+	UINT32			complex_in_wordoffset;	/* complex input word offset of this module in input processing image */
+	UINT32			complex_out_wordoffset;	/* complex output word offset of this module in output processing image */
+	UINT32			digital_in_bitoffset;	/* digital input bit offset of this module in input processing image */
+	UINT32			digital_out_bitoffset;	/* digital output bit offset of this module in output processing image */
+}	INSTALLED_BUSTERM;
+
+/* BC9000/BK9000 coupler information */
+typedef struct Bk9000_COUPLER
+{
+	ELLNODE			node;	/* Linked List Node */
+
+	ModBusTCP_Link		mbt_link;	/* The link to device via ModBusTCP protocol */
+
+	epicsMutexId		mutex_lock;
+
+	INSTALLED_BUSTERM	installedBusTerm[MAX_NUM_OF_BUSTERM+2];	/* +2 means include coupler 9000 and terminator 9010 */
+	UINT32			terminated;		/* Is KL9010 already installed */
+
+	/* Below 4 we calculate first, then we read back from  memory imaged register of coupler to verify*/
+	UINT16			complex_out_bits;
+	UINT16			complex_in_bits;
+	UINT16			digital_out_bits;
+	UINT16			digital_in_bits;
+	/* Below 2 we calculate by software */
+	UINT32			total_out_words; /* This must be equal to (complex_out_bits + digital_out_bits +15)/16 */
+	UINT32			total_in_words; /* This must be equal to (complex_in_bits + digital_in_bits +15)/16 */
+
+	UINT32			couplerReady;	/* This indicate if coupler really usable */
+	UINT32			needReset;	/* This is used to bundle all register ops that need reset, so we only reset once to apply all */
+
+	epicsTimeStamp		time_lost_conn;	/* Last time we found we lost connection */
+	epicsTimeStamp		time_set_conn;	/* Last time we successfully set up connection */
+	epicsTimeStamp		time_last_try;	/* Last time we try to connect */
+
+	char				couplerID[COUPLER_ID_SIZE*2+2];
+	
+	/* We use hardcoded size, this wastes a little bit memory, but no malloc and error check */
+	UINT16			outputImage[MAX_WORDS_OF_OUTIMG];
+	UINT16			inputImage[MAX_WORDS_OF_INPIMG];
+
+	Bk9000_SIGPTR_LIST	sigptr_list;	/* All singals' poniter link list */
+
+	epicsMessageQueueId	msgQ_id;	/* Through this message queue, record processing sends request to opthread */
+
+	epicsThreadId		opthread_id;	/* operation thread ID for this Bk9000 */
+	char				opthread_name[MAX_CA_STRING_SIZE];
+
+}	Bk9000_COUPLER;
+
+/* Bk9000 device suport record information */
+typedef	struct Bk9000_DEVDATA
+{
+	dbCommon       		* precord;
+				
+	Bk9000_COUPLER		* pcoupler;
+	UINT16			slot;							
+	BUSTERM_SIG_DEF		* pbusterm_sig_def;
+
+	UINT16			value;	/* the value of input or ouput, 16 bits fits most of signals */
+
+	int				op_done;
+	UINT32			err_code;	/* high 16 will be local error, low 16 will copy MBTC err code, 0 means no error */
+
+}	Bk9000_DEVDATA;
+
+/* This is the one dpvt ponits to and send in message queue */
+typedef	SINT32	(* Bk9000_FPTR)(Bk9000_DEVDATA * pdevdata, void * pextra_arg);
+typedef	struct Bk9000_SIGNAL
+{
+	ELLNODE			node;	/* Linked list node */
+
+	Bk9000_FPTR		process_fptr;
+
+	Bk9000_DEVDATA		* pdevdata;
+											
+	void			* pextra_arg;
+}	Bk9000_SIGNAL;
+
+/* This is the one that in the coupler's SIGPTR list */
+typedef	struct Bk9000_SIGPTR
+{
+	ELLNODE			node;	/* Linked list node */
+	Bk9000_SIGNAL		* psignal;
+}	Bk9000_SIGPTR;
+
+/* This is for device support to malloc memory easier */
+typedef	struct Bk9000_DEVSUPDATA
+{
+	Bk9000_SIGPTR	sigptr;
+	Bk9000_SIGNAL	signal;
+	Bk9000_DEVDATA	devdata;
+}	Bk9000_DEVSUPDATA;
+/******************************************************************************************/
+/* Define err_code here                                                                   */
+/******************************************************************************************/
+#define	ERR_CODE_NO_ERROR		0x00000000
+#define	ERR_CODE_CPLR_NOT_READY		0x00010000
+#define	ERR_CODE_SYNC_IMG_FAIL		0x00020000
+#define	ERR_CODE_PROC_NOT_SUPT		0x00030000
+#define ERR_CODE_OUTINIT_NOT_SUPT       0x00040000
+/******************************************************************************************/
+/* Below we define the function prototype                                                 */
+/******************************************************************************************/
+
+/******************************************************************************************/
+/* Below functions are from Bk9000_MBT_Ext.c                                              */
+/******************************************************************************************/
+
+/******************************************************************************************/
+/* By default, return value 0 means OK, return value -1 means something wrong             */
+/* In this file, all offsets for Mreg are absolute value                                  */
+/* All offsets for IO image is relative                                                   */
+/* We don't check any Bk9000 related parameter range, caller should prepare it            */
+/******************************************************************************************/
+
+/***********************************************************************************************/
+/*********************** Request PDU and Response PDU definition *******************************/
+/* We use xXYYYoffset to name offset, x is b(bit) or w(word), X is R(read) or W(Write)         */
+/* YYY is the combination of I(input image) O(output image) R(registers)                       */
+/* Dworddata means 16 bits scalar value for Diag, and WByteData means byte array to write      */
+/***********************************************************************************************/
+
+/* This function uses MBT function 8 to reset Bk9000 coupler */
+/* We need this in Bk9000 connection monitor task if too many exception PDUs */
+int Bk9000_MBT_Reset(ModBusTCP_Link mbt_link, unsigned int toutsec);
+
+/* This function uses MBT function 8 to do echo to test connection */
+/* We keep calling this in Bk9000 connection monitor task to avoid link drop */
+int Bk9000_MBT_TestLink(ModBusTCP_Link mbt_link, unsigned int toutsec);
+
+/* This function uses MBT function 3 to read coupler id from image */
+/* ID must be a pre-malloced buffer with size bytes */
+int	Bk9000_MBT_Read_Cplr_ID(ModBusTCP_Link mbt_link, char * ID, int size, unsigned int toutsec);
+
+/* This function uses MBT function 3 to read image size info from image */
+/* Then verify if the calculated size is correct */
+int	Bk9000_MBT_Verify_Image_Size(ModBusTCP_Link mbt_link, unsigned short int cal_complex_out_bits, unsigned short int cal_complex_in_bits,
+								 unsigned short int cal_digital_out_bits, unsigned short int cal_digital_in_bits, unsigned int toutsec);
+
+/* This function uses MBT function 3 to read memory image based register of Bk9000 coupler */
+/* Now it reads only one word, user might use it as template to build function to read more */
+/* Because we read only one register(word), we don't worry about oversize here */
+int Bk9000_MBT_Read_Cplr_MReg(ModBusTCP_Link mbt_link, unsigned short int wRRoffset, unsigned short int *pRWordData, unsigned int toutsec);
+
+/* This function uses MBT function 16 to write memory image based register of Bk9000 coupler */
+/* Now it writes only one word, user might use it as template to build function to write more */
+/* That is the reason we use function 16 instead of function 6 and use pWWordData to pass even single data */
+/* Because we read only one register(word), we don't worry about oversize here */
+int Bk9000_MBT_Write_Cplr_MReg(ModBusTCP_Link mbt_link, unsigned short int wWRoffset, unsigned short int *pWWordData, unsigned int toutsec);
+
+/* Below two functions use MBT function 3 and function 16 to operate the PLC register in Bk9000 coupler */
+/* This allow you read/write all table/register in coupler, we only operate one register(word) here  */
+/* Caution: Don't get confused, I call PLC register here just because it's listed in manual like this way */
+/* There is nothing to do with PLC. It is only for register access purpose */
+/* Because it is accessing coupler register, so terminal number will be always 0 */
+/* If you add terminal number as a parameter, you can use same technique to access terminal registers */
+/* But because we have another faster way to access terminal register, so we define other functions */
+int Bk9000_MBT_Read_Cplr_Reg(ModBusTCP_Link mbt_link, unsigned char table, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec);
+int Bk9000_MBT_Write_Cplr_Reg(ModBusTCP_Link mbt_link, unsigned char table, unsigned char reg, unsigned short int *pWWordData, unsigned int toutsec);
+
+/* Below two functions use MBT function 3 and function 16 to operate the terminal registers */
+/* Here we don't use PLC register in coupler, we use C/S byte mapped in image */
+/* To be general, we use two parameters to specify the offset of C/S in input and output image */
+/* But so far as we know, they should be always same */
+/* This allow you read/write all registers in terminal, we only operate one register(word) here  */
+int Bk9000_MBT_Read_Term_Reg(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int wWOoffset, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec);
+int Bk9000_MBT_Write_Term_Reg(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int wWOoffset, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec);
+
+/* We need this function to init whole local image of output, it is based on function 3 */
+int Bk9000_MBT_Read_Output_Image(ModBusTCP_Link mbt_link, unsigned short int *pimage, unsigned short int wimg_size, unsigned int toutsec);
+
+/* We try to combine all analong/digital signal operations based on memory image to one function 23 */
+/* pinpimage and poutimage will be always point to the begin of the image */
+/* But if nothing to write, we will use function 4 */
+/* If nothing to read, we will use function 16 */
+int Bk9000_MBT_Sync_Both_Image(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int RWordCount, unsigned short int *pinpimage,
+				unsigned short int wWOoffset, unsigned short int WWordCount, unsigned short int *poutimage,unsigned int toutsec);
+
+/******************************************************************************************/
+/* Below functions are from drvBk9000_MBT.c                                               */
+/******************************************************************************************/
+
+/* This function returns the pointer to the coupler with name */
+Bk9000_COUPLER	* Bk9000_Get_Coupler_By_Name( const char * cplrname );
+
+/* This must be called in st.cmd first before any operation to the coupler */
+/* name must be unique, and ipaddr is not necessary to be unique */
+/* This function can be only called in st.cmd */
+/* init_string will be "signame1=1234,signame2=0x2345" */
+int	Bk9000_Coupler_Add( char * cplrname, char * ipaddr, char * init_string);
+
+/* This function add a bus terminal to an existing coupler */
+/* init_string will be "signame1=1234,signame2=0x2345" */
+int	Bk9000_Terminal_Add( char * cplrname, UINT16 slot, char * btname, char * init_string);
+
+/* This function will be called by all device support */
+/* The memory for Bk9000_SIGNAL will be malloced inside */
+int	Bk9000_Signal_Init(dbCommon * precord, E_EPICS_RTYPE epics_rtype, char * ioString, E_BUSTERM_TYPE bttype, Bk9000_FPTR process_fptr, void * pextra_arg);
+
+/* This is the default process function, it deals with coupler reg/Mreg and terminal reg */
+/* For image based operation, it supports single bit op and single word op only */
+/* For the op needs more words or bits, it will put ERR_CODE_PROC_NOT_SUPT, you need your own function */
+int	Bk9000_Dft_ProcFunc(Bk9000_DEVDATA * pdevdata, void * pextra_arg);
+
+/* This is the function will be called in device support init function to init output record */
+int	Bk9000_Dft_OutInit(Bk9000_SIGNAL * psignal);
+
+#ifdef __cplusplus
+}
+#endif  /* __cplusplus */
+
+#endif
diff --git a/Bk9000_MBTApp/src/Bk9000_MBT_Ext.c b/Bk9000_MBTApp/src/Bk9000_MBT_Ext.c
new file mode 100644
index 0000000..6b943bb
--- /dev/null
+++ b/Bk9000_MBTApp/src/Bk9000_MBT_Ext.c
@@ -0,0 +1,353 @@
+/* This file we implement some extensions of ModBusTCPClnt for Beckhoff */
+/* It is based on ModBusTCPClnt, but for Beckhoff Bk9000 only */
+#include "Bk9000_MBT_Common.h"
+
+
+/* Add MACRO Definitions for min/max */
+/* Needed as of EPICS BASE R3-14-11 */
+/* provide an macro that implements max() and min() */
+
+#ifndef __cplusplus
+#ifndef max
+#define max(a,b) (((a)>(b)) ? (a) : (b))
+#endif
+
+#ifndef min
+#define min(a,b) (((a)<(b)) ? (a) : (b))
+#endif
+#endif
+
+
+
+extern	SINT32	Bk9000_DRV_DEBUG;
+/******************************************************************************************/
+/* By default, return value 0 means OK, return value -1 means something wrong             */
+/* In this file, all offsets for Mreg are absolute value                                  */
+/* All offsets for IO image is relative                                                   */
+/* We don't check any Bk9000 related parameter range, caller should prepare it            */
+/******************************************************************************************/
+
+/***********************************************************************************************/
+/*********************** Request PDU and Response PDU definition *******************************/
+/* We use xXYYYoffset to name offset, x is b(bit) or w(word), X is R(read) or W(Write)         */
+/* YYY is the combination of I(input image) O(output image) R(registers)                       */
+/* Dworddata means 16 bits scalar value for Diag, and WByteData means byte array to write      */
+/***********************************************************************************************/
+
+/* This function uses MBT function 8 to reset Bk9000 coupler */
+/* We need this in Bk9000 connection monitor task if too many exception PDUs */
+int Bk9000_MBT_Reset(ModBusTCP_Link mbt_link, unsigned int toutsec)
+{
+	int status;
+	unsigned short dummy;	/* this is for holding the response */
+
+	/* We don't explicitly check link here because MBT_FunctionX does it */
+	/* int MBT_Function8(mbt_link, subFunction, WDworddata,  *pRDworddata, toutsec); */
+	status = MBT_Function8(mbt_link, BT_DIAG_SUB_FUNC_RESET, 0, &dummy, toutsec);
+	return status;
+}
+
+/* This function uses MBT function 8 to do echo to test connection */
+/* We keep calling this in Bk9000 connection monitor task to avoid link drop */
+int Bk9000_MBT_TestLink(ModBusTCP_Link mbt_link, unsigned int toutsec)
+{
+	unsigned short echo=0;   /* this is for holding the response */
+
+	/* We don't explicitly check link here because MBT_FunctionX does it */
+	/* int MBT_Function8(mbt_link, subFunction, WDworddata,  *pRDworddata, toutsec); */
+	MBT_Function8(mbt_link, BT_DIAG_SUB_FUNC_ECHO, 0x5186, &echo, toutsec);
+	if(echo != 0x5186)
+		return -1;
+	else
+		return 0;
+}
+
+/* This function uses MBT function 8 to read diagnostic counters */
+int Bk9000_MBT_Diag(ModBusTCP_Link mbt_link, unsigned int toutsec)
+{
+	unsigned short	answerCtr;	/* Number of bus communication answers */
+	unsigned short	ansErrCtr;	/* Answer error counter */
+	unsigned short	slvAnsCtr;	/* Slave answer counter */
+	unsigned short	unAnsCtr;	/* Slave unanswered telegram counter */
+	unsigned short	slvErrCtr;	/* Slave error answer counter */
+
+	/* int MBT_Function8(mbt_link, subFunction, WDworddata,  *pRDworddata, toutsec); */
+	MBT_Function8(mbt_link, BT_DIAG_SUB_FUNC_RD_ANS_CTR,	0x0000, &answerCtr, toutsec);
+	MBT_Function8(mbt_link,	BT_DIAG_SUB_FUNC_RD_ANS_ERR,	0x0000, &ansErrCtr,	toutsec);
+	MBT_Function8(mbt_link,	BT_DIAG_SUB_FUNC_RD_SLV_ANS,	0x0000, &slvAnsCtr,	toutsec);
+	MBT_Function8(mbt_link,	BT_DIAG_SUB_FUNC_RD_UNANS,		0x0000, &unAnsCtr,	toutsec);
+	MBT_Function8(mbt_link,	BT_DIAG_SUB_FUNC_RD_SLV_ERR,	0x0000, &slvErrCtr,	toutsec);
+	printf( "Bus communication answers:  %d\n",	answerCtr	);
+	printf( "Answer Errors Sent by cplr: %d\n",	ansErrCtr	);
+	printf( "Slave answers:              %d\n",	slvAnsCtr	);
+	printf( "# of missing slave answers: %d\n",	unAnsCtr	);
+	printf( "# of slave error answers:   %d\n",	slvErrCtr	);
+	return 0;
+}
+
+/* This function uses MBT function 3 to read coupler id from image */
+/* ID must be a pre-malloced buffer with size bytes */
+int	Bk9000_MBT_Read_Cplr_ID(ModBusTCP_Link mbt_link, char * ID, int size, unsigned int toutsec)
+{
+	int	status;
+	int	actual_size;	/* for swab */
+	int	loop;
+	unsigned short int temp_ID[COUPLER_ID_SIZE];
+	unsigned short int * ptemp;
+
+	if(size <= 0)
+		return -1;	/* You must have at least one byte */
+
+	/* We don't explicitly check link here because MBT_FunctionX does it */
+	/* int MBT_Function3(mbt_link, wRIORoffset, RWordCount, *pRWordData, toutsec); */
+	status = MBT_Function3(mbt_link, COUPLER_ID_MREG, COUPLER_ID_SIZE, temp_ID, toutsec);
+	if(status !=0 )
+	{/* Something wrong */
+		return -1;
+	}
+	else
+	{
+		actual_size = 2*min( (size-1)/2, COUPLER_ID_SIZE );
+		swab((char *)temp_ID, ID, actual_size);
+		ptemp = (unsigned short int *)ID;
+		for(loop = 0; loop < actual_size/2; loop++)
+			ptemp[loop] = ntohs(ptemp[loop]);	/* if IOC is big-endian, do nothing, or else swab again */
+		ID[actual_size]='\0';
+		return 0;
+	}
+}
+
+/* This function uses MBT function 3 to read image size info from image */
+/* Then verify if the calculated size is correct */
+int	Bk9000_MBT_Verify_Image_Size(
+	ModBusTCP_Link mbt_link,
+	unsigned short int cal_complex_out_bits,
+	unsigned short int cal_complex_in_bits,
+	unsigned short int cal_digital_out_bits,
+	unsigned short int cal_digital_in_bits,
+	unsigned int toutsec)
+{
+	int	status;
+	int	retStatus	= 0;
+	unsigned short int	temp;
+
+	status = MBT_Function3(mbt_link, COMPLEX_OUT_IMG_BITS_MREG, 1, &temp, toutsec);
+	if(status != 0 || temp != cal_complex_out_bits)
+	{
+		if ( Bk9000_DRV_DEBUG && status == 0 )
+		{
+			printf(	"Bk9000_MBT_Verify_Image_Size: Controller reports %d bits of complex output, not %d\n",
+					temp, cal_complex_out_bits );
+		}
+		retStatus = -1;
+	}
+
+	status = MBT_Function3(mbt_link, COMPLEX_IN_IMG_BITS_MREG, 1, &temp, toutsec);
+	if(status != 0 || temp != cal_complex_in_bits)
+	{
+		if ( Bk9000_DRV_DEBUG && status == 0 )
+		{
+			printf(	"Bk9000_MBT_Verify_Image_Size: Controller reports %d bits of complex  input, not %d\n",
+					temp, cal_complex_in_bits );
+		}
+		retStatus = -1;
+	}
+
+	status = MBT_Function3(mbt_link, DIGITAL_OUT_IMG_BITS_MREG, 1, &temp, toutsec);
+	if(status != 0 || temp != cal_digital_out_bits)
+	{
+		if ( Bk9000_DRV_DEBUG && status == 0 )
+		{
+			printf(	"Bk9000_MBT_Verify_Image_Size: Controller reports %d bits of digital output, not %d\n",
+					temp, cal_digital_out_bits );
+		}
+		retStatus = -1;
+	}
+
+	status = MBT_Function3(mbt_link, DIGITAL_IN_IMG_BITS_MREG, 1, &temp, toutsec);
+	if(status != 0 || temp != cal_digital_in_bits)
+	{
+		if ( Bk9000_DRV_DEBUG && status == 0 )
+		{
+			printf(	"Bk9000_MBT_Verify_Image_Size: Controller reports %d bits of digital  input, not %d\n",
+					temp, cal_digital_in_bits );
+		}
+		retStatus = -1;
+	}
+
+	return retStatus;
+}
+
+/* This function uses MBT function 3 to read memory image based register of Bk9000 coupler */
+/* Now it reads only one word, user might use it as template to build function to read more */
+/* Because we read only one register(word), we don't worry about oversize here */
+int Bk9000_MBT_Read_Cplr_MReg(
+	ModBusTCP_Link			mbt_link,
+	unsigned short int		wRRoffset,
+	unsigned short int	*	pRWordData,
+	unsigned int			toutsec	)
+{
+	int status;
+
+	/* We don't explicitly check link here because MBT_FunctionX does it */
+	/* int MBT_Function3(mbt_link, wRIORoffset, RWordCount, *pRWordData, toutsec); */
+	status = MBT_Function3(mbt_link, wRRoffset, 1, pRWordData, toutsec);
+	return status;
+}
+
+/* This function uses MBT function 16 to write memory image based register of Bk9000 coupler */
+/* Now it writes only one word, user might use it as template to build function to write more */
+/* That is the reason we use function 16 instead of function 6 and use pWWordData to pass even single data */
+/* Because we read only one register(word), we don't worry about oversize here */
+int Bk9000_MBT_Write_Cplr_MReg(ModBusTCP_Link mbt_link, unsigned short int wWRoffset, unsigned short int *pWWordData, unsigned int toutsec)
+{
+	int status;
+
+	/* We don't explicitly check link here because MBT_FunctionX does it */
+	/* int MBT_Function16(mbt_link, wWORoffset, WWordCount, *pWWordData, toutsec); */
+	status = MBT_Function16(mbt_link, wWRoffset, 1, pWWordData, toutsec);
+	return status;
+}
+
+/* Below two functions use MBT function 3 and function 16 to operate the PLC register in Bk9000 coupler */
+/* This allow you read/write all table/register in coupler, we only operate one register(word) here  */
+/* Caution: Don't get confused, I call PLC register here just because it's listed in manual like this way */
+/* There is nothing to do with PLC. It is only for register access purpose */
+/* Because it is accessing coupler register, so terminal number will be always 0 */
+/* If you add terminal number as a parameter, you can use same technique to access terminal registers */
+/* But because we have another faster way to access terminal register, so we define other functions */
+int Bk9000_MBT_Read_Cplr_Reg(ModBusTCP_Link mbt_link, unsigned char table, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec)
+{/* Fininsh me */
+	return 0;
+}
+
+int Bk9000_MBT_Write_Cplr_Reg(ModBusTCP_Link mbt_link, unsigned char table, unsigned char reg, unsigned short int *pWWordData, unsigned int toutsec)
+{/* Finish me */
+	return 0;
+}
+
+/* Below two functions use MBT function 3 and function 16 to operate the terminal registers */
+/* Here we don't use PLC register in coupler, we use C/S byte mapped in image */
+/* To be general, we use two parameters to specify the offset of C/S in input and output image */
+/* But so far as we know, they should be always same */
+/* This allow you read/write all registers in terminal, we only operate one register(word) here  */
+int Bk9000_MBT_Read_Term_Reg(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int wWOoffset, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec)
+{/* Fininsh me */
+        return 0;
+}
+
+int Bk9000_MBT_Write_Term_Reg(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int wWOoffset, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec)
+{/* Finish me */
+        return 0;
+}
+
+/* We need this function to init whole local image of output, it is based on function 3 */
+int Bk9000_MBT_Read_Output_Image(ModBusTCP_Link mbt_link, unsigned short int *pimage, unsigned short int wimg_size, unsigned int toutsec)
+{
+	int status;
+	unsigned int	errorCode;
+	char		errString[40];
+	/* We don't check if woffset is bigger than 0x800 because we don't inlcude the Bk9000_Constant.h */
+	/* We don't explicitly check link here because MBT_FunctionX does it */
+	/* int MBT_Function3(mbt_link, wRIORoffset, RWordCount, *pRWordData, toutsec); */
+	status = MBT_Function3(mbt_link, OUTPUT_IMG_BASE, wimg_size, pimage, toutsec);
+	if(Bk9000_DRV_DEBUG)
+	{
+		if(status != 0)
+		{/* something wrong */
+			MBT_GetLastErr(mbt_link, &errorCode);
+			MBT_ErrCodeToString(errorCode, errString, 40);
+
+			printf("Read first %d words from output image of %s failed!\n", wimg_size, MBT_GetName(mbt_link));
+			printf("Error code 0x%08x, %s\n", errorCode, errString);
+		} 
+	}
+	return status;
+}
+
+/* We try to combine all analong/digital signal operations based on memory image to one function 23 */
+/* pinpimage and poutimage will be always point to the begin of the image */
+/* But if nothing to write, we will use function 4 */
+/* If nothing to read, we will use function 16 */
+int Bk9000_MBT_Sync_Both_Image(
+	ModBusTCP_Link			mbt_link,
+	unsigned short int		wRIoffset,
+	unsigned short int		RWordCount,
+	unsigned short int	*	pinpimage,
+	unsigned short int		wWOoffset,
+	unsigned short int		WWordCount,
+	unsigned short int	*	poutimage,
+	unsigned int			toutsec	)
+{
+	int status=0;
+	unsigned short int cur_wRIoffset, cur_wWOoffset;
+	unsigned short int remain_RWordCount, remain_WWordCount;
+	unsigned short int cur_RWordCount, cur_WWordCount;
+
+	cur_wRIoffset = wRIoffset;
+	cur_wWOoffset = wWOoffset;
+	remain_RWordCount = RWordCount;
+	remain_WWordCount = WWordCount;
+
+	while(TRUE)
+	{
+		if(0==remain_RWordCount && 0==remain_WWordCount)
+		{/* Nothing left to read or write, we successfully done */
+			return 0;
+		}
+		else if(0!=remain_RWordCount && 0==remain_WWordCount)
+		{/* We only have read left */
+			cur_RWordCount = min(remain_RWordCount, MBT_F3_MAX_RWORDCOUNT);
+			/* int MBT_Function3(mbt_link, wRIORoffset, RWordCount, *pRWordData, toutsec); */
+			status = MBT_Function3(mbt_link, cur_wRIoffset+INPUT_IMG_BASE, cur_RWordCount,
+									pinpimage+cur_wRIoffset, toutsec);
+			if(status != 0)
+			{/* something wrong */
+				return -1;
+			}
+			else
+			{/* everything is OK, update all variables */
+				cur_wRIoffset += cur_RWordCount;
+				remain_RWordCount -= cur_RWordCount;
+			}
+		}
+		else if(0==remain_RWordCount && 0!=remain_WWordCount)
+		{/*We only have write left */
+			cur_WWordCount = min(remain_WWordCount, MBT_F16_MAX_WWORDCOUNT);
+			/* int MBT_Function16(mbt_link, wWORoffset, WWordCount, *pWWordData, toutsec); */
+			status = MBT_Function16(mbt_link, cur_wWOoffset+OUTPUT_IMG_BASE, cur_WWordCount,
+									poutimage+cur_wWOoffset, toutsec);
+			if(status != 0)
+			{/* something wrong */
+				return -1;
+			}
+			else
+			{/* everything is OK, update all variables */
+				cur_wWOoffset += cur_WWordCount;
+				remain_WWordCount -= cur_WWordCount;
+			}
+		}
+		else if(0!=remain_RWordCount && 0!=remain_WWordCount)
+		{/* We got to do both read and write */
+			cur_RWordCount = min(remain_RWordCount, MBT_F23_MAX_RWORDCOUNT);
+			cur_WWordCount = min(remain_WWordCount, MBT_F23_MAX_WWORDCOUNT);
+			/*MBT_Function23(mbt_link, wRIRoffset, RWordCount,pRWordData,wWORoffset,WWordCount,pWWordData,toutsec)*/
+			status = MBT_Function23(mbt_link, cur_wRIoffset+INPUT_IMG_BASE, cur_RWordCount, pinpimage+cur_wRIoffset,
+							  cur_wWOoffset+OUTPUT_IMG_BASE, cur_WWordCount, poutimage+cur_wWOoffset, toutsec);
+			if(status != 0)
+			{/* something wrong */
+				return -1;
+			}
+			else
+			{/* everything is OK, update all variables */
+				cur_wRIoffset += cur_RWordCount;
+				remain_RWordCount -= cur_RWordCount;
+				cur_wWOoffset += cur_WWordCount;
+				remain_WWordCount -= cur_WWordCount;
+			}
+		}
+		else
+		{/* We should never ever get here */}
+	}
+}
+
diff --git a/Bk9000_MBTApp/src/Bk9000_SigDef.h b/Bk9000_MBTApp/src/Bk9000_SigDef.h
new file mode 100644
index 0000000..ffc659f
--- /dev/null
+++ b/Bk9000_MBTApp/src/Bk9000_SigDef.h
@@ -0,0 +1,197 @@
+#ifndef	_Bk9000_SIGDEF_H_
+#define	_Bk9000_SIGDEF_H_
+
+#include "Bk9000_MBT_Common.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif  /* __cplusplus */
+
+#if	0	/* Must be 0, just for reference here */
+/******************************************************************************************/
+/* The signal definition, the busterm_string/type and function combination must be unique */
+/* The definition of arg1 -> arg3 is different between different operation                */
+/*	BT_OPTYPE_READ_INPUT_CIMG/BT_OPTYPE_READ_OUTPUT_CIMG/BT_OPTYPE_WRITE_OUTPUT_CIMG: */
+/* word offset to start of terminal, number of words, effective bits                      */
+/*	BT_OPTYPE_READ_INPUT_DIMG/BT_OPTYPE_READ_OUTPUT_DIMG/BT_OPTYPE_WRITE_OUTPUT_DIMG: */
+/* bit offset to start of terminal, number of bits, 0                                     */
+/*	BT_OPTYPE_READ_CPLR_MREG/BT_OPTYPE_WRITE_CPLR_MREG:                               */
+/* word offset in image above COUPLER_MREG_START, Reset to apply, 0?                      */
+/*	BT_OPTYPE_READ_CPLR_REG/BT_OPTYPE_WRITE_CPLR_REG:                                 */
+/* table, register, Reset to apply?                                                       */
+/*      BT_OPTYPE_CPLR_DIAG                                                               */
+/* sub-function, 0, 0                                                                     */
+/*	BT_OPTYPE_READ_TERM_REG/BT_OPTYPE_WRITE_TERM_REG:                                 */
+/* C/S word offset in complex input image, C/S word offset in complex output image, reg   */ 
+/******************************************************************************************/
+typedef	struct BUSTERM_SIG_PREDEF
+{/* We use this one to define signals */
+	UINT8				busterm_string[8];		/* String name of bus terminal, must be 6 characters */
+	E_BUSTERM_TYPE			busterm_type;			/* number name of bus terminal */
+	UINT8				function[MAX_CA_STRING_SIZE];	/* Function name, should be the third part of INP/OUT field */
+	E_BUSTERM_OPTYPE		busterm_optype;			/* The operation type, one of above list */
+	E_EPICS_RTYPE			epics_rtype;			/* EPICS record type to use this signal, EPICS_RTYP_NONE means not for EPICS or waive check */
+	E_DATA_TYPE			data_type;
+	UINT32				arg1;
+	UINT32				arg2;
+	UINT32				arg3;
+}	BUSTERM_SIG_PREDEF;
+#endif
+
+/* Most of signals could be processed by default function, but if you have anything longer than 16 bits, you might need your own function */
+static	BUSTERM_SIG_PREDEF	busterm_sig_predef[]= {
+	{"KL1104", BT_TYPE_KL1104, "R_DIG_IN_1",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    0, 1, 0},
+	{"KL1104", BT_TYPE_KL1104, "R_DIG_IN_2",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    1, 1, 0},
+	{"KL1104", BT_TYPE_KL1104, "R_DIG_IN_3",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    2, 1, 0},
+	{"KL1104", BT_TYPE_KL1104, "R_DIG_IN_4",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    3, 1, 0},
+
+	{"KL1002", BT_TYPE_KL1002, "R_DIG_IN_1",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    0, 1, 0},
+	{"KL1002", BT_TYPE_KL1002, "R_DIG_IN_2",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    1, 1, 0},
+
+	{"KL1124", BT_TYPE_KL1124, "R_DIG_IN_1",		BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI,	DTYP_UINT16,	0, 1, 0},
+	{"KL1124", BT_TYPE_KL1124, "R_DIG_IN_2",		BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI,	DTYP_UINT16,	1, 1, 0},
+	{"KL1124", BT_TYPE_KL1124, "R_DIG_IN_3",		BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI,	DTYP_UINT16,	2, 1, 0},
+	{"KL1124", BT_TYPE_KL1124, "R_DIG_IN_4",		BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI,	DTYP_UINT16,	3, 1, 0},
+
+	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_1",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    0, 1, 0},
+	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_2",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    1, 1, 0},
+	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_3",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    2, 1, 0},
+	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_4",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    3, 1, 0},
+	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_5",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    4, 1, 0},
+	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_6",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    5, 1, 0},
+	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_7",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    6, 1, 0},
+	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_8",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    7, 1, 0},
+
+	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_1",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    0, 1, 0},
+	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_2",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    1, 1, 0},
+	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_3",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    2, 1, 0},
+	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_4",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    3, 1, 0},
+	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_5",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    4, 1, 0},
+	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_6",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    5, 1, 0},
+	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_7",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    6, 1, 0},
+	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_8",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    7, 1, 0},
+
+	{"KL2012", BT_TYPE_KL2012, "W_DIG_OUT_1",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	0, 1, 0},
+	{"KL2012", BT_TYPE_KL2012, "W_DIG_OUT_2",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	1, 1, 0},
+
+	{"KL2114", BT_TYPE_KL2114, "W_DIG_OUT_1",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	0, 1, 0},
+	{"KL2114", BT_TYPE_KL2114, "W_DIG_OUT_2",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	1, 1, 0},
+	{"KL2114", BT_TYPE_KL2114, "W_DIG_OUT_3",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	2, 1, 0},
+	{"KL2114", BT_TYPE_KL2114, "W_DIG_OUT_4",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	3, 1, 0},
+
+	{"KL2124", BT_TYPE_KL2124, "W_DIG_OUT_1",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	0, 1, 0},
+	{"KL2124", BT_TYPE_KL2124, "W_DIG_OUT_2",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	1, 1, 0},
+	{"KL2124", BT_TYPE_KL2124, "W_DIG_OUT_3",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	2, 1, 0},
+	{"KL2124", BT_TYPE_KL2124, "W_DIG_OUT_4",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	3, 1, 0},
+
+	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    0, 1, 0},
+	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    1, 1, 0},
+	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_3",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    2, 1, 0},
+	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_4",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    3, 1, 0},
+	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_5",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    4, 1, 0},
+	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_6",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    5, 1, 0},
+	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_7",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    6, 1, 0},
+	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_8",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    7, 1, 0},
+
+	{"KL2808", BT_TYPE_KL2808, "W_DIG_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    0, 1, 0},
+	{"KL2808", BT_TYPE_KL2808, "W_DIG_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    1, 1, 0},
+	{"KL2808", BT_TYPE_KL2808, "W_DIG_OUT_3",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    2, 1, 0},
+	{"KL2808", BT_TYPE_KL2808, "W_DIG_OUT_4",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    3, 1, 0},
+	{"KL2808", BT_TYPE_KL2808, "W_DIG_OUT_5",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    4, 1, 0},
+	{"KL2808", BT_TYPE_KL2808, "W_DIG_OUT_6",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    5, 1, 0},
+	{"KL2808", BT_TYPE_KL2808, "W_DIG_OUT_7",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    6, 1, 0},
+	{"KL2808", BT_TYPE_KL2808, "W_DIG_OUT_8",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    7, 1, 0},
+
+
+	{"KL2502", BT_TYPE_KL2502, "W_DUTY_CYCLE_1",    BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 0},
+	{"KL2502", BT_TYPE_KL2502, "W_DUTY_CYCLE_2",    BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    3, 1, 0},
+	{"KL2502", BT_TYPE_KL2502, "W_PERIOD",    		BT_OPTYPE_WRITE_TERM_REG,    	EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 0},
+
+	{"KL2512", BT_TYPE_KL2512, "W_DUTY_CYCLE_1",    BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 0},
+	{"KL2512", BT_TYPE_KL2512, "W_DUTY_CYCLE_2",    BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    3, 1, 0},
+	{"KL2512", BT_TYPE_KL2512, "W_PERIOD",    		BT_OPTYPE_WRITE_TERM_REG,    	EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 0},
+
+	{"KL2622", BT_TYPE_KL2622, "W_DIG_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    0, 1, 0},
+	{"KL2622", BT_TYPE_KL2622, "W_DIG_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    1, 1, 0},
+
+	{"KL3064", BT_TYPE_KL3064, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    1, 1, 15},/* 12 bits << 3 */
+	{"KL3064", BT_TYPE_KL3064, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    3, 1, 15},/* 12 bits << 3 */
+	{"KL3064", BT_TYPE_KL3064, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    5, 1, 15},/* 12 bits << 3 */
+	{"KL3064", BT_TYPE_KL3064, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    7, 1, 15},/* 12 bits << 3 */
+
+	{"KL3102", BT_TYPE_KL3102, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
+	{"KL3102", BT_TYPE_KL3102, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
+
+	/* KL3162 is single-ended while KL3102 is bipolar */
+	/* channel 1, terminals 1 and 2 */
+	{"KL3162", BT_TYPE_KL3162, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    1, 1, 16},
+	/* channel 2, terminals 5 and 6 */
+	{"KL3162", BT_TYPE_KL3162, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    3, 1, 16},
+
+    {"KL3202", BT_TYPE_KL3202, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
+    {"KL3202", BT_TYPE_KL3202, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
+
+	/* see KL3204.pdf */
+	/* channel 1, terminals 1 and 2 */
+    {"KL3204", BT_TYPE_KL3204, "R_ANA_IN_1",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	1, 1, 16},
+	/* channel 2, terminals 5 and 6 */
+	{"KL3204", BT_TYPE_KL3204, "R_ANA_IN_2",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	3, 1, 16},
+	/* channel 3, terminals 3 and 4 */
+    {"KL3204", BT_TYPE_KL3204, "R_ANA_IN_3",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	5, 1, 16},
+	/* channel 4, terminal 7 and 8 */
+	{"KL3204", BT_TYPE_KL3204, "R_ANA_IN_4",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	7, 1, 16}, 
+
+
+    {"KL3222", BT_TYPE_KL3222, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
+    {"KL3222", BT_TYPE_KL3222, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
+
+	{"KL3312", BT_TYPE_KL3312, "R_ANA_IN_1",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	1, 1, 16},
+	{"KL3312", BT_TYPE_KL3312, "R_ANA_IN_2",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	3, 1, 16},
+	
+    {"KL3314", BT_TYPE_KL3314, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
+	{"KL3314", BT_TYPE_KL3314, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
+	{"KL3314", BT_TYPE_KL3314, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    5, 1, 16},
+	{"KL3314", BT_TYPE_KL3314, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    7, 1, 16},
+
+	{"KL3404", BT_TYPE_KL3404, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 12},
+	{"KL3404", BT_TYPE_KL3404, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 12},
+	{"KL3404", BT_TYPE_KL3404, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    5, 1, 12},
+	{"KL3404", BT_TYPE_KL3404, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    7, 1, 12},
+
+	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 15},/* 12 bits << 3 */
+	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 15},/* 12 bits << 3 */
+	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    5, 1, 15},/* 12 bits << 3 */
+	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    7, 1, 15},/* 12 bits << 3 */
+	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_5",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    9, 1, 15},/* 12 bits << 3 */
+	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_6",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    11, 1, 15},/* 12 bits << 3 */
+	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_7",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    13, 1, 15},/* 12 bits << 3 */
+	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_8",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    15, 1, 15},/* 12 bits << 3 */
+
+	{"KL3464", BT_TYPE_KL3464, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 12},
+	{"KL3464", BT_TYPE_KL3464, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 12},
+	{"KL3464", BT_TYPE_KL3464, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    5, 1, 12},
+	{"KL3464", BT_TYPE_KL3464, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    7, 1, 12},
+
+	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    1, 1, 15},/* 12 bits << 3 */
+	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    3, 1, 15},/* 12 bits << 3 */
+	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    5, 1, 15},/* 12 bits << 3 */
+	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    7, 1, 15},/* 12 bits << 3 */
+	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_5",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    9, 1, 15},/* 12 bits << 3 */
+	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_6",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    11, 1, 15},/* 12 bits << 3 */
+	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_7",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    13, 1, 15},/* 12 bits << 3 */
+	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_8",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    15, 1, 15},/* 12 bits << 3 */
+
+	{"KL4002", BT_TYPE_KL4002, "W_ANA_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 15},/* 12 bits << 3 */
+	{"KL4002", BT_TYPE_KL4002, "W_ANA_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    3, 1, 15},/* 12 bits << 3 */
+
+	{"KL4132", BT_TYPE_KL4132, "W_ANA_OUT_1",	BT_OPTYPE_WRITE_OUTPUT_CIMG,	EPICS_RTYPE_AO,	DTYP_SINT16,	1, 1, 16},
+	{"KL4132", BT_TYPE_KL4132, "W_ANA_OUT_2",	BT_OPTYPE_WRITE_OUTPUT_CIMG,	EPICS_RTYPE_AO,	DTYP_SINT16,	3, 1, 16}
+};
+
+#define	N_BT_SIG_PREDEF	(sizeof(busterm_sig_predef)/sizeof(BUSTERM_SIG_PREDEF))
+
+#ifdef __cplusplus
+}
+#endif  /* __cplusplus */
+
+#endif
diff --git a/Bk9000_MBTApp/src/Bk9000_Watchdog.cpp b/Bk9000_MBTApp/src/Bk9000_Watchdog.cpp
new file mode 100644
index 0000000..1d8e94c
--- /dev/null
+++ b/Bk9000_MBTApp/src/Bk9000_Watchdog.cpp
@@ -0,0 +1,208 @@
+#include "Bk9000_MBT_Common.h"
+#include "Bk9000_Watchdog.h"
+
+
+class	BK_Coupler
+{
+public:
+	BK_Coupler(	const char *	pNameOrIpAddr )
+		:	m_fCreated(		FALSE		),
+			m_pModBusLink(	NULL		)
+	{
+		if ( pNameOrIpAddr == NULL )
+			return;
+
+		Bk9000_COUPLER	*	pCplr	= NULL;
+		pCplr	= Bk9000_Get_Coupler_By_Name( pNameOrIpAddr );
+		if ( pCplr != NULL )
+		{
+			m_pModBusLink	= pCplr->mbt_link;
+			return;
+		}
+
+		m_pModBusLink = MBT_Init( "BH1", pNameOrIpAddr, 502, 0xFF );
+		if ( !m_pModBusLink )
+			return;
+
+		if ( MBT_Connect( m_pModBusLink, 3 ) < 0 )
+		{
+			MBT_Release( m_pModBusLink );
+			m_pModBusLink	= NULL;
+			return;
+		}
+		m_fCreated	= true;
+	}
+
+	virtual ~BK_Coupler( )
+	{
+		if ( m_fCreated && m_pModBusLink )
+		{
+			MBT_Release( m_pModBusLink );
+			m_pModBusLink	= NULL;
+		}
+	}
+
+	ModBusTCP_Link	GetModBusLink( ) const
+	{
+		return m_pModBusLink;
+	}
+
+private:
+	bool					m_fCreated;
+	struct ModBusTCP_CB	*	m_pModBusLink;
+};
+
+extern "C" unsigned int BK_CheckWatchdog( char * pNameOrIpAddr, unsigned int fQuiet )
+{
+	unsigned short			watchdogElapsed	= FALSE;
+	BK_Coupler				bkCoupler(	pNameOrIpAddr ); 
+	ModBusTCP_Link			mbt_link		= bkCoupler.GetModBusLink();
+
+	if ( mbt_link )
+		watchdogElapsed	= MBT_CheckWatchdog( mbt_link, fQuiet );
+	return watchdogElapsed;
+}
+
+extern "C" unsigned int MBT_CheckWatchdog( ModBusTCP_Link mbt_link, unsigned int fQuiet )
+{
+	unsigned short			couplerStatus	= 0;
+	unsigned short			watchdogElapsed	= FALSE;
+	const unsigned short	timeoutSec		= 2;
+
+	MBT_Function3( mbt_link, BK_REG_COUPLER_STATUS, 1, &couplerStatus, timeoutSec );
+	if ( couplerStatus & BK_STATUS_WATCHDOG_ELAPSED )
+		watchdogElapsed	= TRUE;
+	if ( !fQuiet )
+	{
+		printf( "Watchdog status is %s.\n", ( watchdogElapsed ? "ELAPSED" : "OK" ) );
+	}
+
+	return watchdogElapsed;
+}
+
+
+/*
+ *	BK_SetWatchdogType
+ *	Sets the type to either R/W or Write mode.
+ *	R/W mode resets the watchdog timer on either a read or a write telegram.
+ *	Write mode resets the watchdog timer only on write telegrams.
+ *	(A telegram is a message reading or writing a process value)
+ *	tyWatchdog = 1 for R/W Telegram Mode
+ *	tyWatchdog = 0 for Write Telegram Mode
+ */
+extern "C" int BK_SetWatchdogType( char * pNameOrIpAddr, unsigned int tyWatchdog )
+{
+	int						result		= 0;
+	BK_Coupler				bkCoupler(	pNameOrIpAddr ); 
+	ModBusTCP_Link			mbt_link	= bkCoupler.GetModBusLink();
+
+	if ( mbt_link )
+		result = MBT_SetWatchdogType( mbt_link, tyWatchdog );
+
+	return result;
+}
+
+
+/*
+ *	MBT_SetWatchdogType
+ *	Sets the type to either R/W or Write mode.
+ *	R/W mode resets the watchdog timer on either a read or a write telegram.
+ *	Write mode resets the watchdog timer only on write telegrams.
+ *	(A telegram is a message reading or writing a process value)
+ *	tyWatchdog = 1 for R/W Telegram Mode
+ *	tyWatchdog = 0 for Write Telegram Mode
+ */
+extern "C" int MBT_SetWatchdogType( ModBusTCP_Link mbt_link, unsigned int tyWatchdog )
+{
+	const unsigned short	timeoutSec	= 2;
+
+	MBT_Function6(mbt_link, BK_REG_WATCHDOG_TYPE, tyWatchdog, timeoutSec );
+	printf( "Watchdog type is now %s.\n", ( tyWatchdog ? "R/W Telegram" : "Write Telegram" ) );
+
+	return 0;
+}
+
+
+extern "C" int BK_ResetWatchdog( char * pNameOrIpAddr )
+{
+	int						result		= 0;
+	BK_Coupler				bkCoupler(	pNameOrIpAddr ); 
+	ModBusTCP_Link			mbt_link	= bkCoupler.GetModBusLink();
+
+	if ( mbt_link )
+	{
+		result = MBT_ResetWatchdog( mbt_link );
+		MBT_CheckWatchdog( mbt_link, FALSE );
+	}
+
+	return result;
+}
+
+
+extern "C" int MBT_ResetWatchdog( ModBusTCP_Link mbt_link )
+{
+	const unsigned short	timeoutSec	= 2;
+
+	MBT_Function6(mbt_link, BK_REG_WATCHDOG_RESET, BK_WATCHDOG_RESET_WORD_0, timeoutSec);
+	MBT_Function6(mbt_link, BK_REG_WATCHDOG_RESET, BK_WATCHDOG_RESET_WORD_1, timeoutSec);
+
+	return 0;
+}
+
+
+extern "C" int BK_SetWatchdogTimeout( char * pNameOrIpAddr, unsigned int timeout )
+{
+	int						result		= 0;
+	BK_Coupler				bkCoupler(	pNameOrIpAddr ); 
+	ModBusTCP_Link			mbt_link	= bkCoupler.GetModBusLink();
+
+	if ( mbt_link )
+		result = MBT_SetWatchdogTimeout( mbt_link, timeout );
+
+	return result;
+}
+
+
+extern "C" int MBT_SetWatchdogTimeout( ModBusTCP_Link mbt_link, unsigned int timeout )
+{
+	const unsigned short	timeoutSec	= 2;
+	int						result		= 0;
+
+	result = MBT_ResetWatchdog( mbt_link );
+	if ( result < 0 )
+	{
+		errPrintf( result, __FILE__, __LINE__, "MBT_SetWatchdogTimeout: Unable to reset watchdog!\n" );
+		return result;
+	}
+	result = MBT_Function6(mbt_link, BK_REG_WATCHDOG_TIMEOUT, timeout, timeoutSec);
+	if ( result < 0 )
+	{
+		errPrintf( result, __FILE__, __LINE__, "MBT_SetWatchdogTimeout: Error setting timeout!\n" );
+	}
+	else
+	{
+		if ( timeout == 0 )
+		{
+			printf( "Watchdog timeout is now disabled.\n" );
+			printf( "Call BK_SetWatchdogTimeout() to enable.\n\n" );
+		}
+		else
+		{
+			printf( "Watchdog timeout is now %dms.\n\n", timeout );
+		}
+	}
+
+	return result;
+}
+
+
+extern "C" int BK_DisableWatchdog( char * pNameOrIpAddr )
+{
+	return BK_SetWatchdogTimeout( pNameOrIpAddr, 0 );
+}
+
+
+extern "C" int MBT_DisableWatchdog( ModBusTCP_Link mbt_link )
+{
+	return MBT_SetWatchdogTimeout( mbt_link, 0 );
+}
diff --git a/Bk9000_MBTApp/src/Bk9000_Watchdog.h b/Bk9000_MBTApp/src/Bk9000_Watchdog.h
new file mode 100644
index 0000000..c23c693
--- /dev/null
+++ b/Bk9000_MBTApp/src/Bk9000_Watchdog.h
@@ -0,0 +1,105 @@
+#ifndef		_BK9000_WATCHDOG_H_
+#define		_BK9000_WATCHDOG_H_
+
+#ifdef __cplusplus
+extern "C" {
+#endif  /* __cplusplus */
+
+/**
+ * These Beckhoff registers are 16 bits wide
+ */
+static const unsigned short int	BK_REG_COUPLER_STATUS		=	0x100C;	/* Read only */
+static const unsigned short int	BK_REG_WATCHDOG_CURTIME		=	0x1020;	/* Read only */
+static const unsigned short int	BK_REG_WATCHDOG_TIMEOUT		=	0x1120;
+static const unsigned short int	BK_REG_WATCHDOG_RESET		=	0x1121;
+static const unsigned short int	BK_REG_WATCHDOG_TYPE		=	0x1122;
+
+static const unsigned short int	BK_STATUS_WATCHDOG_ELAPSED	=	0x8000;
+static const unsigned short int	BK_STATUS_CONFIG_ERROR		=	0x0002;
+static const unsigned short int	BK_STATUS_BUS_TERM_ERROR	=	0x0001;
+
+static const unsigned short int	BK_WATCHDOG_RESET_WORD_0	=	0xBECF;
+static const unsigned short int	BK_WATCHDOG_RESET_WORD_1	=	0xAFFE;
+
+
+/**
+ *	BK_CheckWatchdog
+ *	Checks the status of the watchdog timer.
+ *	If fQuiet is FALSE or 0, it prints status to stdout
+ *	Returns TRUE if watchdog has elapsed, FALSE if OK
+ */
+extern unsigned int BK_CheckWatchdog( char * pNameOrIpAddr, unsigned int fQuiet );
+
+/**
+ *	MBT_CheckWatchdog
+ *	Checks the status of the watchdog timer.
+ *	If fQuiet is FALSE or 0, it prints status to stdout
+ *	Returns TRUE if watchdog has elapsed, FALSE if OK
+ */
+extern unsigned int MBT_CheckWatchdog( ModBusTCP_Link mbt_link, unsigned int fQuiet );
+
+/**
+ *	BK_SetWatchdogType
+ *	Sets the type to either R/W or Write mode.
+ *	R/W mode resets the watchdog timer on either a read or a write telegram.
+ *	Write mode resets the watchdog timer only on write telegrams.
+ *	(A telegram is a message reading or writing a process value);
+ *	tyWatchdog = 1 for R/W Telegram Mode
+ *	tyWatchdog = 0 for Write Telegram Mode
+ */
+extern int BK_SetWatchdogType( char * pNameOrIpAddr, unsigned int tyWatchdog );
+
+/**
+ *	MBT_SetWatchdogType
+ *	Sets the type to either R/W or Write mode.
+ *	R/W mode resets the watchdog timer on either a read or a write telegram.
+ *	Write mode resets the watchdog timer only on write telegrams.
+ *	(A telegram is a message reading or writing a process value);
+ *	tyWatchdog = 1 for R/W Telegram Mode
+ *	tyWatchdog = 0 for Write Telegram Mode
+ */
+extern int MBT_SetWatchdogType( ModBusTCP_Link mbt_link, unsigned int tyWatchdog );
+
+/**
+ *	BK_ResetWatchdog
+ *	Resets the watchdog timer
+ */
+extern int BK_ResetWatchdog( char * pNameOrIpAddr );
+
+/**
+ *	MBT_ResetWatchdog
+ *	Resets the watchdog timer
+ */
+extern int MBT_ResetWatchdog( ModBusTCP_Link mbt_link );
+
+/**
+ *	BK_SetWatchdogTimer
+ *	Set the watchdog timer to the desired timeout in ms
+ */
+extern int BK_SetWatchdogTimeout( char * pNameOrIpAddr, unsigned int timeout );
+
+/**
+ *	MBT_SetWatchdogTimer
+ *	Set the watchdog timer to the desired timeout in ms
+ */
+extern int MBT_SetWatchdogTimeout( ModBusTCP_Link mbt_link, unsigned int timeout );
+
+/**
+ *	BK_DisableWatchdog
+ *	Disable the watchdog timer by setting the timeout to zero
+ *	To re-enable, use BK_SetWatchdogTimeout()
+ */
+extern int BK_DisableWatchdog( char * pNameOrIpAddr );
+
+/**
+ *	MBT_DisableWatchdog
+ *	Disable the watchdog timer by setting the timeout to zero
+ *	To re-enable, use MBT_SetWatchdogTimeout()
+ */
+extern int MBT_DisableWatchdog( ModBusTCP_Link mbt_link );
+
+#ifdef __cplusplus
+}
+#endif  /* __cplusplus */
+
+#endif	/*	_BK9000_WATCHDOG_H_	*/
diff --git a/Bk9000_MBTApp/src/Makefile b/Bk9000_MBTApp/src/Makefile
new file mode 100644
index 0000000..e8460e2
--- /dev/null
+++ b/Bk9000_MBTApp/src/Makefile
@@ -0,0 +1,87 @@
+TOP=../..
+
+include $(TOP)/configure/CONFIG
+#----------------------------------------
+#  ADD MACRO DEFINITIONS AFTER THIS LINE
+#=============================
+#==================================================
+# The following will built and instaled:
+# dbd/Bk9000_MBT.dbd
+# include/Bk9000_MBT.h
+# bin/<arch>/Bk9000_MBTLib.munch
+# lib/<arch>/libBk9000_MBT.a
+#=============================
+# build an ioc application
+
+# This is what we will be building from here:
+# create library for OSI type driver
+LIBRARY_IOC += Bk9000_MBT
+
+# This is for vxWorks specific drivers.
+# Don't forget to substitute your driver name.
+# create library for linking will install in <lib>
+# LIBRARY_vxWorks += Bk9000_MBT
+
+INC += Bk9000_Watchdog.h
+
+# The following line makes the Bk9000_MBT.h file
+# This is needed for Record support. So uncomment
+# the following line if you are making record support.
+##DBDINC += Bk9000_MBT
+# Bk9000_MBT.dbd will be created from Bk9000_MBTInclude.dbd
+DBD += Bk9000_MBT.dbd
+
+# Add locally compiled object code
+Bk9000_MBT_SRCS += Bk9000_MBT_Ext.c
+Bk9000_MBT_SRCS += Bk9000_Watchdog.cpp
+Bk9000_MBT_SRCS += drvBk9000_MBT.c
+Bk9000_MBT_SRCS += devBk9000Info.c
+Bk9000_MBT_SRCS += devKL1104.c
+Bk9000_MBT_SRCS += devKL1002.c
+Bk9000_MBT_SRCS += devKL1124.c
+Bk9000_MBT_SRCS += devKL1408.c
+Bk9000_MBT_SRCS += devKL1488.c
+Bk9000_MBT_SRCS += devKL2012.c
+Bk9000_MBT_SRCS += devKL2114.c
+Bk9000_MBT_SRCS += devKL2124.c
+Bk9000_MBT_SRCS += devKL2408.c
+Bk9000_MBT_SRCS += devKL2502.c
+Bk9000_MBT_SRCS += devKL2808.c
+Bk9000_MBT_SRCS += devKL2512.c
+Bk9000_MBT_SRCS += devKL2622.c
+Bk9000_MBT_SRCS += devKL3064.c
+Bk9000_MBT_SRCS += devKL3102.c
+Bk9000_MBT_SRCS += devKL3162.c
+Bk9000_MBT_SRCS += devKL3202.c
+Bk9000_MBT_SRCS += devKL3204.c
+Bk9000_MBT_SRCS += devKL3222.c
+Bk9000_MBT_SRCS += devKL3312.c
+Bk9000_MBT_SRCS += devKL3314.c
+Bk9000_MBT_SRCS += devKL3404.c
+Bk9000_MBT_SRCS += devKL3408.c
+Bk9000_MBT_SRCS += devKL3464.c
+Bk9000_MBT_SRCS += devKL3468.c
+Bk9000_MBT_SRCS += devKL4002.c
+Bk9000_MBT_SRCS += devKL4132.c
+Bk9000_MBT_SRCS += drvBk9000_MBTRegister.cpp
+
+#Adding support for LCLS Analog Support 
+DBD +=  analogSub.dbd
+Bk9000_MBT_SRCS += analogIn.c
+
+# The following builds sncExample as a component of Bk9000_MBT
+# Also in Bk9000_MBTInclude.dbd uncomment #registrar(sncExampleRegistrar)
+#Bk9000_MBT_SRCS += sncExample.stt
+#Bk9000_MBT_LIBS += seq pv
+
+# The PROD_IOC_vxWorks is built from the same srcs and must include
+# the registry routines.
+Bk9000_MBTLib_SRCS += $(Bk9000_MBT_SRCS)
+Bk9000_MBTLib_SRCS += Bk9000_MBT_registerRecordDeviceDriver.cpp
+
+#===========================
+
+include $(TOP)/configure/RULES
+#----------------------------------------
+#  ADD RULES AFTER THIS LINE
+
diff --git a/Bk9000_MBTApp/src/analogIn.c b/Bk9000_MBTApp/src/analogIn.c
new file mode 100644
index 0000000..4914593
--- /dev/null
+++ b/Bk9000_MBTApp/src/analogIn.c
@@ -0,0 +1,94 @@
+/*
+ * file:                analogIn.c
+ * purpose:             subroutine to perform calculation for analog input signal. calculation
+ *                      depends on type of signal. 
+ *
+ * created:             02-Sep-2009
+ *
+ * revision history:
+ *   02-Sep-2009        Sonya Hoobler             initial version
+ *
+ * remarks:             Possible signal types are:
+ *                        1  linear scaling
+ *                        2  log scaling
+ *                        3  phase mixer
+ *
+ *                      If type=1, perform linear scaling, write result to val
+ *                      If type=2, perform log scaling, write result to val
+ *                      If type 3, perform phase mixer conversion, write result to val
+*                                                                             
+ *                       Inputs:                                                                      
+ *                       a = type                                                             
+ *                       b = raw signal          
+ *                       c = offs for linear, coef for log                                            
+ *                       d = coef for linear, coef of exponent for log                                
+ *                       e = val of associated device (phase mixer only)
+ *                       f = sign (1 or -1) (phase mixer only)
+ */
+
+#include <stdio.h>
+#include <math.h>
+
+#include <registryFunction.h>
+#include <epicsExport.h>
+#include <subRecord.h>
+
+
+/* Add MACRO Definitions for min/max */
+/* Needed as of EPICS BASE R3-14-11 */
+/* provide an macro that implements max() and min() */
+
+#ifndef __cplusplus
+#ifndef max
+#define max(a,b) (((a)>(b)) ? (a) : (b))
+#endif
+
+#ifndef min
+#define min(a,b) (((a)<(b)) ? (a) : (b))
+#endif
+#endif
+
+
+static long
+InitAnalogCalc( subRecord *psub)
+        {
+
+        return 0;
+        }
+
+static long
+AnalogCalc( subRecord *psub)
+        {
+        int type;
+        float t;
+        float b;
+        float c;
+        float d;
+        float e;
+        float f;
+
+        if( psub == NULL)
+           return 0;
+
+        type = psub->a;
+        b = psub->b;
+        c = psub->c;
+        d = psub->d;
+        e = psub->e;
+        f = psub->f;
+
+        if(type == 1) /* linear scaling */
+           psub->val = c + d*b;
+
+        if(type == 2) /* log scaling */
+           psub->val = c * (pow(10,d*b));
+
+        if(type == 3) /* phase mixer */ 
+           {
+           t = min(max(d*0.01745329*b,-1.2),1.2); 
+           psub->val = c + 57.29577*(t + 0.1667*pow(t,5)) + f*e;
+           }
+          return 0;
+        }
+epicsRegisterFunction(InitAnalogCalc);
+epicsRegisterFunction(AnalogCalc);
diff --git a/Bk9000_MBTApp/src/analogSub.dbd b/Bk9000_MBTApp/src/analogSub.dbd
new file mode 100644
index 0000000..09f1779
--- /dev/null
+++ b/Bk9000_MBTApp/src/analogSub.dbd
@@ -0,0 +1,2 @@
+function(InitAnalogCalc)
+function(AnalogCalc)
diff --git a/Bk9000_MBTApp/src/devBk9000Info.c b/Bk9000_MBTApp/src/devBk9000Info.c
new file mode 100644
index 0000000..7c40953
--- /dev/null
+++ b/Bk9000_MBTApp/src/devBk9000Info.c
@@ -0,0 +1,393 @@
+/***************************************************************************
+ *   File:		devBk9000Info.c
+ *   Author:		Sheng Peng
+ *   Institution:	Oak Ridge National Laboratory / SNS Project
+ *   Date:		12/2004
+ *   Version:		1.1
+ *
+ *   EPICS device layer support for Beckhoff Bk9000 Coupler static info
+ *
+ *   Hardware addressing:	
+ *   @cplrname:slot:func
+ *   For most of records, slot will be 0, so far only for function "BTTYPE",
+ *   we need slot not 0.
+ ****************************************************************************/
+
+/*	Include header files	*/
+#include <Bk9000_MBT_Common.h>
+#include <longinRecord.h>
+#include <mbbiRecord.h>
+#include <stringinRecord.h>
+
+/* The infomation we try to get here either static after initialization or atomic */
+/* So we don't need semaphore protection */
+/* Some info matters coupler ready, some info doesn't */
+extern  SINT32  Bk9000_DEV_DEBUG;
+
+/*	define function IDs, some of functions need slot	*/
+typedef enum {
+	Bk9000Info_LI_COWCNT,
+	Bk9000Info_LI_CIWCNT,
+	Bk9000Info_LI_DOBCNT,
+	Bk9000Info_LI_DIBCNT,
+	Bk9000Info_LI_BTTYPE,	/* slot could be vary */
+	Bk9000Info_LI_NOFCONN,
+	Bk9000Info_LI_NOFEXCP,
+	Bk9000Info_LI_NOFPKTS,
+	Bk9000Info_LI_NOFSIGS,
+	Bk9000Info_LI_OPTHRDID,
+	Bk9000Info_MBBI_CPLRRDY,
+	Bk9000Info_MBBI_LINKSTAT,
+	Bk9000Info_SI_CPLRNAME,
+	Bk9000Info_SI_CPLRIP,
+	Bk9000Info_SI_TLSTCONN,
+	Bk9000Info_SI_TSETCONN,
+	Bk9000Info_SI_TLASTTRY,
+	Bk9000Info_SI_CPLRID,
+	Bk9000Info_SI_OPTHRDNM
+}	E_Bk9000Info_FUNC;
+
+typedef struct	Bk9000_INFO_REQ
+{
+	Bk9000_COUPLER		* pcoupler;
+	UINT16			slot;
+	E_Bk9000Info_FUNC	funcid;
+}	Bk9000_INFO_REQ;
+
+/* This function will be called by all Bk9000Info device support */
+static int Bk9000_Info_Req_Init(dbCommon * precord, E_EPICS_RTYPE epics_rtype, char * ioString)
+{
+	SINT32				count;
+	char				cplrname[MAX_CA_STRING_SIZE];
+	char				func[MAX_CA_STRING_SIZE];
+	SINT32				slotnum;
+	Bk9000_COUPLER	*	pcoupler;
+	E_Bk9000Info_FUNC	functionID;
+	Bk9000_INFO_REQ	*	pinforeq;
+
+	if(precord == NULL)
+	{
+		errlogPrintf("No legal record pointer in Bk9000_Info_Req_Init!\n");
+		return -1;
+	}
+
+	if(ioString == NULL)
+	{
+		errlogPrintf("No INP/OUT field for record %s!\n", precord->name);
+		return -1;
+	}
+
+	count = sscanf(ioString, "%[^:]:%i:%[^:]", cplrname, &slotnum, func);
+	if (count != 3)
+	{
+		errlogPrintf("Record %s INP/OUT string %s format is illegal!\n", precord->name, ioString);
+		return -1;
+	}
+
+	pcoupler = Bk9000_Get_Coupler_By_Name(cplrname);
+	if(pcoupler == NULL)
+	{
+		errlogPrintf("Can't find coupler %s for record %s!\n", cplrname, precord->name);
+		return -1;
+	}
+
+	/* For most of records, the slot number doesn't matter and should be 0, but we don't enforce */
+	if( slotnum < 0 || slotnum > MAX_NUM_OF_BUSTERM )
+	{
+		errlogPrintf("Terminal must be on slot 1~%d for record %s!\n", MAX_NUM_OF_BUSTERM, precord->name);
+		return -1;
+	}
+
+	switch(epics_rtype)
+	{
+	case EPICS_RTYPE_LI:
+		if( 0 == strcmp(func, "COWCNT") )	functionID = Bk9000Info_LI_COWCNT;
+		else if( 0 == strcmp(func, "CIWCNT") )	functionID = Bk9000Info_LI_CIWCNT;
+		else if( 0 == strcmp(func, "DOBCNT") )	functionID = Bk9000Info_LI_DOBCNT;
+		else if( 0 == strcmp(func, "DIBCNT") )	functionID = Bk9000Info_LI_DIBCNT;
+		else if( 0 == strcmp(func, "BTTYPE") )	functionID = Bk9000Info_LI_BTTYPE;
+		else if( 0 == strcmp(func, "NOFCONN") )	functionID = Bk9000Info_LI_NOFCONN;
+		else if( 0 == strcmp(func, "NOFEXCP") )	functionID = Bk9000Info_LI_NOFEXCP;
+		else if( 0 == strcmp(func, "NOFPKTS") )	functionID = Bk9000Info_LI_NOFPKTS;
+		else if( 0 == strcmp(func, "NOFSIGS") )	functionID = Bk9000Info_LI_NOFSIGS;
+		else if( 0 == strcmp(func, "OPTHRDID") )functionID = Bk9000Info_LI_OPTHRDID;
+		else
+		{
+			errlogPrintf("Unsupported function for Bk9000Info of record %s!\n", precord->name);
+			return -1;
+		}
+		break;
+	case EPICS_RTYPE_MBBI:
+		if ( 0 == strcmp(func, "CPLRRDY") )
+			functionID = Bk9000Info_MBBI_CPLRRDY;
+		else if( 0 == strcmp(func, "LINKSTAT") )
+			functionID = Bk9000Info_MBBI_LINKSTAT;
+		else
+		{
+			errlogPrintf("Unsupported function for Bk9000Info of record %s!\n", precord->name);
+			return -1;
+		}
+		break;
+	case EPICS_RTYPE_SI:
+		if( 0 == strcmp(func, "CPLRNAME") )	functionID = Bk9000Info_SI_CPLRNAME;
+		else if( 0 == strcmp(func, "CPLRIP") )	functionID = Bk9000Info_SI_CPLRIP;
+		else if( 0 == strcmp(func, "TLSTCONN") )functionID = Bk9000Info_SI_TLSTCONN;
+		else if( 0 == strcmp(func, "TSETCONN") )functionID = Bk9000Info_SI_TSETCONN;
+		else if( 0 == strcmp(func, "TLASTTRY") )functionID = Bk9000Info_SI_TLASTTRY;
+		else if( 0 == strcmp(func, "CPLRID") )	functionID = Bk9000Info_SI_CPLRID;
+		else if( 0 == strcmp(func, "OPTHRDNM") )functionID = Bk9000Info_SI_OPTHRDNM;
+		else
+		{
+			errlogPrintf("Unsupported function for Bk9000Info of record %s!\n", precord->name);
+			return -1;
+		}
+		break;
+	default:
+		errlogPrintf("Unsupported record type for Bk9000Info of record %s!\n", precord->name);
+		return -1;
+	}
+
+	pinforeq = (Bk9000_INFO_REQ *)malloc(sizeof(Bk9000_INFO_REQ));
+	if(pinforeq == NULL)
+	{
+		errlogPrintf("Fail to malloc memory for record %s!\n", precord->name);
+		return -1;
+	}
+
+	memset( (char *)pinforeq, 0, sizeof(Bk9000_INFO_REQ) );
+
+	pinforeq->pcoupler = pcoupler;
+	pinforeq->slot = slotnum;
+	pinforeq->funcid = functionID;
+
+	precord->dpvt = (void *)pinforeq;
+	return 0;
+}
+
+/* function prototypes */
+static long init_li_Bk9000Info(struct longinRecord *pli);
+static long read_li_Bk9000Info(struct longinRecord *pli);
+
+static long init_mbbi_Bk9000Info(struct mbbiRecord *pmbbi);
+static long read_mbbi_Bk9000Info(struct mbbiRecord *pmbbi);
+
+static long init_si_Bk9000Info(struct stringinRecord *psi);
+static long read_si_Bk9000Info(struct stringinRecord *psi);
+
+/* global struct for devSup */
+typedef struct
+{
+	long		number;
+	DEVSUPFUN	report;
+	DEVSUPFUN	init;
+	DEVSUPFUN	init_record;
+	DEVSUPFUN	get_ioint_info;
+	DEVSUPFUN	read_write;
+	DEVSUPFUN	special_linconv;
+}	Bk9000Info_DEV_SUP_SET;
+
+Bk9000Info_DEV_SUP_SET devLiBk9000Info= {6, NULL, NULL, init_li_Bk9000Info, NULL, read_li_Bk9000Info, NULL};
+Bk9000Info_DEV_SUP_SET devMbbiBk9000Info= {6, NULL, NULL, init_mbbi_Bk9000Info, NULL, read_mbbi_Bk9000Info, NULL};
+Bk9000Info_DEV_SUP_SET devSiBk9000Info= {6, NULL, NULL, init_si_Bk9000Info, NULL, read_si_Bk9000Info, NULL};
+
+epicsExportAddress(dset, devLiBk9000Info);
+epicsExportAddress(dset, devMbbiBk9000Info);
+epicsExportAddress(dset, devSiBk9000Info);
+
+static long init_li_Bk9000Info(struct longinRecord * pli)
+{
+	if (pli->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pli,
+				"devLiBk9000Info Init_record, Illegal INP");
+		pli->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Info_Req_Init((dbCommon *) pli, EPICS_RTYPE_LI, pli->inp.value.instio.string) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)
+			errlogPrintf("Fail to init info_req for record %s!!", pli->name);
+		recGblRecordError(S_db_badField, (void *) pli, "Init info_req Error");
+		pli->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_li_Bk9000Info(struct longinRecord * pli)
+{
+	Bk9000_INFO_REQ	*	pinforeq = (Bk9000_INFO_REQ *) (pli->dpvt);
+	UINT32				temp;
+
+	switch((int)(pinforeq->funcid))
+	{
+	case Bk9000Info_LI_COWCNT:
+		pli->val = (pinforeq->pcoupler->complex_out_bits)/16;
+		if( !(pinforeq->pcoupler->couplerReady) )
+			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
+		break;
+	case Bk9000Info_LI_CIWCNT:
+		pli->val = (pinforeq->pcoupler->complex_in_bits)/16;
+		if( !(pinforeq->pcoupler->couplerReady) )
+			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
+		break;
+	case Bk9000Info_LI_DOBCNT:
+		pli->val = pinforeq->pcoupler->digital_out_bits;
+		if( !(pinforeq->pcoupler->couplerReady) )
+			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
+		break;
+	case Bk9000Info_LI_DIBCNT:
+		pli->val = pinforeq->pcoupler->digital_in_bits;
+		if( !(pinforeq->pcoupler->couplerReady) )
+			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
+		break;
+	case Bk9000Info_LI_BTTYPE:   /* slot could be vary */
+		if( pinforeq->pcoupler->installedBusTerm[pinforeq->slot].pbusterm_img_def )
+		{
+			pli->val = pinforeq->pcoupler->installedBusTerm[pinforeq->slot].pbusterm_img_def->busterm_type;
+			if( !(pinforeq->pcoupler->couplerReady) )
+				recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
+		}
+		else
+		{
+			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
+		}
+		break;
+	case Bk9000Info_LI_NOFCONN:
+		MBT_GetNthOfConn(pinforeq->pcoupler->mbt_link, &temp);
+		pli->val = temp;
+		if( !(pinforeq->pcoupler->couplerReady) )
+			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
+		break;
+	case Bk9000Info_LI_NOFEXCP:
+		MBT_GetRemoteErrCnt(pinforeq->pcoupler->mbt_link, &temp);
+		pli->val = temp;
+		if( !(pinforeq->pcoupler->couplerReady) )
+			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
+		break;
+	case Bk9000Info_LI_NOFPKTS:
+		MBT_GetNofPackets(pinforeq->pcoupler->mbt_link, &temp);
+					pli->val = temp;
+		if( !(pinforeq->pcoupler->couplerReady) )
+			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
+		break;
+	case Bk9000Info_LI_NOFSIGS:
+		pli->val = ellCount( (ELLLIST *)&(pinforeq->pcoupler->sigptr_list) );
+		break;
+	case Bk9000Info_LI_OPTHRDID:
+		pli->val = (UINT32)((long)(pinforeq->pcoupler->opthread_id));
+		break;
+	}
+	pli->udf=FALSE;
+	return 0;
+}
+
+/******* mbbi record *************/
+static long init_mbbi_Bk9000Info(struct mbbiRecord *pmbbi)
+{
+	if (pmbbi->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pmbbi,
+				"devMbbiBk9000Info Init_record, Illegal INP");
+		pmbbi->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Info_Req_Init((dbCommon *) pmbbi, EPICS_RTYPE_MBBI, pmbbi->inp.value.instio.string) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)
+			errlogPrintf("Fail to init info_req for record %s!!", pmbbi->name);
+		recGblRecordError(S_db_badField, (void *) pmbbi, "Init info_req Error");
+		pmbbi->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	pmbbi->shft = 0;
+	return 0;
+}
+
+static long read_mbbi_Bk9000Info(struct mbbiRecord *pmbbi)
+{
+	Bk9000_INFO_REQ         * pinforeq = (Bk9000_INFO_REQ *) (pmbbi->dpvt);
+	SINT32                  temp;
+
+	switch((int)(pinforeq->funcid))
+	{
+	case Bk9000Info_MBBI_CPLRRDY:
+		pmbbi->rval = pinforeq->pcoupler->couplerReady;
+		break;
+	case Bk9000Info_MBBI_LINKSTAT:
+		MBT_GetLinkStat(pinforeq->pcoupler->mbt_link, &temp);
+		pmbbi->rval = temp;
+		break;
+	}
+
+	pmbbi->udf=FALSE;
+	return  CONVERT;
+}
+
+/******* stringin  record *************/
+static long init_si_Bk9000Info(struct stringinRecord *psi)
+{
+	if (psi->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)psi,
+				"devSiBk9000Info Init_record, Illegal INP");
+		psi->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Info_Req_Init((dbCommon *) psi, EPICS_RTYPE_SI, psi->inp.value.instio.string) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)
+			errlogPrintf("Fail to init info_req for record %s!!", psi->name);
+		recGblRecordError(S_db_badField, (void *) psi, "Init info_req Error");
+		psi->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_si_Bk9000Info(struct stringinRecord *psi)
+{
+	Bk9000_INFO_REQ	*	pinforeq = (Bk9000_INFO_REQ *) (psi->dpvt);
+	struct sockaddr_in	addr;
+	switch ((int)(pinforeq->funcid))
+	{
+	case Bk9000Info_SI_CPLRNAME:
+		strncpy(psi->val, MBT_GetName(pinforeq->pcoupler->mbt_link), MAX_CA_STRING_SIZE-1);
+		psi->val[MAX_CA_STRING_SIZE-1] = '\0';
+		break;
+	case Bk9000Info_SI_CPLRIP:
+		MBT_GetAddr(pinforeq->pcoupler->mbt_link, &addr);
+		strncpy(psi->val, inet_ntoa(addr.sin_addr), MAX_CA_STRING_SIZE-1);
+		psi->val[MAX_CA_STRING_SIZE-1] = '\0';
+		break;
+	case Bk9000Info_SI_TLSTCONN:
+		epicsTimeToStrftime(psi->val, MAX_CA_STRING_SIZE-1, "%Y/%m/%d %H:%M:%S.%06f",
+							&(pinforeq->pcoupler->time_lost_conn));
+		break;
+	case Bk9000Info_SI_TSETCONN:
+		epicsTimeToStrftime(psi->val, MAX_CA_STRING_SIZE-1, "%Y/%m/%d %H:%M:%S.%06f",
+							&(pinforeq->pcoupler->time_set_conn));
+		break;
+	case Bk9000Info_SI_TLASTTRY:
+		epicsTimeToStrftime(psi->val, MAX_CA_STRING_SIZE-1, "%Y/%m/%d %H:%M:%S.%06f",
+							&(pinforeq->pcoupler->time_last_try));
+		break;
+	case Bk9000Info_SI_CPLRID:
+		strcpy(psi->val, pinforeq->pcoupler->couplerID);
+		if( !(pinforeq->pcoupler->couplerReady) )
+			recGblSetSevr(psi, READ_ALARM, INVALID_ALARM);
+		break;
+	case Bk9000Info_SI_OPTHRDNM:
+		strcpy(psi->val, pinforeq->pcoupler->opthread_name);
+		break;
+	}
+	
+	psi->udf=FALSE;
+	return 0;
+}
diff --git a/Bk9000_MBTApp/src/devKL1002.c b/Bk9000_MBTApp/src/devKL1002.c
new file mode 100644
index 0000000..3715711
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL1002.c
@@ -0,0 +1,80 @@
+#include <Bk9000_MBT_Common.h>
+#include <biRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bi_KL1002(struct biRecord * pbi)
+{
+	if (pbi->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbi,
+			"devBiKL1002 Init_record, Illegal INP");
+		pbi->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KL1002, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
+		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
+		pbi->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_bi_KL1002(struct biRecord * pbi)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbi->dpvt);
+
+	if (!pbi->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
+			return -1;
+		}
+		else
+		{
+			pbi->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pbi->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we don't */
+			pbi->rval = (psignal->pdevdata->value)?1:0;
+		}
+	}
+	return (CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bi;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_bi;
+}	devBiKL1002 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bi_KL1002,
+	NULL,
+	read_bi_KL1002,
+};
+epicsExportAddress(dset, devBiKL1002);
+
diff --git a/Bk9000_MBTApp/src/devKL1104.c b/Bk9000_MBTApp/src/devKL1104.c
new file mode 100644
index 0000000..290df62
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL1104.c
@@ -0,0 +1,80 @@
+#include <Bk9000_MBT_Common.h>
+#include <biRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bi_KL1104(struct biRecord * pbi)
+{
+	if (pbi->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbi,
+			"devBiKL1104 Init_record, Illegal INP");
+		pbi->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KL1104, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
+		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
+		pbi->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_bi_KL1104(struct biRecord * pbi)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbi->dpvt);
+
+	if (!pbi->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
+			return -1;
+		}
+		else
+		{
+			pbi->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pbi->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we don't */
+			pbi->rval = (psignal->pdevdata->value)?1:0;
+		}
+	}
+	return (CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bi;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_bi;
+}	devBiKL1104 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bi_KL1104,
+	NULL,
+	read_bi_KL1104,
+};
+epicsExportAddress(dset, devBiKL1104);
+
diff --git a/Bk9000_MBTApp/src/devKL1124.c b/Bk9000_MBTApp/src/devKL1124.c
new file mode 100644
index 0000000..c46af3f
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL1124.c
@@ -0,0 +1,80 @@
+#include <Bk9000_MBT_Common.h>
+#include <biRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bi_KL1124(struct biRecord * pbi)
+{
+	if (pbi->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbi,
+			"devBiKL1124 Init_record, Illegal INP");
+		pbi->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KL1124, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
+		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
+		pbi->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_bi_KL1124(struct biRecord * pbi)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbi->dpvt);
+
+	if (!pbi->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
+			return -1;
+		}
+		else
+		{
+			pbi->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pbi->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we don't */
+			pbi->rval = (psignal->pdevdata->value)?1:0;
+		}
+	}
+	return (CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bi;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_bi;
+}	devBiKL1124 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bi_KL1124,
+	NULL,
+	read_bi_KL1124,
+};
+epicsExportAddress(dset, devBiKL1124);
+
diff --git a/Bk9000_MBTApp/src/devKL1408.c b/Bk9000_MBTApp/src/devKL1408.c
new file mode 100644
index 0000000..850cd96
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL1408.c
@@ -0,0 +1,80 @@
+#include <Bk9000_MBT_Common.h>
+#include <biRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bi_KL1408(struct biRecord * pbi)
+{
+	if (pbi->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbi,
+			"devBiKL1408 Init_record, Illegal INP");
+		pbi->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KL1408, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
+		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
+		pbi->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_bi_KL1408(struct biRecord * pbi)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbi->dpvt);
+
+	if (!pbi->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
+			return -1;
+		}
+		else
+		{
+			pbi->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pbi->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we don't */
+			pbi->rval = (psignal->pdevdata->value)?1:0;
+		}
+	}
+	return (CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bi;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_bi;
+}	devBiKL1408 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bi_KL1408,
+	NULL,
+	read_bi_KL1408,
+};
+epicsExportAddress(dset, devBiKL1408);
+
diff --git a/Bk9000_MBTApp/src/devKL1488.c b/Bk9000_MBTApp/src/devKL1488.c
new file mode 100644
index 0000000..769645e
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL1488.c
@@ -0,0 +1,80 @@
+#include <Bk9000_MBT_Common.h>
+#include <biRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bi_KL1488(struct biRecord * pbi)
+{
+	if (pbi->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbi,
+			"devBiKL1488 Init_record, Illegal INP");
+		pbi->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KL1488, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
+		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
+		pbi->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_bi_KL1488(struct biRecord * pbi)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbi->dpvt);
+
+	if (!pbi->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
+			return -1;
+		}
+		else
+		{
+			pbi->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pbi->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we don't */
+			pbi->rval = (psignal->pdevdata->value)?1:0;
+		}
+	}
+	return (CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bi;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_bi;
+}	devBiKL1488 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bi_KL1488,
+	NULL,
+	read_bi_KL1488,
+};
+epicsExportAddress(dset, devBiKL1488);
+
diff --git a/Bk9000_MBTApp/src/devKL2012.c b/Bk9000_MBTApp/src/devKL2012.c
new file mode 100644
index 0000000..05a1a36
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL2012.c
@@ -0,0 +1,98 @@
+#include <Bk9000_MBT_Common.h>
+#include <boRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bo_KL2012(struct boRecord * pbo)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pbo->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbo,
+			"devBoKL2012 Init_record, Illegal OUT");
+		pbo->pact=TRUE;
+		return (S_db_badField);
+	}
+
+        pbo->mask = 0x0;
+
+	if(Bk9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2012, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
+		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
+		pbo->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pbo->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		pbo->rval = (psignal->pdevdata->value)?1:0;
+		pbo->udf = FALSE;
+		pbo->stat = pbo->sevr = NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_bo_KL2012(struct boRecord * pbo)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+
+	if (!pbo->pact)
+	{
+		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+                /* We don't check term_reg_exist, because we know it doesn't exist */
+		psignal->pdevdata->value = (pbo->rval)?1:0;
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
+			return -1;
+		}
+		else
+		{
+			pbo->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bo;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_bo;
+}	devBoKL2012 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bo_KL2012,
+	NULL,
+	write_bo_KL2012,
+};
+epicsExportAddress(dset, devBoKL2012);
+
diff --git a/Bk9000_MBTApp/src/devKL2114.c b/Bk9000_MBTApp/src/devKL2114.c
new file mode 100644
index 0000000..35b6464
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL2114.c
@@ -0,0 +1,98 @@
+#include <Bk9000_MBT_Common.h>
+#include <boRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bo_KL2114(struct boRecord * pbo)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pbo->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbo,
+			"devBoKL2114 Init_record, Illegal OUT");
+		pbo->pact=TRUE;
+		return (S_db_badField);
+	}
+
+        pbo->mask = 0x0;
+
+	if(Bk9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2114, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
+		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
+		pbo->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pbo->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		pbo->rval = (psignal->pdevdata->value)?1:0;
+		pbo->udf = FALSE;
+		pbo->stat = pbo->sevr = NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_bo_KL2114(struct boRecord * pbo)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+
+	if (!pbo->pact)
+	{
+		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+                /* We don't check term_reg_exist, because we know it doesn't exist */
+		psignal->pdevdata->value = (pbo->rval)?1:0;
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
+			return -1;
+		}
+		else
+		{
+			pbo->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bo;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_bo;
+}	devBoKL2114 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bo_KL2114,
+	NULL,
+	write_bo_KL2114,
+};
+epicsExportAddress(dset, devBoKL2114);
+
diff --git a/Bk9000_MBTApp/src/devKL2124.c b/Bk9000_MBTApp/src/devKL2124.c
new file mode 100644
index 0000000..bae6a0e
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL2124.c
@@ -0,0 +1,98 @@
+#include <Bk9000_MBT_Common.h>
+#include <boRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bo_KL2124(struct boRecord * pbo)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pbo->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbo,
+			"devBoKL2124 Init_record, Illegal OUT");
+		pbo->pact=TRUE;
+		return (S_db_badField);
+	}
+
+        pbo->mask = 0x0;
+
+	if(Bk9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2124, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
+		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
+		pbo->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pbo->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		pbo->rval = (psignal->pdevdata->value)?1:0;
+		pbo->udf = FALSE;
+		pbo->stat = pbo->sevr = NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_bo_KL2124(struct boRecord * pbo)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+
+	if (!pbo->pact)
+	{
+		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+                /* We don't check term_reg_exist, because we know it doesn't exist */
+		psignal->pdevdata->value = (pbo->rval)?1:0;
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
+			return -1;
+		}
+		else
+		{
+			pbo->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bo;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_bo;
+}	devBoKL2124 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bo_KL2124,
+	NULL,
+	write_bo_KL2124,
+};
+epicsExportAddress(dset, devBoKL2124);
+
diff --git a/Bk9000_MBTApp/src/devKL2408.c b/Bk9000_MBTApp/src/devKL2408.c
new file mode 100644
index 0000000..01852f5
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL2408.c
@@ -0,0 +1,98 @@
+#include <Bk9000_MBT_Common.h>
+#include <boRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bo_KL2408(struct boRecord * pbo)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pbo->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbo,
+			"devBoKL2408 Init_record, Illegal OUT");
+		pbo->pact=TRUE;
+		return (S_db_badField);
+	}
+
+        pbo->mask = 0x0;
+
+	if(Bk9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2408, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
+		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
+		pbo->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pbo->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		pbo->rval = (psignal->pdevdata->value)?1:0;
+		pbo->udf = FALSE;
+		pbo->stat = pbo->sevr = NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_bo_KL2408(struct boRecord * pbo)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+
+	if (!pbo->pact)
+	{
+		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+                /* We don't check term_reg_exist, because we know it doesn't exist */
+		psignal->pdevdata->value = (pbo->rval)?1:0;
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
+			return -1;
+		}
+		else
+		{
+			pbo->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bo;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_bo;
+}	devBoKL2408 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bo_KL2408,
+	NULL,
+	write_bo_KL2408,
+};
+epicsExportAddress(dset, devBoKL2408);
+
diff --git a/Bk9000_MBTApp/src/devKL2502.c b/Bk9000_MBTApp/src/devKL2502.c
new file mode 100644
index 0000000..5bfdf41
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL2502.c
@@ -0,0 +1,149 @@
+#include <Bk9000_MBT_Common.h>
+#include <aoRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+
+/* The KL2502 duty cycle value is 0x0000 for 0% and 0x7FFF for 100% */
+#define	RAW_DUTY_CYCLE_0	0x0000
+#define	RAW_DUTY_CYCLE_100	0x7FFF
+
+static long lincvt_ao_KL2502(struct aoRecord	*pao, int after)
+{
+	if(!after)
+		return(0);
+
+	/*
+	 * Linear conversion slope calculated from eng units full - eng units low
+	 */
+	pao->eslo = (	(pao->eguf - pao->egul)
+				/	(float)(RAW_DUTY_CYCLE_100 - RAW_DUTY_CYCLE_0) );
+	pao->roff = -	(float) RAW_DUTY_CYCLE_0;
+	return(0);
+}
+
+
+static long init_ao_KL2502(struct aoRecord * pao)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pao->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pao,
+			"devAoKL2502 Init_record, Illegal OUT");
+		pao->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	/*
+	 * Update Linear conversion slope
+	 */
+	lincvt_ao_KL2502( pao, 1 );
+
+	/*
+	 * Initialize Signal
+	 */
+	if ( Bk9000_Signal_Init(	(dbCommon *) pao, EPICS_RTYPE_AO,
+								pao->out.value.instio.string,
+								BT_TYPE_KL2502, Bk9000_Dft_ProcFunc, NULL ) != 0 )
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pao->name);
+		recGblRecordError(S_db_badField, (void *) pao, "Init signal Error");
+		pao->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pao->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pao->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pao,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		/*	Feature register	*/
+		/*	psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value	*/
+		/*	Bit 0:	User scaling active								*/
+		/*	Bit 1:	Manufacturer scaling active						*/
+		/*	Bit 2:	Watchdog timer active							*/
+		/*	Bits 13-15:	Mode										*/
+		/*		000:	PWMH mode			250Hz to 20kHz			*/
+		/*		001:	PWMH mode			2Hz   to 250Hz			*/
+		/*		011:	Frq-Cnt PWM mode	2Hz   to 2kHz			*/
+		/*		101:	Frq-Cnt pulse mode	2Hz   to 2kHz			*/
+		/*		111:	Cnt-Cnt PWM mode	250Hz to 8kHz			*/
+
+		pao->rval	= (SINT16)(psignal->pdevdata->value);
+		pao->udf	= FALSE;
+		pao->stat	= pao->sevr	= NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_ao_KL2502(struct aoRecord * pao)
+{
+	UINT16				rawDutyCycle;
+	Bk9000_SIGNAL	*	psignal = (Bk9000_SIGNAL *) (pao->dpvt);
+
+	if (!pao->pact)
+	{
+		/*	Limit range of raw value */
+		if( pao->rval < RAW_DUTY_CYCLE_0 )
+			rawDutyCycle = RAW_DUTY_CYCLE_0;
+		else if( pao->rval > RAW_DUTY_CYCLE_100 )
+			rawDutyCycle = RAW_DUTY_CYCLE_100;
+		else
+			rawDutyCycle = (UINT16)(pao->rval);
+
+		psignal->pdevdata->value = rawDutyCycle;
+		if ( epicsMessageQueueTrySend(	psignal->pdevdata->pcoupler->msgQ_id,
+										(void *)&psignal,
+										sizeof(Bk9000_SIGNAL *) ) == -1 )
+		{
+			recGblSetSevr( pao, WRITE_ALARM, INVALID_ALARM );
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pao->name);
+			return -1;
+		}
+		else
+		{
+			pao->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pao->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ao;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_ao;
+	DEVSUPFUN       special_linconv;
+}	devAoKL2502 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ao_KL2502,
+	NULL,
+	write_ao_KL2502,
+	lincvt_ao_KL2502
+};
+epicsExportAddress(dset, devAoKL2502);
+
diff --git a/Bk9000_MBTApp/src/devKL2512.c b/Bk9000_MBTApp/src/devKL2512.c
new file mode 100644
index 0000000..7e06fcd
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL2512.c
@@ -0,0 +1,149 @@
+#include <Bk9000_MBT_Common.h>
+#include <aoRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+
+/* KL2512 raw duty cycle values */
+#define	RAW_DUTY_CYCLE_0	0x7FFF
+#define	RAW_DUTY_CYCLE_100	0x0000
+
+static long lincvt_ao_KL2512(struct aoRecord	*pao, int after)
+{
+	if(!after)
+		return(0);
+
+	/*
+	 * Linear conversion slope calculated from eng units full - eng units low
+	 */
+	pao->eslo = (	(pao->eguf - pao->egul)
+				/	(float)(RAW_DUTY_CYCLE_100 - RAW_DUTY_CYCLE_0) );
+	pao->roff = -	(float) RAW_DUTY_CYCLE_0;
+	return(0);
+}
+
+
+static long init_ao_KL2512(struct aoRecord * pao)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pao->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pao,
+			"devAoKL2512 Init_record, Illegal OUT");
+		pao->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	/*
+	 * Update Linear conversion slope
+	 */
+	lincvt_ao_KL2512( pao, 1 );
+
+	/*
+	 * Initialize Signal
+	 */
+	if ( Bk9000_Signal_Init(	(dbCommon *) pao, EPICS_RTYPE_AO,
+								pao->out.value.instio.string,
+								BT_TYPE_KL2512, Bk9000_Dft_ProcFunc, NULL ) != 0 )
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pao->name);
+		recGblRecordError(S_db_badField, (void *) pao, "Init signal Error");
+		pao->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pao->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pao->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pao,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		/*	Feature register	*/
+		/*	psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value	*/
+		/*	Bit 0:	User scaling active								*/
+		/*	Bit 1:	Manufacturer scaling active						*/
+		/*	Bit 2:	Watchdog timer active							*/
+		/*	Bits 13-15:	Mode										*/
+		/*		000:	PWMH mode			250Hz to 20kHz			*/
+		/*		001:	PWMH mode			2Hz   to 250Hz			*/
+		/*		011:	Frq-Cnt PWM mode	2Hz   to 2kHz			*/
+		/*		101:	Frq-Cnt pulse mode	2Hz   to 2kHz			*/
+		/*		111:	Cnt-Cnt PWM mode	250Hz to 8kHz			*/
+
+		pao->rval	= (SINT16)(psignal->pdevdata->value);
+		pao->udf	= FALSE;
+		pao->stat	= pao->sevr	= NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_ao_KL2512(struct aoRecord * pao)
+{
+	UINT16				rawDutyCycle;
+	Bk9000_SIGNAL	*	psignal = (Bk9000_SIGNAL *) (pao->dpvt);
+
+	if (!pao->pact)
+	{
+		/*	Limit range of raw value */
+		if( pao->rval > RAW_DUTY_CYCLE_0 )
+			rawDutyCycle = RAW_DUTY_CYCLE_0;
+		else if( pao->rval < RAW_DUTY_CYCLE_100 )
+			rawDutyCycle = RAW_DUTY_CYCLE_100;
+		else
+			rawDutyCycle = (UINT16)(pao->rval);
+
+		psignal->pdevdata->value = rawDutyCycle;
+		if ( epicsMessageQueueTrySend(	psignal->pdevdata->pcoupler->msgQ_id,
+										(void *)&psignal,
+										sizeof(Bk9000_SIGNAL *) ) == -1 )
+		{
+			recGblSetSevr( pao, WRITE_ALARM, INVALID_ALARM );
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pao->name);
+			return -1;
+		}
+		else
+		{
+			pao->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pao->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ao;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_ao;
+	DEVSUPFUN       special_linconv;
+}	devAoKL2512 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ao_KL2512,
+	NULL,
+	write_ao_KL2512,
+	lincvt_ao_KL2512
+};
+epicsExportAddress(dset, devAoKL2512);
+
diff --git a/Bk9000_MBTApp/src/devKL2622.c b/Bk9000_MBTApp/src/devKL2622.c
new file mode 100644
index 0000000..7c1b601
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL2622.c
@@ -0,0 +1,98 @@
+#include <Bk9000_MBT_Common.h>
+#include <boRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bo_KL2622(struct boRecord * pbo)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pbo->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbo,
+			"devBoKL2622 Init_record, Illegal OUT");
+		pbo->pact=TRUE;
+		return (S_db_badField);
+	}
+
+        pbo->mask = 0x0;
+
+	if(Bk9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2622, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
+		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
+		pbo->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pbo->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		pbo->rval = (psignal->pdevdata->value)?1:0;
+		pbo->udf = FALSE;
+		pbo->stat = pbo->sevr = NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_bo_KL2622(struct boRecord * pbo)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+
+	if (!pbo->pact)
+	{
+		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+                /* We don't check term_reg_exist, because we know it doesn't exist */
+		psignal->pdevdata->value = (pbo->rval)?1:0;
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
+			return -1;
+		}
+		else
+		{
+			pbo->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bo;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_bo;
+}	devBoKL2622 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bo_KL2622,
+	NULL,
+	write_bo_KL2622,
+};
+epicsExportAddress(dset, devBoKL2622);
+
diff --git a/Bk9000_MBTApp/src/devKL2808.c b/Bk9000_MBTApp/src/devKL2808.c
new file mode 100644
index 0000000..6e643ff
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL2808.c
@@ -0,0 +1,98 @@
+#include <Bk9000_MBT_Common.h>
+#include <boRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_bo_KL2808(struct boRecord * pbo)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pbo->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pbo,
+			"devBoKL2808 Init_record, Illegal OUT");
+		pbo->pact=TRUE;
+		return (S_db_badField);
+	}
+
+        pbo->mask = 0x0;
+
+	if(Bk9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2808, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
+		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
+		pbo->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pbo->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		pbo->rval = (psignal->pdevdata->value)?1:0;
+		pbo->udf = FALSE;
+		pbo->stat = pbo->sevr = NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_bo_KL2808(struct boRecord * pbo)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pbo->dpvt);
+
+	if (!pbo->pact)
+	{
+		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+                /* We don't check term_reg_exist, because we know it doesn't exist */
+		psignal->pdevdata->value = (pbo->rval)?1:0;
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
+			return -1;
+		}
+		else
+		{
+			pbo->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_bo;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_bo;
+}	devBoKL2808 =
+{
+	5,
+	NULL,
+	NULL,
+	init_bo_KL2808,
+	NULL,
+	write_bo_KL2808,
+};
+epicsExportAddress(dset, devBoKL2808);
+
diff --git a/Bk9000_MBTApp/src/devKL3064.c b/Bk9000_MBTApp/src/devKL3064.c
new file mode 100644
index 0000000..896777e
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3064.c
@@ -0,0 +1,105 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3064(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3064 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3064, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	/* This is a unipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
+	pai->roff = 0x0;
+
+	return 0;
+}
+
+static long read_ai_KL3064(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			/* We know this is a unipolar 12 bits(12b<<3) module, so rval must be [0,32767], below check is just over kill */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+		}
+	}
+	return (CONVERT);
+}
+
+static long lincvt_ai_KL3064(struct aiRecord	*pai, int after)
+{
+
+	if(!after) return(0);
+	/* set linear conversion slope, this is a unipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
+	pai->roff = 0x0;
+	return(0);
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3064 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3064,
+	NULL,
+	read_ai_KL3064,
+	lincvt_ai_KL3064
+};
+epicsExportAddress(dset, devAiKL3064);
+
diff --git a/Bk9000_MBTApp/src/devKL3102.c b/Bk9000_MBTApp/src/devKL3102.c
new file mode 100644
index 0000000..54ad8e3
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3102.c
@@ -0,0 +1,103 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3102(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3102 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3102, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
+	pai->roff = 0x8000;
+
+	return 0;
+}
+
+static long read_ai_KL3102(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+		}
+	}
+	return (CONVERT);
+}
+
+static long lincvt_ai_KL3102(struct aiRecord	*pai, int after)
+{
+
+	if(!after) return(0);
+	/* set linear conversion slope*/
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
+	pai->roff = 0x8000;
+	return(0);
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3102 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3102,
+	NULL,
+	read_ai_KL3102,
+	lincvt_ai_KL3102
+};
+epicsExportAddress(dset, devAiKL3102);
+
diff --git a/Bk9000_MBTApp/src/devKL3162.c b/Bk9000_MBTApp/src/devKL3162.c
new file mode 100644
index 0000000..a42a581
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3162.c
@@ -0,0 +1,99 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+/* KL3162 2-Ch 16 bit Analog Input Module */
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3162(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3162 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3162, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+	/* KL3162 is single-ended 16-bit */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0xFFFF;
+	/*	pai->roff = 0x8000; */
+	pai->roff = 0x0;
+
+	return 0;
+}
+
+static long read_ai_KL3162(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+		        /* KL3162 is only 0 to 10V  */
+			pai->rval = (UINT16)(psignal->pdevdata->value);
+		}
+	}
+	return (CONVERT);
+}
+
+static long lincvt_ai_KL3162(struct aiRecord	*pai, int after)
+{
+
+	if(!after) return(0);
+	/* set linear conversion slope; 3162 is single-ended unsigned 16-bit */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0xFFFF;
+	/* pai->roff = 0x8000; */
+	pai->roff = 0x0;
+	return(0);
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3162 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3162,
+	NULL,
+	read_ai_KL3162,
+	lincvt_ai_KL3162
+};
+epicsExportAddress(dset, devAiKL3162);
+
diff --git a/Bk9000_MBTApp/src/devKL3202.c b/Bk9000_MBTApp/src/devKL3202.c
new file mode 100644
index 0000000..af7d0ff
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3202.c
@@ -0,0 +1,91 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+/* KL3202 is RTD module, 0.1 degree C per count, so no conversion needed */
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3202(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3202 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3202, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_ai_KL3202(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+			pai->val = 0.1 * pai->rval;
+		}
+	}
+	return (NO_CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3202 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3202,
+	NULL,
+	read_ai_KL3202,
+	NULL
+};
+epicsExportAddress(dset, devAiKL3202);
+
diff --git a/Bk9000_MBTApp/src/devKL3204.c b/Bk9000_MBTApp/src/devKL3204.c
new file mode 100644
index 0000000..1b2e7ce
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3204.c
@@ -0,0 +1,91 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+/* KL3204 is 4-Ch RTD module, 0.1 degree C per count, so no conversion needed */
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3204(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3204 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3204, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_ai_KL3204(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+			pai->val = 0.1 * pai->rval;
+		}
+	}
+	return (NO_CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3204 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3204,
+	NULL,
+	read_ai_KL3204,
+	NULL
+};
+epicsExportAddress(dset, devAiKL3204);
+
diff --git a/Bk9000_MBTApp/src/devKL3222.c b/Bk9000_MBTApp/src/devKL3222.c
new file mode 100644
index 0000000..29312e6
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3222.c
@@ -0,0 +1,91 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+/* KL3222 is RTD module, 0.01 degree C per count, so no conversion needed */
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3222(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3222 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3222, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_ai_KL3222(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+			pai->val = 0.01 * pai->rval;
+		}
+	}
+	return (NO_CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3222 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3222,
+	NULL,
+	read_ai_KL3222,
+	NULL
+};
+epicsExportAddress(dset, devAiKL3222);
+
diff --git a/Bk9000_MBTApp/src/devKL3312.c b/Bk9000_MBTApp/src/devKL3312.c
new file mode 100644
index 0000000..c6f1dc9
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3312.c
@@ -0,0 +1,91 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+/* KL3312 is thermocouple module, 0.1 degree C per count, so no conversion needed */
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3312(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3312 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3312, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_ai_KL3312(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+			pai->val = 0.1 * pai->rval;
+		}
+	}
+	return (NO_CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3312 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3312,
+	NULL,
+	read_ai_KL3312,
+	NULL
+};
+epicsExportAddress(dset, devAiKL3312);
+
diff --git a/Bk9000_MBTApp/src/devKL3314.c b/Bk9000_MBTApp/src/devKL3314.c
new file mode 100644
index 0000000..8fdac70
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3314.c
@@ -0,0 +1,91 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+/* KL3314 is thermocouple module, 0.1 degree C per count, so no conversion needed */
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3314(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3314 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3314, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	return 0;
+}
+
+static long read_ai_KL3314(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+			pai->val = 0.1 * pai->rval;
+		}
+	}
+	return (NO_CONVERT);
+}
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3314 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3314,
+	NULL,
+	read_ai_KL3314,
+	NULL
+};
+epicsExportAddress(dset, devAiKL3314);
+
diff --git a/Bk9000_MBTApp/src/devKL3404.c b/Bk9000_MBTApp/src/devKL3404.c
new file mode 100644
index 0000000..5155b8f
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3404.c
@@ -0,0 +1,107 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+/* KL3404 is a 4-ch 12 bit analog input module */
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3404(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3404 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3404, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	/* This is a bipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
+	pai->roff = 0x8000;
+
+	return 0;
+}
+
+static long read_ai_KL3404(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			/* We know this is a bipolar 12 bits(12b<<3) module, so rval must be [-32768,32767], below check is necessary */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+		}
+	}
+	return (CONVERT);
+}
+
+static long lincvt_ai_KL3404(struct aiRecord	*pai, int after)
+{
+
+	if(!after) return(0);
+	/* set linear conversion slope, this is a bipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
+	pai->roff = 0x8000;
+	return(0);
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3404 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3404,
+	NULL,
+	read_ai_KL3404,
+	lincvt_ai_KL3404
+};
+epicsExportAddress(dset, devAiKL3404);
+
diff --git a/Bk9000_MBTApp/src/devKL3408.c b/Bk9000_MBTApp/src/devKL3408.c
new file mode 100644
index 0000000..94df103
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3408.c
@@ -0,0 +1,105 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3408(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3408 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3408, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	/* This is a bipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
+	pai->roff = 0x8000;
+
+	return 0;
+}
+
+static long read_ai_KL3408(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			/* We know this is a bipolar 12 bits(12b<<3) module, so rval must be [-32768,32767], below check is necessary */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+		}
+	}
+	return (CONVERT);
+}
+
+static long lincvt_ai_KL3408(struct aiRecord	*pai, int after)
+{
+
+	if(!after) return(0);
+	/* set linear conversion slope, this is a bipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
+	pai->roff = 0x8000;
+	return(0);
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3408 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3408,
+	NULL,
+	read_ai_KL3408,
+	lincvt_ai_KL3408
+};
+epicsExportAddress(dset, devAiKL3408);
+
diff --git a/Bk9000_MBTApp/src/devKL3464.c b/Bk9000_MBTApp/src/devKL3464.c
new file mode 100644
index 0000000..57b5756
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3464.c
@@ -0,0 +1,105 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3464(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3464 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3464, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	/* This is a unipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
+	pai->roff = 0x0;
+
+	return 0;
+}
+
+static long read_ai_KL3464(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			/* We know this is a unipolar 12 bits(12b<<3) module, so rval must be [0,32767], below check is just over kill */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+		}
+	}
+	return (CONVERT);
+}
+
+static long lincvt_ai_KL3464(struct aiRecord	*pai, int after)
+{
+
+	if(!after) return(0);
+	/* set linear conversion slope, this is a unipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
+	pai->roff = 0x0;
+	return(0);
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3464 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3464,
+	NULL,
+	read_ai_KL3464,
+	lincvt_ai_KL3464
+};
+epicsExportAddress(dset, devAiKL3464);
+
diff --git a/Bk9000_MBTApp/src/devKL3468.c b/Bk9000_MBTApp/src/devKL3468.c
new file mode 100644
index 0000000..5840b04
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL3468.c
@@ -0,0 +1,105 @@
+#include <Bk9000_MBT_Common.h>
+#include <aiRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ai_KL3468(struct aiRecord * pai)
+{
+	if (pai->inp.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pai,
+			"devAiKL3468 Init_record, Illegal INP");
+		pai->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	if(Bk9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3468, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
+		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
+		pai->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	/* This is a unipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
+	pai->roff = 0x0;
+
+	return 0;
+}
+
+static long read_ai_KL3468(struct aiRecord * pai)
+{
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pai->dpvt);
+
+	if (!pai->pact)
+	{
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
+			return -1;
+		}
+		else
+		{
+			pai->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+		else
+		{
+			pai->udf = FALSE;
+			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+			/* We don't check term_reg_exist, because we know we do */
+			/* We know this is a unipolar 12 bits(12b<<3) module, so rval must be [0,32767], below check is just over kill */
+			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+			{/* signed amount */
+				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+			}
+			else
+			{/* two's complement */
+				pai->rval = (SINT16)(psignal->pdevdata->value);
+			}
+		}
+	}
+	return (CONVERT);
+}
+
+static long lincvt_ai_KL3468(struct aiRecord	*pai, int after)
+{
+
+	if(!after) return(0);
+	/* set linear conversion slope, this is a unipolar 12 bits(12b<<3) module */
+	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
+	pai->roff = 0x0;
+	return(0);
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ai;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       read_ai;
+	DEVSUPFUN       special_linconv;
+}	devAiKL3468 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ai_KL3468,
+	NULL,
+	read_ai_KL3468,
+	lincvt_ai_KL3468
+};
+epicsExportAddress(dset, devAiKL3468);
+
diff --git a/Bk9000_MBTApp/src/devKL4002.c b/Bk9000_MBTApp/src/devKL4002.c
new file mode 100644
index 0000000..47af820
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL4002.c
@@ -0,0 +1,127 @@
+#include <Bk9000_MBT_Common.h>
+#include <aoRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ao_KL4002(struct aoRecord * pao)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pao->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pao,
+			"devAoKL4002 Init_record, Illegal OUT");
+		pao->pact=TRUE;
+		return (S_db_badField);
+	}
+
+	/* This is a unipolar 12 bits(12b<<3) modules */
+        pao->eslo = (pao->eguf - pao->egul)/(float)0x7FFF;
+        pao->roff = 0x0;
+
+	if(Bk9000_Signal_Init((dbCommon *) pao, EPICS_RTYPE_AO, pao->out.value.instio.string, BT_TYPE_KL4002, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pao->name);
+		recGblRecordError(S_db_badField, (void *) pao, "Init signal Error");
+		pao->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pao->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pao->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pao,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		/* We do have feature register, but we know this is a unipolar 12 bits(12b<<3) module, so we shouldn't care bit 3 */
+		/* But for safety, we still check it */
+		if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
+		{/* signed amount */
+			pao->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
+		}
+		else
+		{/* two's complement */
+			pao->rval = (SINT16)(psignal->pdevdata->value);
+		}
+
+		pao->udf = FALSE;
+		pao->stat = pao->sevr = NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_ao_KL4002(struct aoRecord * pao)
+{
+	SINT16		temp;
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pao->dpvt);
+
+	if (!pao->pact)
+	{
+		if( pao->rval < 0 )	temp = 0;
+		else if( pao-> rval > 32767 ) temp = 32767;
+		else	temp = (SINT16)(pao->rval);
+		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+                /* We don't check term_reg_exist, because we know it doesn't affect value */
+		psignal->pdevdata->value = (UINT16)temp;
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pao->name);
+			return -1;
+		}
+		else
+		{
+			pao->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pao->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+static long lincvt_ao_KL4002(struct aoRecord	*pao, int after)
+{
+
+	if(!after) return(0);
+	/* set linear conversion slope, we know it is a unipolar 12 bits(12b<<3) module */
+	pao->eslo = (pao->eguf - pao->egul)/(float)0x7FFF;
+	pao->roff = 0x0;
+	return(0);
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ao;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_ao;
+	DEVSUPFUN       special_linconv;
+}	devAoKL4002 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ao_KL4002,
+	NULL,
+	write_ao_KL4002,
+	lincvt_ao_KL4002
+};
+epicsExportAddress(dset, devAoKL4002);
+
diff --git a/Bk9000_MBTApp/src/devKL4132.c b/Bk9000_MBTApp/src/devKL4132.c
new file mode 100644
index 0000000..6596d86
--- /dev/null
+++ b/Bk9000_MBTApp/src/devKL4132.c
@@ -0,0 +1,116 @@
+#include <Bk9000_MBT_Common.h>
+#include <aoRecord.h>
+
+extern	SINT32	Bk9000_DEV_DEBUG;
+	
+static long init_ao_KL4132(struct aoRecord * pao)
+{
+	SINT32 status;
+	Bk9000_SIGNAL * psignal;
+
+	if (pao->out.type!=INST_IO)
+	{
+		recGblRecordError(S_db_badField, (void *)pao,
+			"devAoKL4132 Init_record, Illegal OUT");
+		pao->pact=TRUE;
+		return (S_db_badField);
+	}
+
+        pao->eslo = (pao->eguf - pao->egul)/(float)65534;
+        pao->roff = 32767;
+
+	if(Bk9000_Signal_Init((dbCommon *) pao, EPICS_RTYPE_AO, pao->out.value.instio.string, BT_TYPE_KL4132, Bk9000_Dft_ProcFunc, NULL) != 0)
+	{
+		if(Bk9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pao->name);
+		recGblRecordError(S_db_badField, (void *) pao, "Init signal Error");
+		pao->pact = TRUE;
+		return (S_db_badField);
+	}
+
+	psignal = (Bk9000_SIGNAL *) (pao->dpvt);
+	status = Bk9000_Dft_OutInit(psignal);
+	if(status != 0)
+	{/* Init value failed */
+		/* pao->udf = TRUE; */
+
+		/* Leave UDF as is, don't set SEVERITY */
+		/* recGblSetSevr(pao,READ_ALARM,INVALID_ALARM); */
+		return -1;
+	}
+	else
+	{
+		pao->rval = (SINT16)(psignal->pdevdata->value);
+		pao->udf = FALSE;
+		pao->stat = pao->sevr = NO_ALARM;
+	}
+
+	return CONVERT;
+}
+
+static long write_ao_KL4132(struct aoRecord * pao)
+{
+	SINT16		temp;
+	Bk9000_SIGNAL	* psignal = (Bk9000_SIGNAL *) (pao->dpvt);
+
+	if (!pao->pact)
+	{
+		if( pao->rval < -32767 )	temp = -32767;
+		else if( pao-> rval > 32767 )	temp = 32767;
+		else	temp = (SINT16)(pao->rval);
+		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
+                /* We don't check term_reg_exist, because we know it doesn't affect value */
+		psignal->pdevdata->value = (UINT16)temp;
+		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bk9000_SIGNAL *)) == -1)
+		{
+			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pao->name);
+			return -1;
+		}
+		else
+		{
+			pao->pact = TRUE;
+		}
+	}
+	else
+	{
+		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
+		{
+			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
+			if(Bk9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pao->name, psignal->pdevdata->err_code);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+static long lincvt_ao_KL4132(struct aoRecord	*pao, int after)
+{
+
+	if(!after) return(0);
+	/* set linear conversion slope*/
+	pao->eslo = (pao->eguf - pao->egul)/(float)65534;
+	pao->roff = 32767;
+	return(0);
+}
+
+
+struct {
+	long            number;
+	DEVSUPFUN       report;
+	DEVSUPFUN       init;
+	DEVSUPFUN       init_ao;
+	DEVSUPFUN       get_ioint_info;
+	DEVSUPFUN       write_ao;
+	DEVSUPFUN       special_linconv;
+}	devAoKL4132 =
+{
+	6,
+	NULL,
+	NULL,
+	init_ao_KL4132,
+	NULL,
+	write_ao_KL4132,
+	lincvt_ao_KL4132
+};
+epicsExportAddress(dset, devAoKL4132);
+
diff --git a/Bk9000_MBTApp/src/drvBk9000_MBT.c b/Bk9000_MBTApp/src/drvBk9000_MBT.c
new file mode 100644
index 0000000..160d3b9
--- /dev/null
+++ b/Bk9000_MBTApp/src/drvBk9000_MBT.c
@@ -0,0 +1,1361 @@
+#include "Bk9000_MBT_Common.h"
+#include "Bk9000_BTDef.h"
+#include "Bk9000_SigDef.h"
+#include "Bk9000_Watchdog.h"
+
+
+
+/* Add MACRO Definitions for min/max */
+/* Needed as of EPICS BASE R3-14-11 */
+/* provide an macro that implements max() and min() */
+
+#ifndef __cplusplus
+#ifndef max
+#define max(a,b) (((a)>(b)) ? (a) : (b))
+#endif
+
+#ifndef min
+#define min(a,b) (((a)<(b)) ? (a) : (b))
+#endif
+#endif
+
+
+Bk9000_COUPLER_LIST	bk9000_cplr_list;
+SINT32	Bk9000_DRV_DEBUG = 1;
+SINT32	Bk9000_DEV_DEBUG = 0;
+
+static  UINT32 cplr_list_inited=0;
+
+/* This function returns the pointer to the coupler with name */
+Bk9000_COUPLER * Bk9000_Get_Coupler_By_Name( const char * cplrname )
+{
+	Bk9000_COUPLER	* pcoupler = NULL;
+
+	if(!cplr_list_inited)	return NULL;
+
+	for (	pcoupler=(Bk9000_COUPLER *)ellFirst((ELLLIST *)&bk9000_cplr_list);
+			pcoupler;	pcoupler = (Bk9000_COUPLER *)ellNext((ELLNODE *)pcoupler) )
+	{		
+		if ( 0 == strcmp(cplrname, MBT_GetName(pcoupler->mbt_link)) )
+			break;
+	}
+
+	return pcoupler;
+}
+
+/* This function returns the pointer to the busterm_img_def by string name */
+static BUSTERM_IMG_DEF * Bk9000_Get_BTDef_By_Cname(char * btcname)
+{
+	UINT32	loop;
+	for(loop=0; loop < N_BT_IMG_DEF; loop++)
+	{
+		if( 0 == strcmp(busterm_img_def[loop].busterm_string, btcname) )
+			return	(busterm_img_def+loop);
+	}
+	return NULL;
+}
+
+/* This function returns the pointer to the busterm_img_def by enum name */
+static BUSTERM_IMG_DEF * Bk9000_Get_BTDef_By_Ename(E_BUSTERM_TYPE bttype)
+{
+	UINT32	loop;
+	for(loop=0; loop < N_BT_IMG_DEF; loop++)
+	{
+		if( busterm_img_def[loop].busterm_type == bttype )
+			return	(busterm_img_def+loop);
+	}
+	return NULL;
+}
+
+/* This function returns the pointer to the BUSTERM_SIG_DEF by string name */
+BUSTERM_SIG_DEF * Bk9000_Get_SigDef_By_Cname(char * btcname, char * func, E_EPICS_RTYPE epics_rtype)
+{
+	UINT32	loop;
+	for(loop=0; loop < N_BT_SIG_PREDEF; loop++)
+	{
+		if (	0 == strcmp(busterm_sig_predef[loop].busterm_string, btcname)
+			&&	0 == strcmp(busterm_sig_predef[loop].function, func) )
+		{
+			if (	busterm_sig_predef[loop].epics_rtype == EPICS_RTYPE_NONE
+				||	epics_rtype == EPICS_RTYPE_NONE
+				||	busterm_sig_predef[loop].epics_rtype == epics_rtype )
+				return	(BUSTERM_SIG_DEF *)(busterm_sig_predef+loop);
+		}
+	}
+	return NULL;
+}
+
+/* This function returns the pointer to the BUSTERM_SIG_DEF by enum name */
+BUSTERM_SIG_DEF * Bk9000_Get_SigDef_By_Ename(E_BUSTERM_TYPE bttype, char * func, E_EPICS_RTYPE epics_rtype)
+{
+	UINT32	loop;
+	for(loop=0; loop < N_BT_SIG_PREDEF; loop++)
+	{
+		if (	busterm_sig_predef[loop].busterm_type == bttype
+			&&	0 == strcmp(busterm_sig_predef[loop].function, func) )
+		{
+			if (	busterm_sig_predef[loop].epics_rtype == EPICS_RTYPE_NONE
+				||	epics_rtype == EPICS_RTYPE_NONE
+				||	busterm_sig_predef[loop].epics_rtype == epics_rtype )
+				return	(BUSTERM_SIG_DEF *)(busterm_sig_predef+loop);
+		}
+	}
+	return NULL;
+}
+
+#ifdef	vxWorks
+static void	Bk9000_Couplers_Reboot_Hook(int startType)
+{
+	Bk9000_COUPLER  * pcoupler = NULL;
+
+	if(!cplr_list_inited)
+		return;
+
+	for(	pcoupler=(Bk9000_COUPLER *)ellFirst((ELLLIST *)&bk9000_cplr_list);
+			pcoupler != NULL; pcoupler = (Bk9000_COUPLER *)ellNext((ELLNODE *)pcoupler) )
+	{	/* We don't care about any other resource.
+		 * we just want to close socket to Bk9000 to make next re-connection easy
+		 */
+		if(pcoupler->mbt_link)
+		{
+			MBT_Disconnect(pcoupler->mbt_link, 0);
+			pcoupler->mbt_link	= NULL;
+		}
+	}
+
+	/* my experience is we can only print one character */
+	printf("Close link to all Bk9000 couplers!\n");
+}
+#endif
+
+/* This must be called in st.cmd first before any operation to the coupler */
+/* name must be unique, and ipaddr is not necessary to be unique */
+/* This function can be only called in st.cmd */
+/* init_string will be "signame1=1234,signame2=0x2345" */
+int	Bk9000_Coupler_Add( char * cplrname, char * ipaddr, char * init_string )
+{
+	Bk9000_COUPLER	* pcoupler = NULL;
+
+	/* Initialize the coupler list */
+	if(!cplr_list_inited)
+	{
+		ellInit((ELLLIST *) & bk9000_cplr_list);
+#ifdef	vxWorks
+		rebootHookAdd((FUNCPTR)Bk9000_Couplers_Reboot_Hook);
+#endif
+		cplr_list_inited = 1;
+	}
+
+	/* Parameters check */
+	if( cplrname == NULL || strlen(cplrname) == 0 )
+	{
+		errlogPrintf( "Bk9000_Coupler_Add Error: Empty coupler name!\n" );
+		return	-1;
+	}
+
+	if(  ipaddr== NULL || strlen(ipaddr) == 0 || inet_addr(ipaddr) == -1 )
+	{
+		errlogPrintf( "Bk9000_Coupler_Add %s Error: Invalid IP address!\n", cplrname );
+		return  -1;
+	}
+
+	if( Bk9000_Get_Coupler_By_Name(cplrname) )
+	{
+		errlogPrintf( "Bk9000_Coupler_Add %s Error: Already a coupler with this name!\n", cplrname );
+		return -1;
+	}
+
+	/* Parameters are OK, malloc memory for coupler */
+	pcoupler = (Bk9000_COUPLER *) malloc ( sizeof(Bk9000_COUPLER) );
+	if( pcoupler == NULL )
+	{
+		errlogPrintf(	"Bk9000_Coupler_Add %s Error: Failed to malloc %zu bytes for coupler!\n",
+						cplrname, sizeof(Bk9000_COUPLER) );
+		return -1;
+	}
+
+	/* Get here, coupler structure malloced, init member */
+	memset( (char *)pcoupler, 0, sizeof(Bk9000_COUPLER) );
+	/* Most of members will be init to 0 except below */
+	pcoupler->terminated	= 0; /* KL9010 not installed yet */
+	pcoupler->couplerReady	= 0; /* Not ready, just emphasize */
+	pcoupler->needReset		= 0; /* So far we don't need reset, just emphasize */
+	pcoupler->opthread_id	= (epicsThreadId)(-1);	/* No thread yet, will create later */
+	strcpy(pcoupler->couplerID, "Unknown");
+	
+	pcoupler->mbt_link = MBT_Init(cplrname, ipaddr, DFT_MBT_PORT, MBT_UNIT_ENDPOINT);
+	if(pcoupler->mbt_link == NULL)
+	{
+		errlogPrintf( "Bk9000_Coupler_Add %s Error: Failed to initialize ModBusTCP link!\n", cplrname);
+		goto FAILURE;
+	}
+
+	pcoupler->mutex_lock = epicsMutexCreate();
+	if(pcoupler->mutex_lock == NULL)
+	{
+		errlogPrintf( "Bk9000_Coupler_Add %s Error: Failed to create mutex_lock!\n", cplrname);
+		goto FAILURE;
+	}
+
+	ellInit((ELLLIST *) & (pcoupler->sigptr_list));
+
+	pcoupler->msgQ_id = epicsMessageQueueCreate(OPTHREAD_MSGQ_CAPACITY, sizeof(Bk9000_SIGNAL *));
+	if(pcoupler->msgQ_id == NULL)
+	{
+		errlogPrintf(	"Bk9000_Coupler_Add %s Error: Failed to create message queue with capacity %u!\n",
+						cplrname, OPTHREAD_MSGQ_CAPACITY );
+		goto FAILURE;
+	}
+
+	/* Prepare the opthread name for future Init use */
+	/* vxWorks "i" shell command will display only 11 charactors for task name */
+	/* for Bk9000 with IP 130.199.123.234, we will have a name "B9K123.234" */
+	memset(pcoupler->opthread_name, 0, MAX_CA_STRING_SIZE );
+	strcpy(pcoupler->opthread_name,"B9K");
+	strcat(pcoupler->opthread_name,strchr( (strchr(ipaddr,'.')+1), '.') +1);
+
+	/* Set installedBusTerm[0], there is no reason to fail to find Bk9000's def */
+	pcoupler->installedBusTerm[0].pbusterm_img_def = Bk9000_Get_BTDef_By_Ename(BT_TYPE_Bk9000);
+	/* coupler has no feature register */
+	pcoupler->installedBusTerm[0].term_r32_value = pcoupler->installedBusTerm[0].pbusterm_img_def->term_r32_dft;
+	ellInit((ELLLIST *) & (pcoupler->installedBusTerm[0].init_list));
+	if(init_string)
+	{/* finish me*/
+	}
+
+	/* We successfully allocate all resource */
+	ellAdd( (ELLLIST *)&bk9000_cplr_list, (ELLNODE *)pcoupler);
+	return 0;
+FAILURE:
+	if(pcoupler->mbt_link)		MBT_Release(pcoupler->mbt_link);
+	if(pcoupler->mutex_lock)	epicsMutexDestroy(pcoupler->mutex_lock);
+	if(pcoupler->msgQ_id)		epicsMessageQueueDestroy(pcoupler->msgQ_id);
+	free(pcoupler);
+	return -1;
+}
+
+static int Bk9000_Couplers_Init_Once();
+static int Bk9000_Coupler_Init(Bk9000_COUPLER * pcoupler);
+static int Bk9000_Operation(Bk9000_COUPLER * pcoupler);
+
+/* This function add a bus terminal to an existing coupler */
+/* init_string will be "signame1=1234,signame2=0x2345" */
+int	Bk9000_Terminal_Add( char * cplrname, UINT16 slot, char * btname, char * init_string)
+{
+	Bk9000_COUPLER	* pcoupler = NULL;
+	BUSTERM_IMG_DEF	* pbtdef = NULL;
+	UINT32	loop;
+
+	/* Parameters check */
+	if( cplrname == NULL || strlen(cplrname) == 0 )
+	{
+		errlogPrintf( "Bk9000_Terminal_Add Error: Empty Bk9000 coupler name!\n");
+		return	-1;
+	}
+
+	if(slot == 0 || slot > MAX_NUM_OF_BUSTERM)
+	{
+		errlogPrintf("Bk9000_Terminal_Add Error: Slot number is illegal!\n");
+		return -1;
+	}
+
+	if(  btname== NULL || strlen(btname) == 0 )
+	{
+		errlogPrintf( "Bk9000_Terminal_Add Error: Empty terminal type name!\n");
+		return  -1;
+	}
+
+	if ( 0 == strcmp("Bk9000", btname) )
+	{
+		errlogPrintf("Bk9000_Terminal_Add Error: Bk9000 is a controller name, not a terminal name!\n");
+		return  -1;
+	}
+
+	/* Parameters are OK, check configuration */
+	if( NULL == (pcoupler = Bk9000_Get_Coupler_By_Name(cplrname)) )
+	{
+		errlogPrintf("Bk9000_Terminal_Add Error: Can't find Bk9000 coupler with name %s!\n", cplrname);
+		return -1;
+	}
+
+	if( NULL == (pbtdef = Bk9000_Get_BTDef_By_Cname(btname)) )
+	{
+		errlogPrintf("Bk9000_Terminal_Add Error: Terminal type %s is not supported yet!\n", btname);
+		return -1;
+	}
+
+	/* Add terminal to coupler */
+	epicsMutexLock(pcoupler->mutex_lock);
+	if(pcoupler->terminated)
+	{	/* KL9010 already installed, no new terminals allowed */
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		errlogPrintf( "Bk9000_Terminal_Add %s Error: Bk9000_Terminal_Add called after adding KL9010!\n", cplrname );
+		return -1;
+	}
+	if ( pcoupler->installedBusTerm[slot].pbusterm_img_def != NULL )
+	{
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		errlogPrintf("Bk9000_Terminal_Add %s Error: Slot %d is already occupied!\n", cplrname, slot );
+		return -1;
+	}
+
+	if(pcoupler->installedBusTerm[slot-1].pbusterm_img_def == NULL)
+	{/* You have to continuously install bus terminals */
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		errlogPrintf("Bk9000_Terminal_Add %s Error: The slot before slot %d is empty!\n", cplrname, slot );
+		return -1;
+	}
+
+	pcoupler->installedBusTerm[slot].pbusterm_img_def = pbtdef;
+	pcoupler->installedBusTerm[slot].term_r32_value = pcoupler->installedBusTerm[slot].pbusterm_img_def->term_r32_dft; /* set R32 value to default, if no R32, default will be 0 */
+	ellInit( (ELLLIST *) & (pcoupler->installedBusTerm[slot].init_list) );
+	if(init_string)
+	{/* finish me */
+	}
+
+	if( 0 == strcmp("KL9010", btname) )
+		pcoupler->terminated = 1;
+	epicsMutexUnlock(pcoupler->mutex_lock);
+
+	/* Calculate the processing image */
+	if( 0 == strcmp("KL9010", btname) )
+	{/* Reach here, means you just add the terminator */
+		UINT32	temp_cin_woffset,	temp_cout_woffset,	temp_din_boffset,	temp_dout_boffset;
+		UINT32	cum_cin_woffset,	cum_cout_woffset,	cum_din_boffset,	cum_dout_boffset;
+
+		epicsMutexLock(pcoupler->mutex_lock);
+
+		cum_cin_woffset  = 0;
+		cum_cout_woffset = 0;
+		/* Calculate mapping for complex */
+		/* All modules are continuously installed, we go though all of them until we see KL9010 */
+		for(loop=0; loop < MAX_NUM_OF_BUSTERM+2; loop++)	/* +2 means include coupler 9000 and terminator 9010 */
+		{
+			if(pcoupler->installedBusTerm[loop].pbusterm_img_def)
+			{
+				/* Lookup complex I/O sizes for this terminal */
+				temp_cin_woffset  = pcoupler->installedBusTerm[loop].pbusterm_img_def->complex_in_words;
+				temp_cout_woffset = pcoupler->installedBusTerm[loop].pbusterm_img_def->complex_out_words;
+				if ( Bk9000_DRV_DEBUG )
+					printf(	"%s terminal has %d complex in words and %d complex out words.\n",
+							pcoupler->installedBusTerm[loop].pbusterm_img_def->busterm_string,
+							temp_cin_woffset, temp_cout_woffset );
+
+				/* Set complex I/O offsets for this terminal */
+				pcoupler->installedBusTerm[loop].complex_in_wordoffset	= cum_cin_woffset;
+				pcoupler->installedBusTerm[loop].complex_out_wordoffset	= cum_cout_woffset;
+
+				/* calculate offset for next terminal */
+				cum_cin_woffset  += temp_cin_woffset;
+				cum_cout_woffset += temp_cout_woffset;
+
+				if(pcoupler->installedBusTerm[loop].pbusterm_img_def->busterm_type == BT_TYPE_KL9010)
+					break;
+			}
+		}
+		if ( Bk9000_DRV_DEBUG )
+			printf(	"%3d words complex in and %3d words complex out mapped for Bk9000 %s!\n",
+					cum_cin_woffset, cum_cout_woffset, cplrname);
+
+		/* Compute total number of complex input and output bits for controller */
+		pcoupler->complex_in_bits	= cum_cin_woffset	* 16;
+		pcoupler->complex_out_bits	= cum_cout_woffset	* 16;
+
+		/* Calculate mapping for digital I/O bits */
+		/* All modules are continuously installed, we go though all of them until we see KL9010 */
+		cum_din_boffset  = pcoupler->complex_in_bits;
+		cum_dout_boffset = pcoupler->complex_out_bits;
+		for(loop=0; loop < MAX_NUM_OF_BUSTERM+2; loop++)	/* +2 means include coupler 9000 and terminator 9010 */
+		{
+			if(pcoupler->installedBusTerm[loop].pbusterm_img_def)
+			{
+				/* Lookup complex I/O sizes for this terminal */
+				temp_din_boffset  = pcoupler->installedBusTerm[loop].pbusterm_img_def->digital_in_bits;
+				temp_dout_boffset = pcoupler->installedBusTerm[loop].pbusterm_img_def->digital_out_bits;
+				if ( Bk9000_DRV_DEBUG )
+					printf(	"%s terminal has %d digital input bits and %d digital output bits.\n",
+							pcoupler->installedBusTerm[loop].pbusterm_img_def->busterm_string,
+							temp_din_boffset, temp_dout_boffset );
+
+				/* Set digital I/O offsets for this terminal */
+				pcoupler->installedBusTerm[loop].digital_in_bitoffset  = cum_din_boffset;
+				pcoupler->installedBusTerm[loop].digital_out_bitoffset = cum_dout_boffset;
+
+				/* calculate offset for next terminal */
+				cum_din_boffset  += temp_din_boffset;
+				cum_dout_boffset += temp_dout_boffset;
+
+				if(pcoupler->installedBusTerm[loop].pbusterm_img_def->busterm_type == BT_TYPE_KL9010)
+					break;
+			}
+		}
+		if ( Bk9000_DRV_DEBUG )
+			printf(	"%3d bits  digital in and %3d bits  digital out mapped for Bk9000 %s!\n",
+					pcoupler->digital_in_bits, pcoupler->digital_out_bits, cplrname);
+		
+		/* Compute total number of digital input and output bits for controller */
+		pcoupler->digital_in_bits	= cum_din_boffset	- pcoupler->complex_in_bits;
+		pcoupler->digital_out_bits	= cum_dout_boffset	- pcoupler->complex_out_bits;
+
+		/* Below two numbers indicate how many words we should update in image */
+		pcoupler->total_in_words  = (cum_din_boffset  + 15)/16;
+		pcoupler->total_out_words = (cum_dout_boffset + 15)/16;
+
+		epicsMutexUnlock(pcoupler->mutex_lock);
+	}
+
+	return 0;
+}
+
+/* This function goes thru the coupler link list and init everyone, it should be only called once */
+static int Bk9000_Couplers_Init_Once()
+{
+	Bk9000_COUPLER  * pcoupler = NULL;
+
+	if ( !cplr_list_inited )
+		return -1;
+
+	for (	pcoupler=(Bk9000_COUPLER *)ellFirst((ELLLIST *)&bk9000_cplr_list);
+			pcoupler; pcoupler = (Bk9000_COUPLER *)ellNext((ELLNODE *)pcoupler) )
+	{
+		Bk9000_Coupler_Init(pcoupler);
+
+		epicsMutexLock(pcoupler->mutex_lock);
+		/* Create the operation thread */
+		if(pcoupler->opthread_id == (epicsThreadId)(-1))
+		{
+			pcoupler->opthread_id = epicsThreadCreate(	pcoupler->opthread_name, OPTHREAD_PRIORITY, OPTHREAD_STACK,
+														(EPICSTHREADFUNC)Bk9000_Operation, (void *)pcoupler );
+			if(pcoupler->opthread_id == (epicsThreadId)(-1))
+			{
+				epicsMutexUnlock(pcoupler->mutex_lock);
+				errlogPrintf(	"Fatal Error: Failed to create operation thread for Bk9000 %s\n",
+								MBT_GetName(pcoupler->mbt_link) );
+				epicsThreadSuspendSelf();
+				return -1;
+			}
+		}
+		epicsMutexUnlock(pcoupler->mutex_lock);
+	}
+
+	return 0;
+}
+
+static int Bk9000_Coupler_Init(Bk9000_COUPLER * pcoupler)
+{/* finish me, do we reset Bk9000? */
+	SINT32	status;
+
+	if(pcoupler == NULL)
+		return -1;
+
+	epicsMutexLock(pcoupler->mutex_lock);	/* Do we have to protect so long time, so far why not */
+	if(pcoupler->couplerReady)
+	{/* Not necessary to re-init */
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		return 0;
+	}
+
+	if ( !pcoupler->terminated )
+	{
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		printf( "Coupler not terminated!\n"
+				"Did you call Bk9000_Terminal_Add( %s, <slot>, \"KL9010\", 0 ) in st.cmd?\n",
+				MBT_GetName(pcoupler->mbt_link) );
+		return -1;
+	}
+
+	/* if(Bk9000_DRV_DEBUG) */
+	printf("Trying to connect to Bk9000 %s ...\n", MBT_GetName(pcoupler->mbt_link));
+
+	/*******************************************************************/
+	/*********** Set up TCP connection *********************************/
+	/*******************************************************************/
+	/* try to connect to Bk9000 */
+	epicsTimeGetCurrent( &(pcoupler->time_last_try) );
+
+	status = MBT_Connect(pcoupler->mbt_link, DFT_MBT_TOUT);
+	if(status != 0)
+	{	/* fail to set up MBT link */
+		pcoupler->couplerReady = 0;	/* Not so necessary */
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		printf("Bk9000_Coupler_Init Error: Failed to connect to %s!\n", MBT_GetName(pcoupler->mbt_link));
+		return -1;
+	}
+	/* Successfully connect to Bk9000 */
+	epicsTimeGetCurrent( &(pcoupler->time_set_conn) );
+	/********************************************************************************************/
+
+	/********************************************************************************************/
+	/* finish me */
+	/****** Go through all installedBusTerms' init_list to do initialization, may needReset *****/
+	/********************************************************************************************/
+
+	/********************************************************************************************/
+	/**************************** Get coupler_ID and Verify mapping *****************************/
+	/********************************************************************************************/
+	status = Bk9000_MBT_Read_Cplr_ID(pcoupler->mbt_link, pcoupler->couplerID, COUPLER_ID_SIZE*2+2, DFT_MBT_TOUT);
+	if(status != 0)
+	{
+		pcoupler->couplerReady = 0;	/* Not so necessary */
+		/* Force MBT close link, we don't mess up existing err code */
+		MBT_Disconnect(pcoupler->mbt_link, 0);	
+		epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		/* if(Bk9000_DRV_DEBUG) */
+		printf("Bk9000_Coupler_Init %s Error: Failed to read coupler ID!\n", MBT_GetName(pcoupler->mbt_link));
+		return -1;
+	}
+
+	status = Bk9000_MBT_Verify_Image_Size(pcoupler->mbt_link, pcoupler->complex_out_bits, pcoupler->complex_in_bits,
+								 pcoupler->digital_out_bits, pcoupler->digital_in_bits, DFT_MBT_TOUT);
+	if(status != 0)
+	{	/* somehow we can't verify, either fail to read or doesn't match */
+		if(Bk9000_DRV_DEBUG)
+		{
+			printf(	"Bk9000_Coupler_Init %s Error: Failed to validate I/O processing image size!\n"
+					"Make sure the installed terminals match those added in st.cmd.\n",
+					MBT_GetName(pcoupler->mbt_link) );
+			Bk9000_MBT_Diag( pcoupler->mbt_link, DFT_MBT_TOUT );
+		}
+		pcoupler->couplerReady = 0;	/* Not so necessary */
+		/* Force MBT to close link, we don't mess up existing err code */
+		MBT_Disconnect(pcoupler->mbt_link, 0);
+		epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		return -1;
+	}
+
+	/*****************************************************************************/
+
+	/*****************************************************************************/
+	/********Finish me *********For each installed terminal, read back R32********/
+	/*****************************************************************************/
+
+	/*****************************************************************************/
+	/******* Sync outputImage ****************************************************/
+	/*****************************************************************************/
+	status = Bk9000_MBT_Read_Output_Image(	pcoupler->mbt_link, pcoupler->outputImage,
+											pcoupler->total_out_words, DFT_MBT_TOUT );
+	if(status != 0)
+	{/* We fail to sync output image. */
+		/* I don't know why the Bk9000 keeps saying bus error, hope this would help */
+		Bk9000_MBT_Reset(pcoupler->mbt_link, DFT_MBT_TOUT);
+		pcoupler->couplerReady = 0;	/* Not so necessary */
+		/* Force MBT close link, we don't mess up existing err code */
+		MBT_Disconnect(pcoupler->mbt_link, 0);
+		epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		if(Bk9000_DRV_DEBUG)
+			printf(	"Bk9000_Coupler_Init %s Error: Failed to sync output processing image to local!\n",
+					MBT_GetName(pcoupler->mbt_link));
+		return -1;
+	}
+	/*******************************************************************************************************************************/
+
+	pcoupler->couplerReady = 1;	/* Everything OK */
+	epicsMutexUnlock(pcoupler->mutex_lock);
+	/* if(Bk9000_DRV_DEBUG) */
+	printf("Successfully connected to Bk9000 %s!\n", MBT_GetName(pcoupler->mbt_link));
+
+	/* Disable watchdog timer by default */
+	MBT_DisableWatchdog( pcoupler->mbt_link );
+	return 0;
+}
+
+#define	OP_NO_ERROR	0
+#define	OP_NORMAL_ERROR	1
+#define	OP_FATAL_ERROR	2
+static int Bk9000_Operation(Bk9000_COUPLER * pcoupler)
+{
+	SINT32	msgQstatus, status;
+	SINT32	NofSigs;
+	UINT32	loop;
+	UINT32	errorHappened;	/* 0: no error; 1: normal error; 2: fatal error, we must turn off couplerReady flag */
+	Bk9000_SIGNAL	*psignal;
+	Bk9000_SIGNAL_LIST	sig_wrt_outimg_list, sig_rd_inpimg_list, sig_rd_outimg_list, sig_other_list;
+
+	epicsTimeStamp	curTS;
+	SINT32	linkStat;
+	UINT32	exceptCnt;
+
+	if(pcoupler == NULL)
+	{
+		errlogPrintf("Bk9000_Operation Error: Invalid coupler ptr!\n" );
+		return -1;
+	}
+
+	while(TRUE)
+	{
+		errorHappened = OP_NO_ERROR;
+		msgQstatus = epicsMessageQueueReceiveWithTimeout(	pcoupler->msgQ_id, &psignal,
+															sizeof(Bk9000_SIGNAL *), OPTHREAD_MSGQ_TMOUT );
+		if(msgQstatus < 0)
+		{/* Time out, no request, do heartbeat to avoid link drop */
+			if(pcoupler->couplerReady)
+			{
+				status = Bk9000_MBT_TestLink(pcoupler->mbt_link, DFT_MBT_TOUT);
+				if(status != 0)
+				{
+					/* something wrong, maybe link lost, maybe exception, but nothing fatal */
+					errorHappened = max(OP_NORMAL_ERROR, errorHappened);
+				}
+			}
+		}
+		else
+		{/* some requests come in */
+			/* Figure out how many requests in queue and deal all of them */
+			NofSigs = epicsMessageQueuePending(pcoupler->msgQ_id);
+			if(!pcoupler->couplerReady)
+			{/* Coupler is not ready, callback all requests right away */
+				/* We loop one more time, because we already read out one psignal */
+				for(loop=0; loop<=NofSigs; loop++)
+				{
+					if ( loop != 0 )
+						epicsMessageQueueReceiveWithTimeout(	pcoupler->msgQ_id, &psignal,
+																sizeof(Bk9000_SIGNAL *), OPTHREAD_MSGQ_TMOUT );
+					psignal->pdevdata->err_code	= ERR_CODE_CPLR_NOT_READY;
+					psignal->pdevdata->op_done	= 1;
+					if(psignal->pdevdata->precord)
+					{
+						dbScanLock(psignal->pdevdata->precord);
+						(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+						dbScanUnlock(psignal->pdevdata->precord);
+					}
+				}
+			}
+			else
+			{/* coupler is ready, we should do real operation */
+				/* We will put all requests into the right list, and figure out which part of processing image we should deal */
+				UINT16	rd_inpimg_bstart=0xFFFF, rd_inpimg_bend=0, wrt_outimg_bstart=0xFFFF, wrt_outimg_bend=0;
+				UINT16	rd_inpimg_wstart=0, rd_inpimg_wcnt=0, wrt_outimg_wstart=0, wrt_outimg_wcnt=0;
+
+				/* We just re-init link list instead of delete, because there is no resource issue */
+				ellInit( (ELLLIST *) &sig_rd_inpimg_list );
+				ellInit( (ELLLIST *) &sig_wrt_outimg_list );
+				ellInit( (ELLLIST *) &sig_rd_outimg_list );
+				ellInit( (ELLLIST *) &sig_other_list );
+
+				/* Read out all existing requests. We loop one more time, because we already read out one psignal */
+				for(loop=0; loop<=NofSigs; loop++)
+				{
+					if ( loop != 0 )
+						epicsMessageQueueReceiveWithTimeout(	pcoupler->msgQ_id, &psignal,
+																sizeof(Bk9000_SIGNAL *), OPTHREAD_MSGQ_TMOUT );
+
+					psignal->pdevdata->err_code = ERR_CODE_NO_ERROR;	/* clean up err_code before we execute it */
+					psignal->pdevdata->op_done = 0;		/* We didn't start yet, of cause not done */
+
+					/* We don't check if individual request is within mapped image */
+					/* The request sender should check it */
+					/* process_fptr should also check it, we only check overall to save cpu time */
+					if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_READ_INPUT_CIMG)
+					{
+						ellAdd( (ELLLIST *) &sig_rd_inpimg_list, (ELLNODE *) psignal );
+						rd_inpimg_bstart = min( rd_inpimg_bstart,
+							16	*	(	pcoupler->installedBusTerm[psignal->pdevdata->slot].complex_in_wordoffset
+									+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.woffset	) );
+						rd_inpimg_bend = max( rd_inpimg_bend,
+							16	*	(	pcoupler->installedBusTerm[psignal->pdevdata->slot].complex_in_wordoffset
+									+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.woffset
+									+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.nwords	) );
+					}
+
+					else if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_READ_INPUT_DIMG)
+					{
+						ellAdd( (ELLLIST *) &sig_rd_inpimg_list, (ELLNODE *) psignal );
+						rd_inpimg_bstart = min( rd_inpimg_bstart, 
+							(	pcoupler->installedBusTerm[psignal->pdevdata->slot].digital_in_bitoffset
+							+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.boffset	) );
+						rd_inpimg_bend = max( rd_inpimg_bend,
+							(	pcoupler->installedBusTerm[psignal->pdevdata->slot].digital_in_bitoffset
+							+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.boffset
+							+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.nbits	) );
+					}
+
+					else if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_WRITE_OUTPUT_CIMG)
+					{
+						/* We got to put value into the image first */
+						if ( (*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg) == 0 )
+						{	/* successfully put data into image */
+							ellAdd( (ELLLIST *) &sig_wrt_outimg_list, (ELLNODE *) psignal );
+							wrt_outimg_bstart = min( wrt_outimg_bstart, 
+								16	*	(	pcoupler->installedBusTerm[psignal->pdevdata->slot].complex_out_wordoffset
+										+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.woffset	) );
+							wrt_outimg_bend = max( wrt_outimg_bend,
+								16	*	(	pcoupler->installedBusTerm[psignal->pdevdata->slot].complex_out_wordoffset
+										+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.woffset
+										+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.nwords	) );
+						}
+						else
+						{/* err_code and op_done should be already set by process_fptr, we just callback */
+							if(psignal->pdevdata->precord)
+							{
+								dbScanLock(psignal->pdevdata->precord);
+								(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+								dbScanUnlock(psignal->pdevdata->precord);
+							}
+						}					
+					}
+
+					else if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_WRITE_OUTPUT_DIMG)
+					{
+						/* We got to put value into the image */
+						if( (*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg) == 0)
+						{/* successfully put data into image */
+							ellAdd( (ELLLIST *) &sig_wrt_outimg_list, (ELLNODE *) psignal );
+							wrt_outimg_bstart = min( wrt_outimg_bstart,
+								(	pcoupler->installedBusTerm[psignal->pdevdata->slot].digital_out_bitoffset
+								+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.boffset	) );
+							wrt_outimg_bend = max( wrt_outimg_bend,
+								(	pcoupler->installedBusTerm[psignal->pdevdata->slot].digital_out_bitoffset
+								+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.boffset
+								+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.nbits	) );
+						}
+						else
+						{/* err_code and op_done should be already set by process_fptr, we just callback */
+							if(psignal->pdevdata->precord)
+							{
+								dbScanLock(psignal->pdevdata->precord);
+								(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+								dbScanUnlock(psignal->pdevdata->precord);
+							}
+						}
+					}
+
+					else if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_READ_OUTPUT_CIMG ||
+							psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_READ_OUTPUT_DIMG)
+					{
+						ellAdd( (ELLLIST *) &sig_rd_outimg_list, (ELLNODE *) psignal );
+					}
+
+					else
+					{
+						ellAdd( (ELLLIST *) &sig_other_list, (ELLNODE *) psignal );
+					}
+				}/* Read out and re-organize all requests */
+
+				/* so far all requests are organized, let's figure out range of processing image */
+				if(rd_inpimg_bstart < rd_inpimg_bend)
+				{
+					/* we got some requests to input image, or else leave rd_inpimg_wstart=0, rd_inpimg_wcnt=0 */
+					rd_inpimg_wstart = rd_inpimg_bstart / 16;
+
+					/* -1 because boffset + nbits, such as 100+4, but bit 104 is not included */
+					rd_inpimg_wcnt = (rd_inpimg_bend-1)/16 +1 - rd_inpimg_wstart;
+
+					/* Make sure we don't ask more than we have */
+					if(rd_inpimg_wstart >= pcoupler->total_in_words)
+					{
+						/* somebody asks some totally non-existing image */
+						/* We should do nothing to hardware, process_fptr should set err_code */
+						rd_inpimg_wstart = 0;
+						rd_inpimg_wcnt = 0;
+					}
+					else
+					{
+						/* Cut off the requests that cross the border */
+						/* Only request existing one, process_fptr should set err_code */
+						/* for those guys that try to cross border */
+						rd_inpimg_wcnt = min(rd_inpimg_wcnt, pcoupler->total_in_words-rd_inpimg_wstart);
+					}
+				}
+
+				if(wrt_outimg_bstart < wrt_outimg_bend)
+				{
+					/* we got some requests to output image, or else leave wrt_outimg_wstart=0, wrt_outimg_wcnt=0 */
+					wrt_outimg_wstart = wrt_outimg_bstart / 16;
+
+					/* -1 because boffset + nbits, such as 100+4, but bit 104 is not included */
+					wrt_outimg_wcnt = (wrt_outimg_bend-1)/16 +1 - wrt_outimg_wstart;
+
+					/* Make sure we don't ask more than we have */
+					if(wrt_outimg_wstart >= pcoupler->total_out_words)
+					{
+						/* somebody asks some totally non-existing image */
+						/* We should do nothing to hardware, process_fptr should set err_code */
+						wrt_outimg_wstart = 0;
+						wrt_outimg_wcnt = 0;
+					}
+					else
+					{
+						/* Cut off the requests that cross the border */
+						/* Only request existing one */
+						/* process_fptr should set err_code for those guys that tried to cross border */
+						wrt_outimg_wcnt = min(wrt_outimg_wcnt, pcoupler->total_out_words-wrt_outimg_wstart);
+					}
+				}
+
+				/* talk to hardware to sync processing image */
+				epicsMutexLock(pcoupler->mutex_lock);
+				status = Bk9000_MBT_Sync_Both_Image(	pcoupler->mbt_link,		rd_inpimg_wstart,
+														rd_inpimg_wcnt,			pcoupler->inputImage,
+														wrt_outimg_wstart,		wrt_outimg_wcnt,
+														pcoupler->outputImage,	DFT_MBT_TOUT );
+				epicsMutexUnlock(pcoupler->mutex_lock);
+
+				if(status == 0)
+				{/* successfully synced processing image */
+					/* The request that try to read processing image now is ok to run */
+					for (	psignal = (Bk9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_rd_inpimg_list );
+							psignal; psignal = (Bk9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
+					{
+						(*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg);
+						/* err_code and op_done should be already set by process_fptr, we just callback */
+						if(psignal->pdevdata->precord)
+						{
+							dbScanLock(psignal->pdevdata->precord);
+							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+							dbScanUnlock(psignal->pdevdata->precord);
+						}
+					}
+
+					/* The request that try to write processing image is successfully done */
+					for (	psignal = (Bk9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_wrt_outimg_list );
+							psignal; psignal = (Bk9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
+					{
+						psignal->pdevdata->err_code = ERR_CODE_NO_ERROR; /* no error */
+						psignal->pdevdata->op_done = 1;	/* we successfully fulfill request */
+						if(psignal->pdevdata->precord)
+						{
+							dbScanLock(psignal->pdevdata->precord);
+							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+							dbScanUnlock(psignal->pdevdata->precord);
+						}
+					}
+
+					for (	psignal = (Bk9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_rd_outimg_list );
+							psignal; psignal = (Bk9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
+					{
+						(*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg);
+						/* err_code and op_done should be already set by process_fptr, we just callback */
+						if(psignal->pdevdata->precord)
+						{
+							dbScanLock(psignal->pdevdata->precord);
+							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+							dbScanUnlock(psignal->pdevdata->precord);
+						}
+					}
+				}/* sync ok */
+				else
+				{
+					/* sync processing image failed */
+					/* We will call back all requesters with err_code=ERR_CODE_SYNC_IMG_FAIL */
+				 	/* then we will make fatal error because we have no idea about output status */
+					/* The request that try to read processing image now is no way to run */
+					for (	psignal = (Bk9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_rd_inpimg_list );
+							psignal; psignal = (Bk9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
+					{
+						/* no need to call process_fptr because we don't know if input image is good */
+						psignal->pdevdata->err_code = ERR_CODE_SYNC_IMG_FAIL;
+						psignal->pdevdata->op_done = 1;	/* even we failed, but anyway we done */
+						if(psignal->pdevdata->precord)
+						{
+							dbScanLock(psignal->pdevdata->precord);
+							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+							dbScanUnlock(psignal->pdevdata->precord);
+						}
+					}
+
+					/* The request that try to write processing image failed */
+					for (	psignal = (Bk9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_wrt_outimg_list );
+							psignal; psignal = (Bk9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
+					{
+						psignal->pdevdata->err_code = ERR_CODE_SYNC_IMG_FAIL;
+						psignal->pdevdata->op_done = 1;	/* we successfully fulfill request */
+						if(psignal->pdevdata->precord)
+						{
+							dbScanLock(psignal->pdevdata->precord);
+							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+							dbScanUnlock(psignal->pdevdata->precord);
+						}
+					}
+
+					for (	psignal = (Bk9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_rd_outimg_list );
+							psignal; psignal = (Bk9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
+					{
+						/* no need to call process_fptr because we don't know if output image is good */
+						psignal->pdevdata->err_code = ERR_CODE_SYNC_IMG_FAIL;
+						psignal->pdevdata->op_done = 1;	/* even we failed, but anyway we done */
+						if(psignal->pdevdata->precord)
+						{
+							dbScanLock(psignal->pdevdata->precord);
+							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+							dbScanUnlock(psignal->pdevdata->precord);
+						}
+					}
+
+					/* Fatal error happened, because we lost image sync */
+					errorHappened = max(OP_FATAL_ERROR, errorHappened);
+				}/* sync fail */
+
+				/* Deal with all else requests that don't need processing image */
+				for (	psignal = (Bk9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_other_list );
+						psignal; psignal = (Bk9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
+				{
+					status = (*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg);
+					/* err_code and op_done should be already set by process_fptr, we just callback */
+					if(psignal->pdevdata->precord)
+					{
+						dbScanLock(psignal->pdevdata->precord);
+						(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
+						dbScanUnlock(psignal->pdevdata->precord);
+					}
+
+					if( status !=0 )
+						/* some error happened, but shouldn't be fatal */
+						errorHappened = max(OP_NORMAL_ERROR, errorHappened);
+				}
+
+				if(pcoupler->needReset)
+				{
+					/** finish me, we reset-delay-reinit here without couplerReady flag change */
+					/* reset fail will be considered as fatal error and cause coupler not ready */
+					/* then external reinit will cause record re-output */
+				}
+			}/* coupler is ready, do real operation */
+		}/* process requests */
+
+		/* We get here because timeout or request processing finished */
+		/* We will deal with link and reset issue here */
+		if(!pcoupler->couplerReady)
+		{
+			UINT32 need_reinit = 0;
+			epicsMutexLock(pcoupler->mutex_lock);
+			epicsTimeGetCurrent(&curTS);
+			if ( epicsTimeDiffInSeconds(&curTS, &(pcoupler->time_last_try)) >= OPTHREAD_RECON_INTVL )
+				need_reinit = 1;
+			epicsMutexUnlock(pcoupler->mutex_lock);
+			if ( need_reinit )
+				Bk9000_Coupler_Init(pcoupler);
+		}/* Coupler not ready */
+		else
+		{/* Coupler is ready, but some error happened */
+			if(errorHappened)
+			{/* if no erro, we don't have to do anything, because every thing is going well */
+				epicsMutexLock(pcoupler->mutex_lock);
+				
+				MBT_GetLinkStat(pcoupler->mbt_link, &linkStat);
+				MBT_GetRemoteErrCnt(pcoupler->mbt_link, &exceptCnt);
+
+				if(linkStat == LINK_OK && exceptCnt >= N_EXC_TO_RST)
+				{	/* We have TCP link, the error is because we got too many exception PDUs,
+					 * let's reset coupler, no matter if we have fatal error
+					 */
+					Bk9000_MBT_Reset(pcoupler->mbt_link, DFT_MBT_TOUT);
+					/* After reset, the link definitely lost, we force link close without mess up last error */
+					MBT_Disconnect(pcoupler->mbt_link, 0);
+					epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
+					
+					/* Of cause, coupler is not ready anymore */
+					pcoupler->couplerReady = 0;
+				}
+				else if(linkStat == LINK_OK && exceptCnt < N_EXC_TO_RST)
+				{	/* either link ok with exception PDU but not so many */
+					if(errorHappened >= OP_FATAL_ERROR )
+					{	/* Fatal error happened, such as we lost sync of processing image */
+						/* We force link close without mess up last error */
+						MBT_Disconnect(pcoupler->mbt_link, 0);
+						epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
+						
+						/* coupler is not ready anymore */
+						pcoupler->couplerReady = 0;
+					}
+					/* or else, no fatal error, let it keep going */
+				}
+				else
+				{/* link lost, turn coupler ready to FALSE, no matter fatal error or not */
+					epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
+					
+					/* Of cause, coupler is not ready anymore */
+					pcoupler->couplerReady = 0;
+				}
+				epicsMutexUnlock(pcoupler->mutex_lock);
+			}/* Error happened */
+		}/* coupler ready but we got errorHappened */
+	}/* infinite loop */
+
+	/* We should never get here */
+	return 0;
+}
+
+/* This function will be called by all device support */
+/* The memory for Bk9000_SIGNAL,Bk9000_SIGPTR,Bk9000_DEVDATA will be malloced inside */
+int	Bk9000_Signal_Init(
+	dbCommon		*	precord,
+	E_EPICS_RTYPE		epics_rtype,
+	char			*	ioString,
+	E_BUSTERM_TYPE		bttype,
+	Bk9000_FPTR			process_fptr,
+	void			*	pextra_arg	)
+{
+	SINT32	count;
+	char	cplrname[MAX_CA_STRING_SIZE];
+	char	func[MAX_CA_STRING_SIZE];
+	SINT32	slotnum;
+
+	Bk9000_COUPLER		* pcoupler;
+	BUSTERM_SIG_DEF		* psig_def;
+
+	Bk9000_DEVSUPDATA	* pdevsupdata;
+	Bk9000_SIGPTR		* psigptr;
+	Bk9000_SIGNAL		* psignal;
+
+	if(precord == NULL)
+	{
+		errlogPrintf("Bk9000_Signal_Init Error: No legal record pointer!\n");
+		return -1;
+	}
+
+	if(ioString == NULL)
+	{
+		errlogPrintf("Bk9000_Signal_Init %s Error: Invalid ioString pointer!\n", precord->name );
+		return -1;
+	}
+
+	count = sscanf(ioString, "%[^:]:%i:%[^:]", cplrname, &slotnum, func);
+	if (count != 3)
+	{
+		errlogPrintf("Bk9000_Signal_Init %s Error: INP/OUT string %s format is illegal!\n", precord->name, ioString);
+		return -1;
+	}
+
+	pcoupler = Bk9000_Get_Coupler_By_Name(cplrname);
+	if(pcoupler == NULL)
+	{
+		errlogPrintf("Bk9000_Signal_Init %s Error: Can't find coupler %s!\n", precord->name, cplrname );
+		return -1;
+	}
+
+	if(bttype == BT_TYPE_Bk9000 && slotnum != 0)
+	{
+		errlogPrintf("Bk9000_Signal_Init %s Error: Coupler %s must be in slot 0!\n", precord->name, cplrname );
+		return -1;
+	}
+
+	if(bttype != BT_TYPE_Bk9000 && (slotnum <= 0 || slotnum > MAX_NUM_OF_BUSTERM) )
+	{
+		errlogPrintf(	"Bk9000_Signal_Init %s Error: Slot %d is invalid. Terminal slots must be <1-%d>!\n",
+						precord->name, slotnum, MAX_NUM_OF_BUSTERM );
+		return -1;
+	}
+
+	if( pcoupler->installedBusTerm[slotnum].pbusterm_img_def->busterm_type != bttype)
+	{
+		errlogPrintf(	"Bk9000_Signal_Init %s Error: Coupler %s slot %d is not KL_%d!\n",
+						precord->name, cplrname, slotnum, bttype );
+		return -1;
+	}
+
+	/* This bttype is already installed, it must have definition, no necessary to check bt_def */
+
+	psig_def = Bk9000_Get_SigDef_By_Ename(bttype, func, epics_rtype);
+	if(psig_def == NULL)
+	{
+		errlogPrintf(	"Bk9000_Signal_Init %s Error: Terminal type %d does not support %s!\n",
+						precord->name, bttype, func );
+		return -1;
+	}
+
+	/* finish me, check if sig_def is within the image range */
+	if( process_fptr == NULL )
+	{
+		errlogPrintf(	"Bk9000_Signal_Init %s Error: Invalid process function ptr!\n",
+						precord->name );
+		return -1;
+	}
+
+	pdevsupdata = (Bk9000_DEVSUPDATA *)malloc(sizeof(Bk9000_DEVSUPDATA));
+	if(pdevsupdata == NULL)
+	{
+		errlogPrintf(	"Bk9000_Signal_Init %s Error: Failed to malloc %zu bytes!\n",
+						precord->name, sizeof(Bk9000_DEVSUPDATA) );
+		return -1;
+	}
+
+	memset( (char *)pdevsupdata, 0, sizeof(Bk9000_DEVSUPDATA) );
+
+	psigptr = &(pdevsupdata->sigptr);
+	psigptr->psignal = &(pdevsupdata->signal);
+
+	psignal = &(pdevsupdata->signal);
+	psignal->process_fptr = process_fptr;
+	psignal->pextra_arg = pextra_arg;
+        psignal->pdevdata = &(pdevsupdata->devdata);
+
+	psignal->pdevdata->pbusterm_sig_def = psig_def;
+	psignal->pdevdata->pcoupler = pcoupler;
+	psignal->pdevdata->precord = precord;
+	psignal->pdevdata->slot = slotnum;
+	psignal->pdevdata->err_code = ERR_CODE_NO_ERROR;
+	psignal->pdevdata->op_done = 0;
+
+	epicsMutexLock(pcoupler->mutex_lock);
+	ellAdd( (ELLLIST *) &(pcoupler->sigptr_list), (ELLNODE *)psigptr );
+	epicsMutexUnlock(pcoupler->mutex_lock);
+	precord->dpvt = (void *)psignal;
+	return 0;
+}
+
+/* This is the default process function, it deals with coupler reg/Mreg and terminal reg */
+/* For image based operation, it supports single bit op and single word op only */
+/* For the op needs more words or bits, it will put ERR_CODE_PROC_NOT_SUPT, you need your own function */
+int	Bk9000_Dft_ProcFunc(Bk9000_DEVDATA * pdevdata, void * pextra_arg)
+{
+	/* SINT32	status; */
+	Bk9000_COUPLER	* pcoupler;
+	UINT32	temp;
+	UINT16	tmp_woffset, tmp_mask;
+	/* UINT16	CS_Roffset, CS_Woffset; */
+
+	if(pdevdata == NULL)
+	{
+		errlogPrintf("No pdevdata passed to default process function!\n");
+		return -1;
+	}
+
+	pcoupler = pdevdata->pcoupler;	/* just for convenience */
+
+	if(!pcoupler->couplerReady)
+		return -1;
+
+	/* finish me, check image range */
+	/* if we use semaphore to protect everything, that might be too heavy */
+	/* We currently protect the write of digital output image */
+	switch(pdevdata->pbusterm_sig_def->busterm_optype)
+	{
+	case BT_OPTYPE_READ_INPUT_CIMG:
+		if( pdevdata->pbusterm_sig_def->args.cimg_rw.nwords != 1 )
+		{
+			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
+			pdevdata->op_done = 1;
+			return -1;
+		}
+
+		pdevdata->value		= pcoupler->inputImage[	pcoupler->installedBusTerm[pdevdata->slot].complex_in_wordoffset
+												+	pdevdata->pbusterm_sig_def->args.cimg_rw.woffset	];
+		pdevdata->err_code	= ERR_CODE_NO_ERROR;
+		pdevdata->op_done	= 1;
+		break;
+	case BT_OPTYPE_READ_OUTPUT_CIMG:
+		if( pdevdata->pbusterm_sig_def->args.cimg_rw.nwords != 1 )
+		{
+			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
+			pdevdata->op_done = 1;
+			return -1;
+		}
+
+		pdevdata->value = pcoupler->outputImage[	pcoupler->installedBusTerm[pdevdata->slot].complex_out_wordoffset
+												+	pdevdata->pbusterm_sig_def->args.cimg_rw.woffset	];
+		pdevdata->err_code = ERR_CODE_NO_ERROR;
+		pdevdata->op_done = 1;
+		break;
+	case BT_OPTYPE_WRITE_OUTPUT_CIMG:
+		if( pdevdata->pbusterm_sig_def->args.cimg_rw.nwords != 1 )
+		{
+			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
+			pdevdata->op_done = 1;
+			return -1;
+		}
+
+		pcoupler->outputImage[	pcoupler->installedBusTerm[pdevdata->slot].complex_out_wordoffset
+							+	pdevdata->pbusterm_sig_def->args.cimg_rw.woffset ] = pdevdata->value;
+		pdevdata->err_code = ERR_CODE_NO_ERROR;
+		/*pdevdata->op_done = 1;*/	/* for write output image, op_done will be set by operation thread */
+		break;
+	case BT_OPTYPE_READ_INPUT_DIMG:
+		if( pdevdata->pbusterm_sig_def->args.dimg_rw.nbits != 1 )
+		{
+			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
+			pdevdata->op_done = 1;
+			return -1;
+		}
+
+		temp	=	pcoupler->installedBusTerm[pdevdata->slot].digital_in_bitoffset
+				+	pdevdata->pbusterm_sig_def->args.dimg_rw.boffset;
+		tmp_woffset = temp / 16;
+		/* tmp_mask = 0x1 << (temp%16); */
+		pdevdata->value = ( pcoupler->inputImage[tmp_woffset] >> (temp%16) ) & 0x1;
+		pdevdata->err_code = ERR_CODE_NO_ERROR;
+		pdevdata->op_done = 1;
+		break;
+	case BT_OPTYPE_READ_OUTPUT_DIMG:
+		if( pdevdata->pbusterm_sig_def->args.dimg_rw.nbits != 1 )
+		{
+			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
+			pdevdata->op_done = 1;
+			return -1;
+		}
+
+		temp	=	pcoupler->installedBusTerm[pdevdata->slot].digital_out_bitoffset
+				+	pdevdata->pbusterm_sig_def->args.dimg_rw.boffset;
+		tmp_woffset = temp / 16;
+		/* tmp_mask = 0x1 << (temp%16); */
+		pdevdata->value = ( pcoupler->outputImage[tmp_woffset] >> (temp%16) ) & 0x1;
+		pdevdata->err_code = ERR_CODE_NO_ERROR;
+		pdevdata->op_done = 1;
+		break;
+	case BT_OPTYPE_WRITE_OUTPUT_DIMG:
+		if( pdevdata->pbusterm_sig_def->args.dimg_rw.nbits != 1 )
+		{
+			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
+			pdevdata->op_done = 1;
+			return -1;
+		}
+
+		temp	=	pcoupler->installedBusTerm[pdevdata->slot].digital_out_bitoffset
+				+	pdevdata->pbusterm_sig_def->args.dimg_rw.boffset;
+		tmp_woffset = temp / 16;
+		tmp_mask = 0x1 << (temp%16);
+		epicsMutexLock(pcoupler->mutex_lock);
+		pcoupler->outputImage[tmp_woffset] = (	pdevdata->value
+											?	( pcoupler->outputImage[tmp_woffset] | tmp_mask )
+											:	( pcoupler->outputImage[tmp_woffset] & (~tmp_mask) ) );
+		epicsMutexUnlock(pcoupler->mutex_lock);
+		pdevdata->err_code = ERR_CODE_NO_ERROR;
+		/*pdevdata->op_done = 1;*/      /* for write output image, op_done will be set by operation thread */
+		break;
+	/* finish me */
+	case BT_OPTYPE_READ_CPLR_MREG:
+		break;
+	case BT_OPTYPE_WRITE_CPLR_MREG:
+		break;
+	case BT_OPTYPE_READ_CPLR_REG:
+		break;
+	case BT_OPTYPE_WRITE_CPLR_REG:
+		break;
+	case BT_OPTYPE_READ_TERM_REG:
+		break;
+	case BT_OPTYPE_WRITE_TERM_REG:
+		break;
+	case BT_OPTYPE_CPLR_DIAG:
+		break;
+	default:
+		pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
+		pdevdata->op_done = 1;
+		return -1;
+	}
+	return 0;
+}
+
+/* This is the function will be called in device support init function to init output record */
+int	Bk9000_Dft_OutInit(Bk9000_SIGNAL * psignal)
+{
+        /* SINT32  status; */
+	Bk9000_DEVDATA	* pdevdata;
+	Bk9000_COUPLER  * pcoupler;
+	UINT32  temp;
+	UINT16  tmp_woffset/*, tmp_mask*/;
+	/* UINT16  CS_Roffset, CS_Woffset; */
+
+	if(psignal == NULL)
+	{
+		errlogPrintf("No psignal passed to default OutInit function!\n");
+		return -1;
+	}
+
+	pdevdata = psignal->pdevdata;
+	pcoupler = pdevdata->pcoupler;  /* just for convenience */
+
+	if(!pcoupler->couplerReady)
+		return -1;
+
+	/* finish me, check image range */
+	switch(pdevdata->pbusterm_sig_def->busterm_optype)
+	{
+	case BT_OPTYPE_WRITE_OUTPUT_CIMG:
+		if( pdevdata->pbusterm_sig_def->args.cimg_rw.nwords != 1 )
+		{
+			pdevdata->err_code = ERR_CODE_OUTINIT_NOT_SUPT;
+			pdevdata->op_done = 1;
+			return -1;
+		}
+
+		pdevdata->value	=	pcoupler->outputImage[	pcoupler->installedBusTerm[pdevdata->slot].complex_out_wordoffset
+												+	pdevdata->pbusterm_sig_def->args.cimg_rw.woffset ];
+		pdevdata->err_code = ERR_CODE_NO_ERROR;
+		pdevdata->op_done = 1;
+		break;
+	case BT_OPTYPE_WRITE_OUTPUT_DIMG:
+		if( pdevdata->pbusterm_sig_def->args.dimg_rw.nbits != 1 )
+		{
+			pdevdata->err_code = ERR_CODE_OUTINIT_NOT_SUPT;
+			pdevdata->op_done = 1;
+			return -1;
+		}
+
+		temp	=	pcoupler->installedBusTerm[pdevdata->slot].digital_out_bitoffset
+				+	pdevdata->pbusterm_sig_def->args.dimg_rw.boffset;
+		tmp_woffset = temp / 16;
+		/* tmp_mask = 0x1 << (temp%16); */
+		pdevdata->value = ( pcoupler->outputImage[tmp_woffset] >> (temp%16) ) & 0x1;
+		pdevdata->err_code = ERR_CODE_NO_ERROR;
+		pdevdata->op_done = 1;
+		break;
+	/* finish me */
+	case BT_OPTYPE_WRITE_CPLR_MREG:
+		break;
+	case BT_OPTYPE_WRITE_CPLR_REG:
+		break;
+	case BT_OPTYPE_WRITE_TERM_REG:
+		break;
+	case BT_OPTYPE_READ_INPUT_CIMG:
+	case BT_OPTYPE_READ_OUTPUT_CIMG:
+	case BT_OPTYPE_READ_INPUT_DIMG:
+	case BT_OPTYPE_READ_OUTPUT_DIMG:
+	case BT_OPTYPE_READ_CPLR_MREG:
+	case BT_OPTYPE_READ_CPLR_REG:
+	case BT_OPTYPE_READ_TERM_REG:
+	case BT_OPTYPE_CPLR_DIAG:
+	default:
+	/* There is no need to do output init for this kind op type */
+		pdevdata->err_code = ERR_CODE_OUTINIT_NOT_SUPT;
+		pdevdata->op_done = 1;
+		return -1;
+	}
+	return 0;
+}
+
+/**************************************************************************************************/
+/* Here we supply the driver report function for epics                                            */
+/**************************************************************************************************/
+static	long    Bk9000_MBT_EPICS_Init();
+static	long    Bk9000_MBT_EPICS_Report(int level);
+
+const struct drvet drvBk9000_MBT = {2,                              /*2 Table Entries */
+			     (DRVSUPFUN) Bk9000_MBT_EPICS_Report,	/* Driver Report Routine */
+			     (DRVSUPFUN) Bk9000_MBT_EPICS_Init};	/* Driver Initialization Routine */
+
+epicsExportAddress(drvet,drvBk9000_MBT);
+
+/* implementation */
+static	long    Bk9000_MBT_EPICS_Init()
+{
+	return	Bk9000_Couplers_Init_Once();
+}
+
+static	long    Bk9000_MBT_EPICS_Report(int level)
+{
+	Bk9000_COUPLER	* pcoupler;
+
+	printf("\n"Bk9000_MBT_DRV_VER_STRING"\n\n");
+	if(!cplr_list_inited)
+	{
+		printf("Bk9000_MBT_EPICS_Report Error: Coupler linked list is not initialized!\n\n");
+		return 0;
+	}
+
+	if(level > 0)	/* we only get into link list for detail when user wants */
+	{
+		for (	pcoupler=(Bk9000_COUPLER *)ellFirst((ELLLIST *)&bk9000_cplr_list);
+				pcoupler; pcoupler = (Bk9000_COUPLER *)ellNext((ELLNODE *)pcoupler) )
+		{
+			printf("\tBeckhoff coupler %s is installed\n", MBT_GetName(pcoupler->mbt_link));
+			if(level > 1)
+				printf(	"\tcouplerID is %s, coupler is %s\n\n",
+						pcoupler->couplerID, (pcoupler->couplerReady)?"ready":"not ready");
+		}
+	}
+
+	return 0;
+}
+
diff --git a/Bk9000_MBTApp/src/drvBk9000_MBTRegister.cpp b/Bk9000_MBTApp/src/drvBk9000_MBTRegister.cpp
new file mode 100644
index 0000000..baff502
--- /dev/null
+++ b/Bk9000_MBTApp/src/drvBk9000_MBTRegister.cpp
@@ -0,0 +1,85 @@
+/* drvBk9000_MBTRegister.cpp */
+
+#include <stddef.h>
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+
+#include "iocsh.h"
+#include "Bk9000_MBT_Common.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif	/* __cplusplus */
+
+extern SINT32 Bk9000_DRV_DEBUG;
+extern SINT32 Bk9000_DEV_DEBUG;
+
+static const iocshArg Bk9000_DRV_DEBUGArg0 = {"value", iocshArgInt};
+static const iocshArg *const Bk9000_DRV_DEBUGArgs[1] = {&Bk9000_DRV_DEBUGArg0};
+static const iocshFuncDef Bk9000_DRV_DEBUGDef = {"Bk9000_DRV_DEBUG", 1, Bk9000_DRV_DEBUGArgs};
+static void Bk9000_DRV_DEBUGCall(const iocshArgBuf * args)
+{
+	Bk9000_DRV_DEBUG = args[0].ival;
+}
+ 
+static const iocshArg Bk9000_DEV_DEBUGArg0 = {"value", iocshArgInt};
+static const iocshArg *const Bk9000_DEV_DEBUGArgs[1] = {&Bk9000_DEV_DEBUGArg0};
+static const iocshFuncDef Bk9000_DEV_DEBUGDef = {"Bk9000_DEV_DEBUG", 1, Bk9000_DEV_DEBUGArgs};
+static void Bk9000_DEV_DEBUGCall(const iocshArgBuf * args)
+{
+	Bk9000_DEV_DEBUG = args[0].ival;
+}
+
+static const iocshArg Bk9000_Coupler_AddArg0 = {"cplrname", iocshArgString};
+static const iocshArg Bk9000_Coupler_AddArg1 = {"ipaddr", iocshArgString};
+static const iocshArg Bk9000_Coupler_AddArg2 = {"init_string", iocshArgString};
+static const iocshArg * const Bk9000_Coupler_AddArgs[3] = {&Bk9000_Coupler_AddArg0, &Bk9000_Coupler_AddArg1, &Bk9000_Coupler_AddArg2};
+static const iocshFuncDef Bk9000_Coupler_AddDef = {"Bk9000_Coupler_Add", 3, Bk9000_Coupler_AddArgs};
+static void Bk9000_Coupler_AddCall(const iocshArgBuf * args)
+{
+	Bk9000_Coupler_Add( args[0].sval, args[1].sval, args[2].sval );
+}
+
+static const iocshArg Bk9000_Terminal_AddArg0 = {"cplrname", iocshArgString};
+static const iocshArg Bk9000_Terminal_AddArg1 = {"slot", iocshArgInt};
+static const iocshArg Bk9000_Terminal_AddArg2 = {"btname", iocshArgString};
+static const iocshArg Bk9000_Terminal_AddArg3 = {"init_string", iocshArgString};
+static const iocshArg * const Bk9000_Terminal_AddArgs[4] = {&Bk9000_Terminal_AddArg0, &Bk9000_Terminal_AddArg1, &Bk9000_Terminal_AddArg2, &Bk9000_Terminal_AddArg3};
+static const iocshFuncDef Bk9000_Terminal_AddDef = {"Bk9000_Terminal_Add", 4, Bk9000_Terminal_AddArgs};
+static void Bk9000_Terminal_AddCall(const iocshArgBuf * args)
+{
+	Bk9000_Terminal_Add( args[0].sval, (UINT16)args[1].ival, args[2].sval, args[3].sval );
+}
+
+void drvBk9000_MBT_Register()
+{
+	static int firstTime = 1;
+	if  (!firstTime)
+	    return;
+	firstTime = 0;
+	iocshRegister(&Bk9000_DRV_DEBUGDef, Bk9000_DRV_DEBUGCall);
+	iocshRegister(&Bk9000_DEV_DEBUGDef, Bk9000_DEV_DEBUGCall);
+	iocshRegister(&Bk9000_Coupler_AddDef, Bk9000_Coupler_AddCall);
+	iocshRegister(&Bk9000_Terminal_AddDef, Bk9000_Terminal_AddCall);
+}
+
+epicsExportRegistrar(drvBk9000_MBT_Register);
+
+#ifdef __cplusplus
+}
+#endif	/* __cplusplus */
+
+/*
+ * Register commands on application startup
+ * In the funture we might change this to xxx = drvBk9000_MBT_Register(); to guarantee link
+ */
+class drvBk9000_MBT_iocshReg
+{
+public:
+    drvBk9000_MBT_iocshReg()
+	{
+		drvBk9000_MBT_Register();
+    }
+};
+static drvBk9000_MBT_iocshReg drvBk9000_MBT_iocshRegObj;
diff --git a/Bk9000_MBTApp/srcDisplay/Bx9000Info-lcls.edl b/Bk9000_MBTApp/srcDisplay/Bx9000Info-lcls.edl
new file mode 100644
index 0000000..5efb0f4
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/Bx9000Info-lcls.edl
@@ -0,0 +1,929 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 613
+y 162
+w 620
+h 450
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+ctlFont "courier-bold-r-14.0"
+ctlFontAlign "right"
+btnFont "courier-medium-r-8.0"
+fgColor index 14
+bgColor index 8
+textColor index 10
+ctlFgColor1 index 25
+ctlFgColor2 index 30
+ctlBgColor1 index 5
+ctlBgColor2 index 10
+topShadowColor index 5
+botShadowColor index 10
+title "Temperature - Beckhoff Bk9000 Coupler Diagnostic"
+showGrid
+snapToGrid
+pvType "EPICS"
+endScreenProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 10
+y 80
+w 600
+h 350
+lineColor index 3
+fill
+fillColor index 3
+endObjectProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 80
+y 140
+w 410
+h 60
+lineColor index 29
+fillColor index 5
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 0
+y 0
+w 620
+h 40
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 56
+value {
+  "Beckhoff Bk9000 Diagnostic"
+  "Coupler $(apc)    $(apc):LOCATION"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 10
+y 60
+w 170
+h 20
+font "helvetica-bold-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+value {
+  "Bk9000 Test & Maintenance"
+}
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 20
+y 110
+w 150
+h 20
+controlPv "$(apc):CPLRNAME"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 20
+y 90
+w 80
+h 14
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Coupler Name"
+}
+autoSize
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 190
+y 110
+w 150
+h 20
+controlPv "$(apc):CPLRIPADDR"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 190
+y 90
+w 109
+h 14
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Coupler IP Address"
+}
+autoSize
+endObjectProperties
+
+# (Exit Button)
+object activeExitButtonClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 550
+y 10
+w 48
+h 24
+fgColor index 14
+bgColor index 3
+topShadowColor index 1
+botShadowColor index 11
+label "Exit"
+font "helvetica-medium-r-12.0"
+3d
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 360
+y 90
+w 60
+h 14
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Coupler ID"
+}
+autoSize
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 360
+y 110
+w 150
+h 20
+controlPv "$(apc):CPLRID"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 10
+y 210
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Complex Out Words"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 10
+y 240
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Complex In Words"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 10
+y 270
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Digital In Bits"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 10
+y 300
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Digital Out Bits"
+}
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 140
+y 210
+w 150
+h 20
+controlPv "$(apc):CPLRCOUTWDS"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 140
+y 240
+w 150
+h 20
+controlPv "$(apc):CPLRCINWDS"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 140
+y 300
+w 150
+h 20
+controlPv "$(apc):CPLRDINBITS"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 140
+y 270
+w 150
+h 20
+controlPv "$(apc):CPLRDOUTBITS"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 450
+y 240
+w 150
+h 20
+controlPv "$(apc):CPLROPTHRDNAME"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 320
+y 240
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Op Thread ID"
+}
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 450
+y 210
+w 150
+h 20
+controlPv "$(apc):CPLROPTHRDNAME"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 320
+y 210
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Op Thread Name"
+}
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 90
+y 170
+w 150
+h 20
+controlPv "$(apc):CPLRLINKSTAT"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 90
+y 150
+w 61
+h 14
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 29
+bgColor index 5
+useDisplayBg
+value {
+  "Link Status"
+}
+autoSize
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 320
+y 170
+w 150
+h 20
+controlPv "$(apc):CPLRREADY"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 320
+y 150
+w 82
+h 14
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 29
+bgColor index 5
+useDisplayBg
+value {
+  "Coupler Status"
+}
+autoSize
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 10
+y 340
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Disconnect Time"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 10
+y 370
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Last Retry Time"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 10
+y 400
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Connect Time"
+}
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 140
+y 340
+w 200
+h 20
+controlPv "$(apc):CPLRTLOSTCONN"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 140
+y 370
+w 200
+h 20
+controlPv "$(apc):CPLRTLASTTRY"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 140
+y 400
+w 200
+h 20
+controlPv "$(apc):CPLRTSETCONN"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 450
+y 400
+w 150
+h 20
+controlPv "$(apc):CPLRNOFPKTS"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 320
+y 400
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "# Packets"
+}
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 450
+y 370
+w 150
+h 20
+controlPv "$(apc):CPLRNOFEXCP"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 320
+y 370
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "# Errors"
+}
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 450
+y 340
+w 150
+h 20
+controlPv "$(apc):CPLRNOFCONN"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 320
+y 340
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "# Connections"
+}
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 440
+y 430
+w 168
+h 16
+controlPv "SIOC:SYS0:AL00:TOD"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 10
+y 430
+w 120
+h 16
+controlPv "SIOC:SYS0:AL00:MODE"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 320
+y 270
+w 120
+h 20
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 5
+useDisplayBg
+value {
+  "Number of Signals"
+}
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 450
+y 270
+w 150
+h 20
+controlPv "$(apc):CPLRNOFSIGS"
+fgColor index 14
+fgAlarm
+bgColor index 6
+fill
+font "courier-medium-r-12.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
diff --git a/Bk9000_MBTApp/srcDisplay/Bx9000Info.edl b/Bk9000_MBTApp/srcDisplay/Bx9000Info.edl
new file mode 100644
index 0000000..0c66e7f
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/Bx9000Info.edl
@@ -0,0 +1,1082 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 100
+y 186
+w 900
+h 600
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+ctlFont "courier-bold-r-14.0"
+ctlFontAlign "right"
+btnFont "courier-medium-r-8.0"
+fgColor index 10
+bgColor index 3
+textColor index 10
+ctlFgColor1 index 25
+ctlFgColor2 index 30
+ctlBgColor1 index 5
+ctlBgColor2 index 10
+topShadowColor index 5
+botShadowColor index 10
+pvType "EPICS"
+endScreenProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 147
+y 9
+w 222
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 25
+bgColor index 5
+useDisplayBg
+value {
+  "Bk9000 Coupler Info Page"
+}
+autoSize
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 18
+y 350
+w 308
+h 61
+
+beginGroup
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 18
+y 375
+w 308
+h 36
+controlPv "$(COUPLER_LOC):CplrTLostConn"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 66
+y 350
+w 213
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Time we lost connection:"
+}
+autoSize
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 44
+y 41
+w 196
+h 59
+
+beginGroup
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 44
+y 64
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrName"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 81
+y 41
+w 122
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Coupler Name"
+}
+autoSize
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 342
+y 41
+w 196
+h 59
+
+beginGroup
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 342
+y 64
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrIPAddr"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 374
+y 41
+w 132
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Coupler IPAddr"
+}
+autoSize
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 639
+y 41
+w 196
+h 59
+
+beginGroup
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 639
+y 64
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrID"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 691
+y 41
+w 92
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Coupler ID"
+}
+autoSize
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 16
+y 423
+w 313
+h 61
+
+beginGroup
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 16
+y 423
+w 313
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Last time we tried to set connection:"
+}
+autoSize
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 18
+y 448
+w 308
+h 36
+controlPv "$(COUPLER_LOC):CplrTLastTry"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 18
+y 496
+w 308
+h 61
+
+beginGroup
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 57
+y 496
+w 230
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Time we setup connection:"
+}
+autoSize
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 18
+y 521
+w 308
+h 36
+controlPv "$(COUPLER_LOC):CplrTSetConn"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 44
+y 121
+w 391
+h 152
+
+beginGroup
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 44
+y 247
+w 124
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Digital In Bits:"
+}
+autoSize
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 44
+y 207
+w 141
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Digital Out Bits:"
+}
+autoSize
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 44
+y 167
+w 163
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Complex In Words:"
+}
+autoSize
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 44
+y 127
+w 180
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Complex Out Words:"
+}
+autoSize
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 239
+y 237
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrDinBits"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 239
+y 199
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrDoutBits"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 239
+y 160
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrCinWds"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 239
+y 121
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrCoutWds"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 482
+y 119
+w 353
+h 154
+
+beginGroup
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 482
+y 231
+w 123
+h 42
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "# of records "
+  "talking to HW:"
+}
+autoSize
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 482
+y 178
+w 121
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Op Thread ID:"
+}
+autoSize
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 482
+y 125
+w 151
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Op Thread Name:"
+}
+autoSize
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 639
+y 233
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrNofSigs"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 639
+y 171
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrOpThrdID"
+displayMode "hex"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 639
+y 119
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrOpThrdName"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 370
+y 423
+w 196
+h 60
+
+beginGroup
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 370
+y 447
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrNofExcp"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 399
+y 423
+w 139
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "# of exceptions:"
+}
+autoSize
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 370
+y 351
+w 196
+h 60
+
+beginGroup
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 370
+y 375
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrNofConn"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 386
+y 351
+w 164
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "Nth of Connection:"
+}
+autoSize
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 370
+y 497
+w 196
+h 60
+
+beginGroup
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 390
+y 497
+w 156
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 45
+bgColor index 5
+useDisplayBg
+value {
+  "# of packets sent:"
+}
+autoSize
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 370
+y 521
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrNofPkts"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 641
+y 351
+w 196
+h 60
+
+beginGroup
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 675
+y 351
+w 129
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 126
+bgColor index 5
+useDisplayBg
+value {
+  "MBT Link Stat:"
+}
+autoSize
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 641
+y 375
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrLinkStat"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 642
+y 424
+w 196
+h 58
+
+beginGroup
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 672
+y 424
+w 136
+h 21
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 20
+bgColor index 5
+useDisplayBg
+value {
+  "Coupler Status:"
+}
+autoSize
+lineWidth 2
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 642
+y 446
+w 196
+h 36
+controlPv "$(COUPLER_LOC):CplrReady"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "helvetica-bold-r-16.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Exit Button)
+object activeExitButtonClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 644
+y 511
+w 192
+h 44
+fgColor index 45
+bgColor index 30
+topShadowColor index 5
+botShadowColor index 10
+label "EXIT"
+font "courier-medium-r-16.0"
+3d
+endObjectProperties
+
diff --git a/Bk9000_MBTApp/srcDisplay/Bx9000InstalledBTs.edl b/Bk9000_MBTApp/srcDisplay/Bx9000InstalledBTs.edl
new file mode 100644
index 0000000..dcf7d95
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/Bx9000InstalledBTs.edl
@@ -0,0 +1,491 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 58
+y 504
+w 1132
+h 100
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+ctlFont "courier-bold-r-14.0"
+ctlFontAlign "right"
+btnFont "courier-medium-r-8.0"
+fgColor index 10
+bgColor index 3
+textColor index 10
+ctlFgColor1 index 25
+ctlFgColor2 index 30
+ctlBgColor1 index 5
+ctlBgColor2 index 10
+topShadowColor index 5
+botShadowColor index 10
+pvType "EPICS"
+endScreenProperties
+
+# (Exit Button)
+object activeExitButtonClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 1023
+y 19
+w 88
+h 26
+fgColor index 45
+bgColor index 5
+topShadowColor index 5
+botShadowColor index 10
+label "EXIT"
+font "courier-medium-r-16.0"
+3d
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 14
+y 21
+w 1103
+h 65
+
+beginGroup
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 14
+y 56
+w 1103
+h 30
+
+beginGroup
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 934
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot14"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 868
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot13"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 803
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot12"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 737
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot11"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 671
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot10"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 606
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot9"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 540
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot8"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 474
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot7"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 409
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot6"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 343
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot5"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 277
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot4"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 212
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot3"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 146
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot2"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 80
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot1"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 14
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot0"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 1000
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot15"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+# (RegTextupdate)
+object RegTextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 1065
+y 56
+w 52
+h 30
+controlPv "$(COUPLER_LOC):CplrBTSlot16"
+fgColor index 25
+fgAlarm
+bgColor index 5
+fill
+font "courier-bold-r-14.0"
+fontAlign "center"
+endObjectProperties
+
+# Additional properties
+beginObjectProperties
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 364
+y 21
+w 402
+h 19
+font "helvetica-bold-i-18.0"
+fontAlign "center"
+fgColor index 10
+bgColor index 5
+useDisplayBg
+value {
+  "$(COUPLER_LOC): Installed Bus Terminals"
+}
+autoSize
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
diff --git a/Bk9000_MBTApp/srcDisplay/KL3162.edl b/Bk9000_MBTApp/srcDisplay/KL3162.edl
new file mode 100644
index 0000000..cbc095b
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/KL3162.edl
@@ -0,0 +1,677 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 140
+y 51
+w 780
+h 250
+font "helvetica-medium-r-10.0"
+ctlFont "helvetica-medium-r-10.0"
+btnFont "helvetica-medium-r-10.0"
+fgColor index 14
+bgColor index 7
+textColor index 14
+ctlFgColor1 index 25
+ctlFgColor2 index 18
+ctlBgColor1 index 4
+ctlBgColor2 index 4
+topShadowColor index 1
+botShadowColor index 11
+title "Analog - Analog Diagnostic - $(apc)"
+showGrid
+snapToGrid
+gridSize 4
+endScreenProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 8
+y 64
+w 760
+h 140
+lineColor index 3
+fill
+fillColor index 3
+endObjectProperties
+
+# (Related Display)
+object relatedDisplayClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 216
+y 108
+w 120
+h 16
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+font "helvetica-medium-r-10.0"
+invisible
+numPvs 4
+numDsps 1
+displayFileName {
+  0 "analog_limits"
+}
+setPosition {
+  0 "button"
+}
+symbols {
+  0 "dev=$(apc):M$(m)_CH1_EGU"
+}
+endObjectProperties
+
+# (Related Display)
+object relatedDisplayClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 216
+y 136
+w 124
+h 20
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+font "helvetica-medium-r-10.0"
+invisible
+numPvs 4
+numDsps 1
+displayFileName {
+  0 "analog_limits"
+}
+setPosition {
+  0 "button"
+}
+symbols {
+  0 "dev=$(apc):M$(m)_CH1_EGU"
+}
+endObjectProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 0
+y 0
+w 912
+h 40
+lineColor index 54
+fill
+fillColor index 54
+lineWidth 0
+endObjectProperties
+
+# (Exit Button)
+object activeExitButtonClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 848
+y 8
+w 48
+h 24
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+label "Exit"
+font "helvetica-medium-r-12.0"
+3d
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 0
+w 336
+h 40
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 53
+useDisplayBg
+value {
+  "Analog Diagnostic"
+  "$(apc)  Module $(m)    "
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 56
+w 105
+h 14
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+value {
+  " Analog Channels "
+}
+autoSize
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 344
+y 80
+w 144
+h 16
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Channel Name"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 600
+y 208
+w 168
+h 16
+controlPv "SIOC:SYS0:AL00:TOD"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 8
+y 208
+w 120
+h 16
+controlPv "SIOC:SYS0:AL00:MODE"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+endObjectProperties
+
+# (Related Display)
+object relatedDisplayClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 616
+y 8
+w 96
+h 24
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+font "helvetica-medium-r-12.0"
+buttonLabel "Home Screen..."
+numPvs 4
+numDsps 1
+displayFileName {
+  0 "lcls_main"
+}
+setPosition {
+  0 "parentWindow"
+}
+replaceSymbols {
+  0 1
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 208
+y 80
+w 120
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "EGU"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 88
+y 80
+w 120
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Raw (Volts)"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 80
+w 80
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Channel"
+}
+endObjectProperties
+
+# (Exit Button)
+object activeExitButtonClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 720
+y 8
+w 48
+h 24
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+label "Exit"
+font "helvetica-medium-r-12.0"
+3d
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 552
+y 80
+w 144
+h 16
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Description"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 344
+y 104
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH1_EGU.FLNK"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 32
+y 104
+w 32
+h 24
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "1"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 344
+y 136
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH2_EGU.FLNK"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 32
+y 136
+w 32
+h 24
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "2"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 552
+y 136
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH2_EGU.DESC"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 552
+y 104
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH1_EGU.DESC"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 5
+release 0
+x 216
+y 136
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH2_EGU"
+format "decimal"
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+fgAlarm
+bgColor index 4
+limitsFromDb
+nullColor index 4
+nullCondition "nullEq0"
+showUnits
+useAlarmBorder
+newPos
+objType "monitors"
+noExecuteClipMask
+endObjectProperties
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 5
+release 0
+x 216
+y 104
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH1_EGU"
+format "decimal"
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+fgAlarm
+bgColor index 4
+limitsFromDb
+nullColor index 4
+nullCondition "nullEq0"
+showUnits
+useAlarmBorder
+newPos
+objType "monitors"
+noExecuteClipMask
+endObjectProperties
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 5
+release 0
+x 88
+y 136
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH2_SIG"
+format "decimal"
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+fgAlarm
+bgColor index 4
+limitsFromDb
+nullColor index 4
+nullCondition "nullEq0"
+useAlarmBorder
+newPos
+objType "monitors"
+noExecuteClipMask
+endObjectProperties
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 5
+release 0
+x 88
+y 104
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH1_SIG"
+format "decimal"
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+fgAlarm
+bgColor index 4
+limitsFromDb
+nullColor index 4
+nullCondition "nullEq0"
+useAlarmBorder
+newPos
+objType "monitors"
+noExecuteClipMask
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 176
+y 4
+w 248
+h 32
+
+beginGroup
+
+# (Text Monitor)
+object activeXTextDspClass:noedit
+beginObjectProperties
+major 4
+minor 5
+release 0
+x 264
+y 20
+w 160
+h 14
+controlPv "$(apc):LOCATION"
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 4
+useDisplayBg
+autoHeight
+limitsFromDb
+nullColor index 18
+useHexPrefix
+newPos
+objType "monitors"
+endObjectProperties
+
+# (Text Monitor)
+object activeXTextDspClass:noedit
+beginObjectProperties
+major 4
+minor 5
+release 0
+x 264
+y 4
+w 160
+h 14
+controlPv "$(apc):CPLRBTSLOT$(m)"
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 4
+useDisplayBg
+autoHeight
+limitsFromDb
+nullColor index 18
+useHexPrefix
+newPos
+objType "monitors"
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 176
+y 4
+w 80
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 4
+useDisplayBg
+value {
+  "Module Type:"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 176
+y 20
+w 80
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 4
+useDisplayBg
+value {
+  "Location:"
+}
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
diff --git a/Bk9000_MBTApp/srcDisplay/KL3162_sum.edl b/Bk9000_MBTApp/srcDisplay/KL3162_sum.edl
new file mode 100644
index 0000000..f3ef5d6
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/KL3162_sum.edl
@@ -0,0 +1,106 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 2287
+y 254
+w 75
+h 140
+font "helvetica-medium-r-18.0"
+ctlFont "helvetica-medium-r-18.0"
+btnFont "helvetica-medium-r-18.0"
+fgColor index 14
+bgColor index 7
+textColor index 14
+ctlFgColor1 index 14
+ctlFgColor2 index 0
+ctlBgColor1 index 0
+ctlBgColor2 index 14
+topShadowColor index 0
+botShadowColor index 14
+showGrid
+endScreenProperties
+
+# (Related Display)
+object relatedDisplayClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 3
+y 3
+w 31
+h 110
+fgColor index 14
+bgColor index 4
+topShadowColor index 14
+botShadowColor index 11
+font "helvetica-medium-r-10.0"
+numPvs 4
+numDsps 1
+displayFileName {
+  0 "KL3162.edl"
+}
+setPosition {
+  0 "parentWindow"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 10
+y 7
+w 22
+h 12
+font "helvetica-medium-r-10.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 4
+useDisplayBg
+value {
+  "$(m)"
+}
+autoSize
+endObjectProperties
+
+# (Circle)
+object activeCircleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 15
+y 38
+w 8
+h 8
+lineColor index 14
+fill
+fillColor index 16
+fillAlarm
+alarmPv "$(apc):M$(m)_CH1_SIG"
+visInvert
+endObjectProperties
+
+# (Circle)
+object activeCircleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 15
+y 74
+w 8
+h 8
+lineColor index 14
+fill
+fillColor index 16
+fillAlarm
+alarmPv "$(apc):M$(m)_CH2_SIG"
+visInvert
+endObjectProperties
+
diff --git a/Bk9000_MBTApp/srcDisplay/KL3202-RTD-lcls.edl b/Bk9000_MBTApp/srcDisplay/KL3202-RTD-lcls.edl
new file mode 100644
index 0000000..adc3b24
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/KL3202-RTD-lcls.edl
@@ -0,0 +1,497 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 275
+y 345
+w 780
+h 195
+font "helvetica-medium-r-10.0"
+ctlFont "helvetica-medium-r-10.0"
+btnFont "helvetica-medium-r-10.0"
+fgColor index 14
+bgColor index 7
+textColor index 14
+ctlFgColor1 index 25
+ctlFgColor2 index 18
+ctlBgColor1 index 4
+ctlBgColor2 index 4
+topShadowColor index 1
+botShadowColor index 11
+title "Temperature - RTD Diagnostic - $(apc)"
+showGrid
+snapToGrid
+gridSize 8
+endScreenProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 0
+y 0
+w 912
+h 40
+lineColor index 54
+fill
+fillColor index 54
+lineWidth 0
+endObjectProperties
+
+# (Exit Button)
+object activeExitButtonClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 848
+y 8
+w 48
+h 24
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+label "Exit"
+font "helvetica-medium-r-12.0"
+3d
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 0
+w 248
+h 40
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 53
+useDisplayBg
+value {
+  "RTD Diagnostic"
+  "$(apc)  Module $(m)    $(apc):LOCATION"
+}
+endObjectProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 8
+y 64
+w 760
+h 112
+lineColor index 3
+fill
+fillColor index 3
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 56
+w 88
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+value {
+  "RTD Channels"
+}
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 88
+y 104
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH1_TEMP.A"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 344
+y 104
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH1_TEMP.FLNK"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 344
+y 80
+w 144
+h 16
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Channel Name"
+}
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 600
+y 176
+w 168
+h 16
+controlPv "SIOC:SYS0:AL00:TOD"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 16
+y 176
+w 120
+h 16
+controlPv "SIOC:SYS0:AL00:MODE"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+endObjectProperties
+
+# (Related Display)
+object relatedDisplayClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 656
+y 8
+w 96
+h 24
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+font "helvetica-medium-r-12.0"
+buttonLabel "Home Screen..."
+numPvs 4
+numDsps 1
+displayFileName {
+  0 "lcls_main"
+}
+setPosition {
+  0 "parentWindow"
+}
+replaceSymbols {
+  0 1
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 208
+y 80
+w 120
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "T (DegF)"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 88
+y 80
+w 120
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "T (DegC)"
+}
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 216
+y 104
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH1_TEMP"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 32
+y 104
+w 32
+h 24
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "1"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 80
+w 80
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Channel"
+}
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 88
+y 136
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH2_TEMP.A"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 344
+y 136
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH2_TEMP.FLNK"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 216
+y 136
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH2_TEMP"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 32
+y 136
+w 32
+h 24
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "2"
+}
+endObjectProperties
+
+# (Exit Button)
+object activeExitButtonClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 584
+y 8
+w 48
+h 24
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+label "Exit"
+font "helvetica-medium-r-12.0"
+3d
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 544
+y 80
+w 144
+h 16
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Description"
+}
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 544
+y 136
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH2_TEMP.DESC"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Textupdate)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 544
+y 104
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH1_TEMP.DESC"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
diff --git a/Bk9000_MBTApp/srcDisplay/KL3314-TC-lcls.edl b/Bk9000_MBTApp/srcDisplay/KL3314-TC-lcls.edl
new file mode 100644
index 0000000..c9aba99
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/KL3314-TC-lcls.edl
@@ -0,0 +1,697 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 1707
+y 730
+w 780
+h 260
+font "helvetica-medium-r-10.0"
+ctlFont "helvetica-medium-r-10.0"
+btnFont "helvetica-medium-r-10.0"
+fgColor index 14
+bgColor index 7
+textColor index 14
+ctlFgColor1 index 25
+ctlFgColor2 index 18
+ctlBgColor1 index 4
+ctlBgColor2 index 4
+topShadowColor index 1
+botShadowColor index 11
+title "Temperature - Thermocouple Diagnostic - $(apc)"
+showGrid
+snapToGrid
+gridSize 8
+endScreenProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 0
+y 0
+w 912
+h 40
+lineColor index 54
+fill
+fillColor index 54
+lineWidth 0
+endObjectProperties
+
+# (Exit Button)
+object activeExitButtonClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 848
+y 8
+w 48
+h 24
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+label "Exit"
+font "helvetica-medium-r-12.0"
+3d
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 0
+w 336
+h 40
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 53
+useDisplayBg
+value {
+  "Thermocouple Diagnostic"
+  "$(apc)  Module $(m)     $(apc):LOCATION"
+}
+endObjectProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 8
+y 64
+w 760
+h 176
+lineColor index 3
+fill
+fillColor index 3
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 56
+w 88
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+value {
+  "TC Channels"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 88
+y 104
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH1_SIG"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 344
+y 104
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH1_TEMP.FLNK"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 344
+y 80
+w 144
+h 16
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Channel Name"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 600
+y 240
+w 168
+h 16
+controlPv "SIOC:SYS0:AL00:TOD"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+fontAlign "right"
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 8
+y 240
+w 120
+h 16
+controlPv "SIOC:SYS0:AL00:MODE"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+endObjectProperties
+
+# (Related Display)
+object relatedDisplayClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 616
+y 8
+w 96
+h 24
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+font "helvetica-medium-r-12.0"
+buttonLabel "Home Screen..."
+numPvs 4
+numDsps 1
+displayFileName {
+  0 "lcls_main"
+}
+setPosition {
+  0 "parentWindow"
+}
+replaceSymbols {
+  0 1
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 208
+y 80
+w 120
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "T (DegF)"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 88
+y 80
+w 120
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "T (DegC)"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 216
+y 104
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH1_TEMP"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 32
+y 104
+w 32
+h 24
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "1"
+}
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 80
+w 80
+h 16
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Channel"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 88
+y 136
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH2_SIG"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 344
+y 136
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH2_TEMP.FLNK"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 216
+y 136
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH2_TEMP"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 32
+y 136
+w 32
+h 24
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "2"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 88
+y 168
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH3_SIG"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 344
+y 168
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH3_TEMP.FLNK"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 216
+y 168
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH3_TEMP"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 32
+y 168
+w 32
+h 24
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "3"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 88
+y 200
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH4_SIG"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 344
+y 200
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH4_TEMP.FLNK"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 216
+y 200
+w 120
+h 24
+controlPv "$(apc):M$(m)_CH4_TEMP"
+precision 1
+fgColor index 16
+fgAlarm
+bgColor index 12
+fill
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+lineWidth 2
+lineAlarm
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 32
+y 200
+w 32
+h 24
+font "helvetica-medium-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "4"
+}
+endObjectProperties
+
+# (Exit Button)
+object activeExitButtonClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 720
+y 8
+w 48
+h 24
+fgColor index 14
+bgColor index 4
+topShadowColor index 1
+botShadowColor index 11
+label "Exit"
+font "helvetica-medium-r-12.0"
+3d
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 552
+y 136
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH2_TEMP.DESC"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 552
+y 104
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH1_TEMP.DESC"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 552
+y 80
+w 144
+h 16
+font "helvetica-medium-r-12.0"
+fgColor index 14
+bgColor index 3
+useDisplayBg
+value {
+  "Description"
+}
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 552
+y 200
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH4_TEMP.DESC"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
+# (Text Update)
+object TextupdateClass
+beginObjectProperties
+major 10
+minor 0
+release 0
+x 552
+y 168
+w 192
+h 24
+controlPv "$(apc):M$(m)_CH3_TEMP.DESC"
+precision 1
+fgColor index 14
+bgColor index 12
+font "helvetica-medium-r-12.0"
+lineWidth 0
+endObjectProperties
+
diff --git a/Bk9000_MBTApp/srcDisplay/Makefile b/Bk9000_MBTApp/srcDisplay/Makefile
new file mode 100644
index 0000000..0b37a0a
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/Makefile
@@ -0,0 +1,35 @@
+#  -*- Makefile -*-
+T_A = $EPICS_HOST_ARCH
+
+TOP = ../..
+include $(TOP)/configure/CONFIG
+#----------------------------------------
+#  ADD MACRO DEFINITIONS AFTER THIS LINE
+
+
+# EDM Screens to install
+EDLS += Bk9000Info.edl
+EDLS += Bk9000InstalledBTs.edl
+EDLS += Bk9000Info-lcls.edl 
+EDLS += KL3202-RTD-lcls.edl
+EDLS += KL3314-TC-lcls.edl
+EDLS += KL3162_sum.edl
+EDLS += KL3162.edl
+
+# Install images to be used by EDM (Gif and Png are supported)
+#GIFS += Myfirst.gif
+#PNGS += Myfirst.png
+
+# EDM Screens to install
+# # If you want to install all screens and are
+# # lazy use the wildcard method. :)
+## EDLS+=$(wildcard *.edl)
+# #PNGS+=$(wildcard *.png)
+# #GIFS+=$(wildcard *.gif)
+
+
+include $(TOP)/configure/RULES
+#----------------------------------------
+#  ADD RULES AFTER THIS LINE
+
+
diff --git a/Bk9000_MBTApp/srcDisplay/emb-thermocouple-detail.edl b/Bk9000_MBTApp/srcDisplay/emb-thermocouple-detail.edl
new file mode 100644
index 0000000..296b07e
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/emb-thermocouple-detail.edl
@@ -0,0 +1,496 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 790
+y 549
+w 314
+h 280
+font "helvetica-medium-r-12.0"
+ctlFont "helvetica-medium-r-12.0"
+ctlFontAlign "center"
+btnFont "helvetica-medium-r-14.0"
+btnFontAlign "center"
+fgColor index 14
+bgColor index 3
+textColor index 14
+ctlFgColor1 index 25
+ctlFgColor2 index 15
+ctlBgColor1 index 5
+ctlBgColor2 index 15
+topShadowColor index 1
+botShadowColor index 14
+title "emb-thermocouple-detail"
+showGrid
+snapToGrid
+gridSize 4
+endScreenProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y 4
+w 240
+h 20
+font "helvetica-bold-r-12.0"
+fontAlign "center"
+fgColor index 14
+bgColor index 0
+useDisplayBg
+value {
+  "$(TC)"
+}
+endObjectProperties
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 4
+y 32
+w 240
+h 20
+controlPv "$(TC).DESC"
+font "helvetica-medium-r-12.0"
+fgColor index 26
+bgColor index 5
+editable
+motifWidget
+limitsFromDb
+nullColor index 1
+smartRefresh
+useHexPrefix
+newPos
+objType "controls"
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 4
+y 56
+w 240
+h 20
+
+beginGroup
+
+# (Text Monitor)
+object activeXTextDspClass:noedit
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 176
+y 56
+w 68
+h 20
+controlPv "$(TC)"
+font "helvetica-bold-r-14.0"
+fontAlign "center"
+fgColor index 16
+fgAlarm
+bgColor index 12
+motifWidget
+limitsFromDb
+nullColor index 0
+smartRefresh
+useHexPrefix
+showUnits
+newPos
+objType "monitors"
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y 56
+w 160
+h 20
+font "helvetica-bold-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 1
+useDisplayBg
+value {
+  "Current Temp"
+}
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 4
+y 80
+w 240
+h 20
+
+beginGroup
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 176
+y 80
+w 68
+h 20
+controlPv "$(TC).HIHI"
+font "helvetica-medium-r-12.0"
+fgColor index 26
+bgColor index 5
+editable
+motifWidget
+limitsFromDb
+nullColor index 0
+smartRefresh
+newPos
+objType "controls"
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y 80
+w 160
+h 20
+font "helvetica-bold-r-12.0"
+fontAlign "right"
+fgColor index 21
+bgColor index 1
+useDisplayBg
+value {
+  "Major Alarm High Limit"
+}
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 4
+y 109
+w 240
+h 20
+
+beginGroup
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 176
+y 109
+w 68
+h 20
+controlPv "$(TC).HIGH"
+font "helvetica-medium-r-12.0"
+fgColor index 26
+bgColor index 5
+editable
+motifWidget
+limitsFromDb
+nullColor index 0
+smartRefresh
+newPos
+objType "controls"
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y 109
+w 160
+h 20
+font "helvetica-bold-r-12.0"
+fontAlign "right"
+fgColor index 35
+bgColor index 1
+useDisplayBg
+value {
+  "Minor Alarm High Limit"
+}
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 4
+y 138
+w 240
+h 20
+
+beginGroup
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 176
+y 138
+w 68
+h 20
+controlPv "$(TC).LOW"
+font "helvetica-medium-r-12.0"
+fgColor index 26
+bgColor index 5
+editable
+motifWidget
+limitsFromDb
+nullColor index 0
+smartRefresh
+newPos
+objType "controls"
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y 138
+w 160
+h 20
+font "helvetica-bold-r-12.0"
+fontAlign "right"
+fgColor index 35
+bgColor index 1
+useDisplayBg
+value {
+  "Minor Alarm Low Limit"
+}
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 4
+y 167
+w 240
+h 20
+
+beginGroup
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 176
+y 167
+w 68
+h 20
+controlPv "$(TC).LOLO"
+font "helvetica-medium-r-12.0"
+fgColor index 26
+bgColor index 5
+editable
+motifWidget
+limitsFromDb
+nullColor index 0
+smartRefresh
+newPos
+objType "controls"
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y 167
+w 160
+h 20
+font "helvetica-bold-r-12.0"
+fontAlign "right"
+fgColor index 21
+bgColor index 1
+useDisplayBg
+value {
+  "Major Alarm Low Limit"
+}
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 4
+y 196
+w 240
+h 20
+
+beginGroup
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 176
+y 196
+w 68
+h 20
+controlPv "$(TC).ADEL"
+font "helvetica-medium-r-12.0"
+fgColor index 26
+bgColor index 5
+editable
+motifWidget
+limitsFromDb
+nullColor index 0
+smartRefresh
+newPos
+objType "controls"
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y 196
+w 160
+h 20
+font "helvetica-bold-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 1
+useDisplayBg
+value {
+  "Archive Deadband"
+}
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
+# (Group)
+object activeGroupClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 4
+y 222
+w 240
+h 20
+
+beginGroup
+
+# (Text Control)
+object activeXTextDspClass
+beginObjectProperties
+major 4
+minor 2
+release 0
+x 176
+y 222
+w 68
+h 20
+controlPv "$(TC).MDEL"
+font "helvetica-medium-r-12.0"
+fgColor index 26
+bgColor index 5
+editable
+motifWidget
+limitsFromDb
+nullColor index 0
+smartRefresh
+newPos
+objType "controls"
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y 222
+w 160
+h 20
+font "helvetica-bold-r-12.0"
+fontAlign "right"
+fgColor index 14
+bgColor index 1
+useDisplayBg
+value {
+  "Monitor Deadband"
+}
+endObjectProperties
+
+endGroup
+
+endObjectProperties
+
diff --git a/Bk9000_MBTApp/srcDisplay/thermocouple-detail-1.edl b/Bk9000_MBTApp/srcDisplay/thermocouple-detail-1.edl
new file mode 100644
index 0000000..dea193f
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/thermocouple-detail-1.edl
@@ -0,0 +1,93 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 224
+y 455
+w 312
+h 330
+font "helvetica-medium-r-12.0"
+ctlFont "helvetica-medium-r-12.0"
+ctlFontAlign "center"
+btnFont "helvetica-medium-r-14.0"
+btnFontAlign "center"
+fgColor index 14
+bgColor index 7
+textColor index 14
+ctlFgColor1 index 25
+ctlFgColor2 index 15
+ctlBgColor1 index 5
+ctlBgColor2 index 10
+topShadowColor index 1
+botShadowColor index 14
+title "$(TC) Details"
+showGrid
+snapToGrid
+gridSize 4
+endScreenProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 0
+y 0
+w 264
+h 28
+lineColor index 54
+fill
+fillColor index 54
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y -1
+w 160
+h 24
+font "helvetica-bold-r-14.0"
+fgColor index 14
+bgColor index 4
+useDisplayBg
+value {
+  "Thermocouple Details"
+}
+endObjectProperties
+
+# (Embedded Window)
+object activePipClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 40
+w 256
+h 272
+fgColor index 14
+bgColor index 0
+topShadowColor index 0
+botShadowColor index 14
+displaySource "menu"
+filePv "LOC\\emb-tc=i:0"
+sizeOfs 5
+numDsps 1
+displayFileName {
+  0 "Bk9000Screens/emb-thermocouple-detail.edl"
+}
+menuLabel {
+  0 "TC Detail"
+}
+symbols {
+  0 "TC=$(TC)"
+}
+noScroll
+endObjectProperties
+
diff --git a/Bk9000_MBTApp/srcDisplay/thermocouple-detail-2.edl b/Bk9000_MBTApp/srcDisplay/thermocouple-detail-2.edl
new file mode 100644
index 0000000..c187daa
--- /dev/null
+++ b/Bk9000_MBTApp/srcDisplay/thermocouple-detail-2.edl
@@ -0,0 +1,123 @@
+4 0 1
+beginScreenProperties
+major 4
+minor 0
+release 1
+x 1980
+y 295
+w 554
+h 329
+font "helvetica-medium-r-12.0"
+ctlFont "helvetica-medium-r-12.0"
+ctlFontAlign "center"
+btnFont "helvetica-medium-r-14.0"
+btnFontAlign "center"
+fgColor index 14
+bgColor index 7
+textColor index 14
+ctlFgColor1 index 25
+ctlFgColor2 index 15
+ctlBgColor1 index 5
+ctlBgColor2 index 10
+topShadowColor index 1
+botShadowColor index 14
+title "Thermocouple Details"
+showGrid
+snapToGrid
+gridSize 4
+endScreenProperties
+
+# (Rectangle)
+object activeRectangleClass
+beginObjectProperties
+major 4
+minor 0
+release 0
+x 0
+y 0
+w 532
+h 28
+lineColor index 54
+fill
+fillColor index 54
+endObjectProperties
+
+# (Static Text)
+object activeXTextClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 4
+y -1
+w 160
+h 24
+font "helvetica-bold-r-14.0"
+fgColor index 14
+bgColor index 4
+useDisplayBg
+value {
+  "Thermocouple Details"
+}
+endObjectProperties
+
+# (Embedded Window)
+object activePipClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 8
+y 40
+w 256
+h 272
+fgColor index 14
+bgColor index 0
+topShadowColor index 0
+botShadowColor index 14
+displaySource "menu"
+filePv "LOC\\emb-tc=i:0"
+sizeOfs 5
+numDsps 1
+displayFileName {
+  0 "Bk9000Screens/emb-thermocouple-detail.edl"
+}
+menuLabel {
+  0 "TC Detail"
+}
+symbols {
+  0 "TC=$(TC1)"
+}
+noScroll
+endObjectProperties
+
+# (Embedded Window)
+object activePipClass
+beginObjectProperties
+major 4
+minor 1
+release 0
+x 276
+y 40
+w 256
+h 272
+fgColor index 14
+bgColor index 0
+topShadowColor index 0
+botShadowColor index 14
+displaySource "menu"
+filePv "LOC\\emb-tc=i:0"
+sizeOfs 5
+numDsps 1
+displayFileName {
+  0 "Bk9000Screens/emb-thermocouple-detail.edl"
+}
+menuLabel {
+  0 "TC Detail"
+}
+symbols {
+  0 "TC=$(TC2)"
+}
+noScroll
+endObjectProperties
+
diff --git a/Bx9000_MBTApp/Db/Bx9000-lcls.substitutions b/Bx9000_MBTApp/Db/Bx9000-lcls.substitutions
deleted file mode 100644
index 0d97e64..0000000
--- a/Bx9000_MBTApp/Db/Bx9000-lcls.substitutions
+++ /dev/null
@@ -1,42 +0,0 @@
-#==============================================================================
-#
-# Abs:  Beckhoff Bx9000 Controller
-#
-# Name: Bx9000.substitutions
-#
-# Auth: 22-May-2009, Bruce Hill			(bhill)
-# Rev : dd-mmm-yyyy, Reviewer's Name	(USERNAME)
-#
-#==============================================================================
-#
-
-file Bx9000Info-lcls.template
-{
-	pattern
-	{	REPROCEVT	}
-	{	188			}
-}
-
-file Bx9000InstalledBTs-lcls.template
-{
-	pattern
-	{	SLOT	}
-	{	0		}
-	{	1		}
-	{	2		}
-	{	3		}
-	{	4		}
-	{	5		}
-	{	6		}
-	{	7		}
-	{	8		}
-	{	9		}
-	{	10		}
-	{	11		}
-	{	12		}
-	{	13		}
-	{	14		}
-	{	15		}
-	{	16		}
-}
-
diff --git a/Bx9000_MBTApp/Db/Bx9000Info-lcls.template b/Bx9000_MBTApp/Db/Bx9000Info-lcls.template
deleted file mode 100644
index 3f474a3..0000000
--- a/Bx9000_MBTApp/Db/Bx9000Info-lcls.template
+++ /dev/null
@@ -1,201 +0,0 @@
-record(stringin, "$(APC):LOCATION") {
-  field(VAL, "$(LOCATION)")
-  field(PINI, "YES")
-}
-record(longin, "$(APC):CPLRCOUTWDS") {
-  field(DESC, "Complex output words")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:COWCNT")
-}
-
-record(longin, "$(APC):CPLRCINWDS") {
-  field(DESC, "Complex input words")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CIWCNT")
-}
-
-record(longin, "$(APC):CPLRDOUTBITS") {
-  field(DESC, "Digital output bits")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:DOBCNT")
-}
-
-record(longin, "$(APC):CPLRDINBITS") {
-  field(DESC, "Digital input bits")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:DIBCNT")
-}
-
-record(longin, "$(APC):CPLRNOFCONN") {
-  field(DESC, "Nth of Connection")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:NOFCONN")
-}
-
-record(longin, "$(APC):CPLRNOFEXCP") {
-  field(DESC, "Nth of Exception")
-  field(SCAN, "1 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:NOFEXCP")
-}
-
-record(longin, "$(APC):CPLRNOFPKTS") {
-  field(DESC, "Number of Packets Sent")
-  field(SCAN, "1 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:NOFPKTS")
-}
-
-record(longin, "$(APC):CPLRNOFSIGS") {
-  field(DESC, "Number of Signals of CPLR")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:NOFSIGS")
-}
-
-record(longin, "$(APC):CPLROPTHRDID") {
-  field(DESC, "Op thread ID")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:OPTHRDID")
-}
-
-record(mbbi, "$(APC):CPLRREADY") {
-  field(DESC, "Is Coupler Ready")
-  field(SCAN, "1 second")
-  field(PINI, "YES")
-  field(PHAS, "2")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CPLRRDY")
-  field(ZRVL, "0")
-  field(ONVL, "1")
-  field(ZRST, "Not Ready")
-  field(ONST, "Ready")
-  field(ZRSV, "MAJOR")
-  field(ONSV, "NO_ALARM")
-  field(SHFT, "0")
-  field(UNSV, "INVALID")
-  field(FLNK, "$(APC):CPLRREPROCCALC")
-}
-
-record(calcout, "$(APC):CPLRREPROCCALC") {
-  field(SCAN, "Passive")
-  field(CALC, "A")
-  field(INPA, "$(APC):CPLRREADY")
-  field(INPB, "$(APC):CPLRREPROCCALC.VAL")
-  field(OUT,  "$(APC):CPLRREPROCFOUT.SELN")
-  field(FLNK, "$(APC):CPLRREPROCFOUT")
-  field(OCAL, "((A=1)&&(B#1))?1:0")
-  field(VAL,  "1")
-  field(DESC, "Calc reprocess")
-  field(OOPT, "Every Time")
-  field(DOPT, "Use OCAL")
-  field(PINI, "NO")
-}
-
-record(fanout, "$(APC):CPLRREPROCFOUT") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Passive")
-  field(SELM, "Mask")
-  field(LNK1, "$(APC):OUTPUTREPROCEVT")
-  field(PINI, "NO")
-  field(SELN, "")
-}
-
-record(event, "$(APC):OUTPUTREPROCEVT")
-{
-  field(DESC, "Post event to reproc")
-  field(SCAN, "Passive")
-  field(VAL,  "$(REPROCEVT)")
-}
-
-record(mbbi, "$(APC):CPLRLINKSTAT") {
-  field(DESC, "Coupler MBT Link Stat")
-  field(SCAN, "1 second")
-  field(PINI, "YES")
-  field(PHAS, "2")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:LINKSTAT")
-  field(ZRVL, "0")
-  field(ONVL, "1")
-  field(TWVL, "2")
-  field(THVL, "3")
-  field(ZRST, "Link Down")
-  field(ONST, "Link OK")
-  field(TWST, "Connecting")
-  field(THST, "Unsupported")
-  field(SHFT, "0")
-  field(UNSV, "INVALID")
-}
-
-record(stringin, "$(APC):CPLRNAME") {
-  field(DESC, "Name of Coupler")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CPLRNAME")
-}
-
-record(stringin, "$(APC):CPLRIPADDR") {
-  field(DESC, "IPAddr of Coupler")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CPLRIP")
-}
-
-record(stringin, "$(APC):CPLRTLOSTCONN") {
-  field(DESC, "Time of lost connection")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:TLSTCONN")
-}
-
-record(stringin, "$(APC):CPLRTSETCONN") {
-  field(DESC, "Time of set connection")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:TSETCONN")
-}
-
-record(stringin, "$(APC):CPLRTLASTTRY") {
-  field(DESC, "Time of last try connect")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:TLASTTRY")
-}
-
-record(stringin, "$(APC):CPLRID") {
-  field(DESC, "ID of Coupler")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CPLRID")
-}
-
-record(stringin, "$(APC):CPLROPTHRDNAME") {
-  field(DESC, "Op Thread Name of Coupler")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:OPTHRDNM")
-}
-
-
diff --git a/Bx9000_MBTApp/Db/Bx9000Info.template b/Bx9000_MBTApp/Db/Bx9000Info.template
deleted file mode 100644
index 3f474a3..0000000
--- a/Bx9000_MBTApp/Db/Bx9000Info.template
+++ /dev/null
@@ -1,201 +0,0 @@
-record(stringin, "$(APC):LOCATION") {
-  field(VAL, "$(LOCATION)")
-  field(PINI, "YES")
-}
-record(longin, "$(APC):CPLRCOUTWDS") {
-  field(DESC, "Complex output words")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:COWCNT")
-}
-
-record(longin, "$(APC):CPLRCINWDS") {
-  field(DESC, "Complex input words")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CIWCNT")
-}
-
-record(longin, "$(APC):CPLRDOUTBITS") {
-  field(DESC, "Digital output bits")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:DOBCNT")
-}
-
-record(longin, "$(APC):CPLRDINBITS") {
-  field(DESC, "Digital input bits")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:DIBCNT")
-}
-
-record(longin, "$(APC):CPLRNOFCONN") {
-  field(DESC, "Nth of Connection")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:NOFCONN")
-}
-
-record(longin, "$(APC):CPLRNOFEXCP") {
-  field(DESC, "Nth of Exception")
-  field(SCAN, "1 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:NOFEXCP")
-}
-
-record(longin, "$(APC):CPLRNOFPKTS") {
-  field(DESC, "Number of Packets Sent")
-  field(SCAN, "1 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:NOFPKTS")
-}
-
-record(longin, "$(APC):CPLRNOFSIGS") {
-  field(DESC, "Number of Signals of CPLR")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:NOFSIGS")
-}
-
-record(longin, "$(APC):CPLROPTHRDID") {
-  field(DESC, "Op thread ID")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:OPTHRDID")
-}
-
-record(mbbi, "$(APC):CPLRREADY") {
-  field(DESC, "Is Coupler Ready")
-  field(SCAN, "1 second")
-  field(PINI, "YES")
-  field(PHAS, "2")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CPLRRDY")
-  field(ZRVL, "0")
-  field(ONVL, "1")
-  field(ZRST, "Not Ready")
-  field(ONST, "Ready")
-  field(ZRSV, "MAJOR")
-  field(ONSV, "NO_ALARM")
-  field(SHFT, "0")
-  field(UNSV, "INVALID")
-  field(FLNK, "$(APC):CPLRREPROCCALC")
-}
-
-record(calcout, "$(APC):CPLRREPROCCALC") {
-  field(SCAN, "Passive")
-  field(CALC, "A")
-  field(INPA, "$(APC):CPLRREADY")
-  field(INPB, "$(APC):CPLRREPROCCALC.VAL")
-  field(OUT,  "$(APC):CPLRREPROCFOUT.SELN")
-  field(FLNK, "$(APC):CPLRREPROCFOUT")
-  field(OCAL, "((A=1)&&(B#1))?1:0")
-  field(VAL,  "1")
-  field(DESC, "Calc reprocess")
-  field(OOPT, "Every Time")
-  field(DOPT, "Use OCAL")
-  field(PINI, "NO")
-}
-
-record(fanout, "$(APC):CPLRREPROCFOUT") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Passive")
-  field(SELM, "Mask")
-  field(LNK1, "$(APC):OUTPUTREPROCEVT")
-  field(PINI, "NO")
-  field(SELN, "")
-}
-
-record(event, "$(APC):OUTPUTREPROCEVT")
-{
-  field(DESC, "Post event to reproc")
-  field(SCAN, "Passive")
-  field(VAL,  "$(REPROCEVT)")
-}
-
-record(mbbi, "$(APC):CPLRLINKSTAT") {
-  field(DESC, "Coupler MBT Link Stat")
-  field(SCAN, "1 second")
-  field(PINI, "YES")
-  field(PHAS, "2")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:LINKSTAT")
-  field(ZRVL, "0")
-  field(ONVL, "1")
-  field(TWVL, "2")
-  field(THVL, "3")
-  field(ZRST, "Link Down")
-  field(ONST, "Link OK")
-  field(TWST, "Connecting")
-  field(THST, "Unsupported")
-  field(SHFT, "0")
-  field(UNSV, "INVALID")
-}
-
-record(stringin, "$(APC):CPLRNAME") {
-  field(DESC, "Name of Coupler")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CPLRNAME")
-}
-
-record(stringin, "$(APC):CPLRIPADDR") {
-  field(DESC, "IPAddr of Coupler")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CPLRIP")
-}
-
-record(stringin, "$(APC):CPLRTLOSTCONN") {
-  field(DESC, "Time of lost connection")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:TLSTCONN")
-}
-
-record(stringin, "$(APC):CPLRTSETCONN") {
-  field(DESC, "Time of set connection")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:TSETCONN")
-}
-
-record(stringin, "$(APC):CPLRTLASTTRY") {
-  field(DESC, "Time of last try connect")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:TLASTTRY")
-}
-
-record(stringin, "$(APC):CPLRID") {
-  field(DESC, "ID of Coupler")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:CPLRID")
-}
-
-record(stringin, "$(APC):CPLROPTHRDNAME") {
-  field(DESC, "Op Thread Name of Coupler")
-  field(SCAN, "Passive")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):0:OPTHRDNM")
-}
-
-
diff --git a/Bx9000_MBTApp/Db/Bx9000InstalledBTs-lcls.template b/Bx9000_MBTApp/Db/Bx9000InstalledBTs-lcls.template
deleted file mode 100644
index d2c575d..0000000
--- a/Bx9000_MBTApp/Db/Bx9000InstalledBTs-lcls.template
+++ /dev/null
@@ -1,8 +0,0 @@
-record(longin, "$(APC):CPLRBTSLOT$(SLOT)") {
-  field(DESC, "Bus Terminal Type of slot $(SLOT)")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):$(SLOT):BTTYPE")
-}
-
diff --git a/Bx9000_MBTApp/Db/Bx9000InstalledBTs.template b/Bx9000_MBTApp/Db/Bx9000InstalledBTs.template
deleted file mode 100644
index d2c575d..0000000
--- a/Bx9000_MBTApp/Db/Bx9000InstalledBTs.template
+++ /dev/null
@@ -1,8 +0,0 @@
-record(longin, "$(APC):CPLRBTSLOT$(SLOT)") {
-  field(DESC, "Bus Terminal Type of slot $(SLOT)")
-  field(SCAN, "10 second")
-  field(PINI, "YES")
-  field(DTYP, "Bx9000_Info")
-  field(INP,  "@$(COUPLER):$(SLOT):BTTYPE")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL1104-lcls.template b/Bx9000_MBTApp/Db/KL1104-lcls.template
deleted file mode 100644
index 56dfa06..0000000
--- a/Bx9000_MBTApp/Db/KL1104-lcls.template
+++ /dev/null
@@ -1,23 +0,0 @@
-record(bi, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Digital Channel $(CH) Readback")
-#Need to scan faster than 1 Hz to avoid bad watchdog state?
-  field(SCAN, ".1 second")
-  field(DTYP, "Bx9000_KL1104")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_$(CH)")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(FLNK, "$(ALIAS)")
-  info(autosaveFields, "DESC ZNAM ONAM ZSV OSV")
-}
-
-record(bi, "$(ALIAS)") {
-  field(DESC, "$(D)")
-  field(INP, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(ZSV,  "$(ZSV)")
-  field(OSV,  "$(OSV)")
-  field(COSV, "$(COSV)")
-  info(autosaveFields, "DESC ZNAM ONAM ZSV OSV COSV")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL1104.template b/Bx9000_MBTApp/Db/KL1104.template
deleted file mode 100644
index 4e22f28..0000000
--- a/Bx9000_MBTApp/Db/KL1104.template
+++ /dev/null
@@ -1,48 +0,0 @@
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Digital Channel 1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL1104")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_1")
-  field(ZNAM, "$(SIG1.ZNAM)")
-  field(ONAM, "$(SIG1.ONAM)")
-  field(ZSV,  "$(SIG1.ZSV)")
-  field(OSV,  "$(SIG1.OSV)")
-  field(COSV, "$(SIG1.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Digital Channel 2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL1104")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_2")
-  field(ZNAM, "$(SIG2.ZNAM)")
-  field(ONAM, "$(SIG2.ONAM)")
-  field(ZSV,  "$(SIG2.ZSV)")
-  field(OSV,  "$(SIG2.OSV)")
-  field(COSV, "$(SIG2.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Digital Channel 3 Readback")
-  field(SCAN, "$(SIG3.SCAN)")
-  field(DTYP, "Bx9000_KL1104")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_3")
-  field(ZNAM, "$(SIG3.ZNAM)")
-  field(ONAM, "$(SIG3.ONAM)")
-  field(ZSV,  "$(SIG3.ZSV)")
-  field(OSV,  "$(SIG3.OSV)")
-  field(COSV, "$(SIG3.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Digital Channel 4 Readback")
-  field(SCAN, "$(SIG4.SCAN)")
-  field(DTYP, "Bx9000_KL1104")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_4")
-  field(ZNAM, "$(SIG4.ZNAM)")
-  field(ONAM, "$(SIG4.ONAM)")
-  field(ZSV,  "$(SIG4.ZSV)")
-  field(OSV,  "$(SIG4.OSV)")
-  field(COSV, "$(SIG4.COSV)")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL1124-lcls.template b/Bx9000_MBTApp/Db/KL1124-lcls.template
deleted file mode 100644
index e4ff231..0000000
--- a/Bx9000_MBTApp/Db/KL1124-lcls.template
+++ /dev/null
@@ -1,23 +0,0 @@
-record(bi, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Digital Channel $(CH) Readback")
-#Need to scan faster than 1 Hz to avoid bad watchdog state?
-  field(SCAN, ".1 second")
-  field(DTYP, "Bx9000_KL1124")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_$(CH)")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(FLNK, "$(ALIAS)")
-  info(autosaveFields, "DESC ZNAM ONAM ZSV OSV")
-}
-
-record(bi, "$(ALIAS)") {
-  field(DESC, "$(D)")
-  field(INP, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(ZSV,  "$(ZSV)")
-  field(OSV,  "$(OSV)")
-  field(COSV, "$(COSV)")
-  info(autosaveFields, "DESC ZNAM ONAM ZSV OSV COSV")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL1124.template b/Bx9000_MBTApp/Db/KL1124.template
deleted file mode 100644
index 62c3350..0000000
--- a/Bx9000_MBTApp/Db/KL1124.template
+++ /dev/null
@@ -1,48 +0,0 @@
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Digital Channel 1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL1124")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_1")
-  field(ZNAM, "$(SIG1.ZNAM)")
-  field(ONAM, "$(SIG1.ONAM)")
-  field(ZSV,  "$(SIG1.ZSV)")
-  field(OSV,  "$(SIG1.OSV)")
-  field(COSV, "$(SIG1.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Digital Channel 2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL1124")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_2")
-  field(ZNAM, "$(SIG2.ZNAM)")
-  field(ONAM, "$(SIG2.ONAM)")
-  field(ZSV,  "$(SIG2.ZSV)")
-  field(OSV,  "$(SIG2.OSV)")
-  field(COSV, "$(SIG2.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Digital Channel 3 Readback")
-  field(SCAN, "$(SIG3.SCAN)")
-  field(DTYP, "Bx9000_KL1124")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_3")
-  field(ZNAM, "$(SIG3.ZNAM)")
-  field(ONAM, "$(SIG3.ONAM)")
-  field(ZSV,  "$(SIG3.ZSV)")
-  field(OSV,  "$(SIG3.OSV)")
-  field(COSV, "$(SIG3.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Digital Channel 4 Readback")
-  field(SCAN, "$(SIG4.SCAN)")
-  field(DTYP, "Bx9000_KL1124")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_4")
-  field(ZNAM, "$(SIG4.ZNAM)")
-  field(ONAM, "$(SIG4.ONAM)")
-  field(ZSV,  "$(SIG4.ZSV)")
-  field(OSV,  "$(SIG4.OSV)")
-  field(COSV, "$(SIG4.COSV)")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL1408-lcls.template b/Bx9000_MBTApp/Db/KL1408-lcls.template
deleted file mode 100644
index 0321329..0000000
--- a/Bx9000_MBTApp/Db/KL1408-lcls.template
+++ /dev/null
@@ -1,21 +0,0 @@
-record(bi, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Digital Channel $(CH) Readback")
-#Need to scan faster than 1 Hz to avoid bad watchdog state?
-  field(SCAN, ".1 second")
-  field(DTYP, "Bx9000_KL1408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_$(CH)")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(FLNK, "$(ALIAS)")
-}
-
-record(bi, "$(ALIAS)") {
-  field(DESC, "$(D)")
-  field(INP, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(ZSV,  "$(ZSV)")
-  field(OSV,  "$(OSV)")
-  field(COSV, "$(COSV)")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL1408.template b/Bx9000_MBTApp/Db/KL1408.template
deleted file mode 100644
index 0c689f4..0000000
--- a/Bx9000_MBTApp/Db/KL1408.template
+++ /dev/null
@@ -1,96 +0,0 @@
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Digital Channel 1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL1408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_1")
-  field(ZNAM, "$(SIG1.ZNAM)")
-  field(ONAM, "$(SIG1.ONAM)")
-  field(ZSV,  "$(SIG1.ZSV)")
-  field(OSV,  "$(SIG1.OSV)")
-  field(COSV, "$(SIG1.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Digital Channel 2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL1408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_2")
-  field(ZNAM, "$(SIG2.ZNAM)")
-  field(ONAM, "$(SIG2.ONAM)")
-  field(ZSV,  "$(SIG2.ZSV)")
-  field(OSV,  "$(SIG2.OSV)")
-  field(COSV, "$(SIG2.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Digital Channel 3 Readback")
-  field(SCAN, "$(SIG3.SCAN)")
-  field(DTYP, "Bx9000_KL1408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_3")
-  field(ZNAM, "$(SIG3.ZNAM)")
-  field(ONAM, "$(SIG3.ONAM)")
-  field(ZSV,  "$(SIG3.ZSV)")
-  field(OSV,  "$(SIG3.OSV)")
-  field(COSV, "$(SIG3.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Digital Channel 4 Readback")
-  field(SCAN, "$(SIG4.SCAN)")
-  field(DTYP, "Bx9000_KL1408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_4")
-  field(ZNAM, "$(SIG4.ZNAM)")
-  field(ONAM, "$(SIG4.ONAM)")
-  field(ZSV,  "$(SIG4.ZSV)")
-  field(OSV,  "$(SIG4.OSV)")
-  field(COSV, "$(SIG4.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG5)") {
-  field(DESC, "Digital Channel 5 Readback")
-  field(SCAN, "$(SIG5.SCAN)")
-  field(DTYP, "Bx9000_KL1408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_5")
-  field(ZNAM, "$(SIG5.ZNAM)")
-  field(ONAM, "$(SIG5.ONAM)")
-  field(ZSV,  "$(SIG5.ZSV)")
-  field(OSV,  "$(SIG5.OSV)")
-  field(COSV, "$(SIG5.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG6)") {
-  field(DESC, "Digital Channel 6 Readback")
-  field(SCAN, "$(SIG6.SCAN)")
-  field(DTYP, "Bx9000_KL1408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_6")
-  field(ZNAM, "$(SIG6.ZNAM)")
-  field(ONAM, "$(SIG6.ONAM)")
-  field(ZSV,  "$(SIG6.ZSV)")
-  field(OSV,  "$(SIG6.OSV)")
-  field(COSV, "$(SIG6.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG7)") {
-  field(DESC, "Digital Channel 7 Readback")
-  field(SCAN, "$(SIG7.SCAN)")
-  field(DTYP, "Bx9000_KL1408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_7")
-  field(ZNAM, "$(SIG7.ZNAM)")
-  field(ONAM, "$(SIG7.ONAM)")
-  field(ZSV,  "$(SIG7.ZSV)")
-  field(OSV,  "$(SIG7.OSV)")
-  field(COSV, "$(SIG7.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG8)") {
-  field(DESC, "Digital Channel 8 Readback")
-  field(SCAN, "$(SIG8.SCAN)")
-  field(DTYP, "Bx9000_KL1408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_8")
-  field(ZNAM, "$(SIG8.ZNAM)")
-  field(ONAM, "$(SIG8.ONAM)")
-  field(ZSV,  "$(SIG8.ZSV)")
-  field(OSV,  "$(SIG8.OSV)")
-  field(COSV, "$(SIG8.COSV)")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL1488-lcls.template b/Bx9000_MBTApp/Db/KL1488-lcls.template
deleted file mode 100644
index 87eb66a..0000000
--- a/Bx9000_MBTApp/Db/KL1488-lcls.template
+++ /dev/null
@@ -1,21 +0,0 @@
-record(bi, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Digital Channel $(CH) Readback")
-#Need to scan faster than 1 Hz to avoid bad watchdog state?
-  field(SCAN, ".1 second")
-  field(DTYP, "Bx9000_KL1488")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_$(CH)")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(FLNK, "$(ALIAS)")
-}
-
-record(bi, "$(ALIAS)") {
-  field(DESC, "$(D)")
-  field(INP, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(ZSV,  "$(ZSV)")
-  field(OSV,  "$(OSV)")
-  field(COSV, "$(COSV)")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL1488.template b/Bx9000_MBTApp/Db/KL1488.template
deleted file mode 100644
index d323ea9..0000000
--- a/Bx9000_MBTApp/Db/KL1488.template
+++ /dev/null
@@ -1,96 +0,0 @@
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Digital Channel 1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL1488")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_1")
-  field(ZNAM, "$(SIG1.ZNAM)")
-  field(ONAM, "$(SIG1.ONAM)")
-  field(ZSV,  "$(SIG1.ZSV)")
-  field(OSV,  "$(SIG1.OSV)")
-  field(COSV, "$(SIG1.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Digital Channel 2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL1488")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_2")
-  field(ZNAM, "$(SIG2.ZNAM)")
-  field(ONAM, "$(SIG2.ONAM)")
-  field(ZSV,  "$(SIG2.ZSV)")
-  field(OSV,  "$(SIG2.OSV)")
-  field(COSV, "$(SIG2.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Digital Channel 3 Readback")
-  field(SCAN, "$(SIG3.SCAN)")
-  field(DTYP, "Bx9000_KL1488")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_3")
-  field(ZNAM, "$(SIG3.ZNAM)")
-  field(ONAM, "$(SIG3.ONAM)")
-  field(ZSV,  "$(SIG3.ZSV)")
-  field(OSV,  "$(SIG3.OSV)")
-  field(COSV, "$(SIG3.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Digital Channel 4 Readback")
-  field(SCAN, "$(SIG4.SCAN)")
-  field(DTYP, "Bx9000_KL1488")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_4")
-  field(ZNAM, "$(SIG4.ZNAM)")
-  field(ONAM, "$(SIG4.ONAM)")
-  field(ZSV,  "$(SIG4.ZSV)")
-  field(OSV,  "$(SIG4.OSV)")
-  field(COSV, "$(SIG4.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG5)") {
-  field(DESC, "Digital Channel 5 Readback")
-  field(SCAN, "$(SIG5.SCAN)")
-  field(DTYP, "Bx9000_KL1488")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_5")
-  field(ZNAM, "$(SIG5.ZNAM)")
-  field(ONAM, "$(SIG5.ONAM)")
-  field(ZSV,  "$(SIG5.ZSV)")
-  field(OSV,  "$(SIG5.OSV)")
-  field(COSV, "$(SIG5.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG6)") {
-  field(DESC, "Digital Channel 6 Readback")
-  field(SCAN, "$(SIG6.SCAN)")
-  field(DTYP, "Bx9000_KL1488")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_6")
-  field(ZNAM, "$(SIG6.ZNAM)")
-  field(ONAM, "$(SIG6.ONAM)")
-  field(ZSV,  "$(SIG6.ZSV)")
-  field(OSV,  "$(SIG6.OSV)")
-  field(COSV, "$(SIG6.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG7)") {
-  field(DESC, "Digital Channel 7 Readback")
-  field(SCAN, "$(SIG7.SCAN)")
-  field(DTYP, "Bx9000_KL1488")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_7")
-  field(ZNAM, "$(SIG7.ZNAM)")
-  field(ONAM, "$(SIG7.ONAM)")
-  field(ZSV,  "$(SIG7.ZSV)")
-  field(OSV,  "$(SIG7.OSV)")
-  field(COSV, "$(SIG7.COSV)")
-}
-
-record(bi, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG8)") {
-  field(DESC, "Digital Channel 8 Readback")
-  field(SCAN, "$(SIG8.SCAN)")
-  field(DTYP, "Bx9000_KL1488")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_8")
-  field(ZNAM, "$(SIG8.ZNAM)")
-  field(ONAM, "$(SIG8.ONAM)")
-  field(ZSV,  "$(SIG8.ZSV)")
-  field(OSV,  "$(SIG8.OSV)")
-  field(COSV, "$(SIG8.COSV)")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL2114-lcls.template b/Bx9000_MBTApp/Db/KL2114-lcls.template
deleted file mode 100644
index e47b281..0000000
--- a/Bx9000_MBTApp/Db/KL2114-lcls.template
+++ /dev/null
@@ -1,36 +0,0 @@
- record(bo, "$(ALIAS)") {
-   field(DESC, "$(D)")
-   field(OMSL, "supervisory")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-   field(ZSV,  "$(ZSV)")
-   field(OSV,  "$(OSV)")
-   field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-   field(VAL,  "0")
-   field(PINI, "YES")
-   field(HIGH, "$(HIGH)")
-  info(autosaveFields, "VAL DESC ZNAM ONAM ZSV OSV HIGH")
- }
-
- record(bo, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-   field(DESC, "Digital Channel $(CH) Set")
-   field(DTYP, "Bx9000_KL2114")
-   field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_$(CH)")
-   field(DOL, "$(ALIAS)")
-   field(OMSL, "closed_loop")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-  info(autosaveFields, "VAL DESC ZNAM ONAM ZSV OSV HIGH")
-}
-
-# These BCS outputs are only initiated by user. Do not 
-# want to process on reconnect.
-#record(fanout, "$(APC):M$(SLOT)_CH$(CH)_OUT_REPROC") {
-#  field(DESC, "Process on reconnect")
-#  field(SCAN, "Event")
-#  field(EVNT, "$(REPROCEVT)")
-#  field(SELM, "All")
-#  field(LNK1, "$(APC):M$(SLOT)_CH$(CH)_IN")
-#  field(PINI, "NO")
-#}
-
diff --git a/Bx9000_MBTApp/Db/KL2114.template b/Bx9000_MBTApp/Db/KL2114.template
deleted file mode 100644
index b76288a..0000000
--- a/Bx9000_MBTApp/Db/KL2114.template
+++ /dev/null
@@ -1,54 +0,0 @@
-record(bo, "$(SIG1)")
-{
-  field(DESC, "$(SIG1.DESC)")
-  field(DTYP, "Bx9000_KL2114")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_1")
-  field(ZNAM, "$(SIG1.ZNAM)")
-  field(ONAM, "$(SIG1.ONAM)")
-  field(PINI, "$(SIG1.PINI)")
-}
-
-record(bo, "$(SIG2)")
-{
-  field(DESC, "$(SIG2.DESC)")
-  field(DTYP, "Bx9000_KL2114")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_2")
-  field(ZNAM, "$(SIG2.ZNAM)")
-  field(ONAM, "$(SIG2.ONAM)")
-  field(PINI, "$(SIG2.PINI)")
-}
-
-record(bo, "$(SIG3)")
-{
-  field(DESC, "$(SIG3.DESC)")
-  field(DTYP, "Bx9000_KL2114")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_3")
-  field(ZNAM, "$(SIG3.ZNAM)")
-  field(ONAM, "$(SIG3.ONAM)")
-  field(PINI, "$(SIG3.PINI)")
-}
-
-record(bo, "$(SIG4)")
-{
-  field(DESC, "$(SIG4.DESC)")
-  field(DTYP, "Bx9000_KL2114")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_4")
-  field(ZNAM, "$(SIG4.ZNAM)")
-  field(ONAM, "$(SIG4.ONAM)")
-  field(PINI, "$(SIG4.PINI)")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-record(fanout, "$(SIG1)ReProc")
-{
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(SIG1)")
-  field(LNK2, "$(SIG2)")
-  field(LNK3, "$(SIG3)")
-  field(LNK4, "$(SIG4)")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL2124-lcls-lamp.template b/Bx9000_MBTApp/Db/KL2124-lcls-lamp.template
deleted file mode 100644
index 0b9b58f..0000000
--- a/Bx9000_MBTApp/Db/KL2124-lcls-lamp.template
+++ /dev/null
@@ -1,34 +0,0 @@
- record(bo, "$(ALIAS)") {
-   field(DESC, "$(D)")
-   field(OMSL, "supervisory")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-   field(ZSV,  "$(ZSV)")
-   field(OSV,  "$(OSV)")
-   field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-   field(VAL,  "0")
-   field(PINI, "YES")
-   field(HIGH, "$(HIGH)")
- }
-
- record(bo, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-   field(DESC, "Digital Channel $(CH) Set")
-   field(DTYP, "Bx9000_KL2124")
-   field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_$(CH)")
-   field(DOL, "$(ALIAS)")
-   field(OMSL, "closed_loop")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-}
-
-# These BCS outputs are only initiated by user. Do not 
-# want to process on reconnect.
-#record(fanout, "$(APC):M$(SLOT)_CH$(CH)_OUT_REPROC") {
-#  field(DESC, "Process on reconnect")
-#  field(SCAN, "Event")
-#  field(EVNT, "$(REPROCEVT)")
-#  field(SELM, "All")
-#  field(LNK1, "$(APC):M$(SLOT)_CH$(CH)_IN")
-#  field(PINI, "NO")
-#}
-
diff --git a/Bx9000_MBTApp/Db/KL2124-lcls.template b/Bx9000_MBTApp/Db/KL2124-lcls.template
deleted file mode 100644
index cfa6203..0000000
--- a/Bx9000_MBTApp/Db/KL2124-lcls.template
+++ /dev/null
@@ -1,36 +0,0 @@
- record(bo, "$(ALIAS)") {
-   field(DESC, "$(D)")
-   field(OMSL, "supervisory")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-   field(ZSV,  "$(ZSV)")
-   field(OSV,  "$(OSV)")
-   field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-   field(VAL,  "0")
-   field(PINI, "YES")
-   field(HIGH, "$(HIGH)")
-  info(autosaveFields, "VAL DESC ZNAM ONAM ZSV OSV HIGH")
- }
-
- record(bo, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-   field(DESC, "Digital Channel $(CH) Set")
-   field(DTYP, "Bx9000_KL2124")
-   field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_$(CH)")
-   field(DOL, "$(ALIAS)")
-   field(OMSL, "closed_loop")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-  info(autosaveFields, "VAL DESC ZNAM ONAM ZSV OSV HIGH")
-}
-
-# These BCS outputs are only initiated by user. Do not 
-# want to process on reconnect.
-#record(fanout, "$(APC):M$(SLOT)_CH$(CH)_OUT_REPROC") {
-#  field(DESC, "Process on reconnect")
-#  field(SCAN, "Event")
-#  field(EVNT, "$(REPROCEVT)")
-#  field(SELM, "All")
-#  field(LNK1, "$(APC):M$(SLOT)_CH$(CH)_IN")
-#  field(PINI, "NO")
-#}
-
diff --git a/Bx9000_MBTApp/Db/KL2124.template b/Bx9000_MBTApp/Db/KL2124.template
deleted file mode 100644
index 404cb07..0000000
--- a/Bx9000_MBTApp/Db/KL2124.template
+++ /dev/null
@@ -1,49 +0,0 @@
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Digital Channel 1 Set")
-  field(DTYP, "Bx9000_KL2124")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_1")
-  field(ZNAM, "$(SIG1.ZNAM)")
-  field(ONAM, "$(SIG1.ONAM)")
-  field(PINI, "$(SIG1.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Digital Channel 2 Set")
-  field(DTYP, "Bx9000_KL2124")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_2")
-  field(ZNAM, "$(SIG2.ZNAM)")
-  field(ONAM, "$(SIG2.ONAM)")
-  field(PINI, "$(SIG2.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Digital Channel 3 Set")
-  field(DTYP, "Bx9000_KL2124")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_3")
-  field(ZNAM, "$(SIG3.ZNAM)")
-  field(ONAM, "$(SIG3.ONAM)")
-  field(PINI, "$(SIG3.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Digital Channel 4 Set")
-  field(DTYP, "Bx9000_KL2124")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_4")
-  field(ZNAM, "$(SIG4.ZNAM)")
-  field(ONAM, "$(SIG4.ONAM)")
-  field(PINI, "$(SIG4.PINI)")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-record(fanout, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)ReProc") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)")
-  field(LNK2, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)")
-  field(LNK3, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)")
-  field(LNK4, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL2408-lcls.template b/Bx9000_MBTApp/Db/KL2408-lcls.template
deleted file mode 100644
index d02cfb4..0000000
--- a/Bx9000_MBTApp/Db/KL2408-lcls.template
+++ /dev/null
@@ -1,36 +0,0 @@
- record(bo, "$(ALIAS)") {
-   field(DESC, "$(D)")
-   field(OMSL, "supervisory")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-   field(ZSV,  "$(ZSV)")
-   field(OSV,  "$(OSV)")
-   field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-   field(VAL,  "0")
-   field(PINI, "YES")
-   field(HIGH, "$(HIGH)")
-  info(autosaveFields, "VAL DESC ZNAM ONAM ZSV OSV HIGH")
- }
-
- record(bo, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-   field(DESC, "Digital Channel $(CH) Set")
-   field(DTYP, "Bx9000_KL2408")
-   field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_$(CH)")
-   field(DOL, "$(ALIAS)")
-   field(OMSL, "closed_loop")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-  info(autosaveFields, "VAL DESC ZNAM ONAM ZSV OSV HIGH")
-}
-
-# These BCS outputs are only initiated by user. Do not 
-# want to process on reconnect.
-#record(fanout, "$(APC):M$(SLOT)_CH$(CH)_OUT_REPROC") {
-#  field(DESC, "Process on reconnect")
-#  field(SCAN, "Event")
-#  field(EVNT, "$(REPROCEVT)")
-#  field(SELM, "All")
-#  field(LNK1, "$(APC):M$(SLOT)_CH$(CH)_IN")
-#  field(PINI, "NO")
-#}
-
diff --git a/Bx9000_MBTApp/Db/KL2408.template b/Bx9000_MBTApp/Db/KL2408.template
deleted file mode 100644
index b3058dd..0000000
--- a/Bx9000_MBTApp/Db/KL2408.template
+++ /dev/null
@@ -1,98 +0,0 @@
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Digital Channel 1 Set")
-  field(DTYP, "Bx9000_KL2408")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_1")
-  field(ZNAM, "$(SIG1.ZNAM)")
-  field(ONAM, "$(SIG1.ONAM)")
-  field(PINI, "$(SIG1.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Digital Channel 2 Set")
-  field(DTYP, "Bx9000_KL2408")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_2")
-  field(ZNAM, "$(SIG2.ZNAM)")
-  field(ONAM, "$(SIG2.ONAM)")
-  field(PINI, "$(SIG2.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Digital Channel 3 Set")
-  field(DTYP, "Bx9000_KL2408")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_3")
-  field(ZNAM, "$(SIG3.ZNAM)")
-  field(ONAM, "$(SIG3.ONAM)")
-  field(PINI, "$(SIG3.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Digital Channel 4 Set")
-  field(DTYP, "Bx9000_KL2408")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_4")
-  field(ZNAM, "$(SIG4.ZNAM)")
-  field(ONAM, "$(SIG4.ONAM)")
-  field(PINI, "$(SIG4.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG5)") {
-  field(DESC, "Digital Channel 5 Set")
-  field(DTYP, "Bx9000_KL2408")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_5")
-  field(ZNAM, "$(SIG5.ZNAM)")
-  field(ONAM, "$(SIG5.ONAM)")
-  field(PINI, "$(SIG5.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG6)") {
-  field(DESC, "Digital Channel 6 Set")
-  field(DTYP, "Bx9000_KL2408")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_6")
-  field(ZNAM, "$(SIG6.ZNAM)")
-  field(ONAM, "$(SIG6.ONAM)")
-  field(PINI, "$(SIG6.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG7)") {
-  field(DESC, "Digital Channel 7 Set")
-  field(DTYP, "Bx9000_KL2408")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_7")
-  field(ZNAM, "$(SIG7.ZNAM)")
-  field(ONAM, "$(SIG7.ONAM)")
-  field(PINI, "$(SIG7.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG8)") {
-  field(DESC, "Digital Channel 8 Set")
-  field(DTYP, "Bx9000_KL2408")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_8")
-  field(ZNAM, "$(SIG8.ZNAM)")
-  field(ONAM, "$(SIG8.ONAM)")
-  field(PINI, "$(SIG8.PINI)")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-record(fanout, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)ReProc") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)")
-  field(LNK2, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)")
-  field(LNK3, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)")
-  field(LNK4, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)")
-  field(PINI, "NO")
-}
-
-# We put SIG5 macro in the name just to avoid name overlaping
-record(fanout, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG5)ReProc") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG5)")
-  field(LNK2, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG6)")
-  field(LNK3, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG7)")
-  field(LNK4, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG8)")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL2502.template b/Bx9000_MBTApp/Db/KL2502.template
deleted file mode 100644
index b5f58b9..0000000
--- a/Bx9000_MBTApp/Db/KL2502.template
+++ /dev/null
@@ -1,46 +0,0 @@
-record(ao, "$(SIG1)")
-{
-  field(DESC, "$(SIG1.DESC)")
-  field(DTYP, "Bx9000_KL2502")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DUTY_CYCLE_1")
-  field(PREC, "3")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(DRVH, "$(SIG1.DRVH)")
-  field(DRVL, "$(SIG1.DRVL)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(PINI, "$(SIG1.PINI)")
-  field(LINR, "LINEAR")
-}
-
-record(ao, "$(SIG2)")
-{
-  field(DESC, "$(SIG2.DESC)")
-  field(DTYP, "Bx9000_KL2502")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DUTY_CYCLE_2")
-  field(PREC, "3")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(DRVH, "$(SIG2.DRVH)")
-  field(DRVL, "$(SIG2.DRVL)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(PINI, "$(SIG2.PINI)")
-  field(LINR, "LINEAR")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-record(fanout, "$(SIG1)ReProc")
-{
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(SIG1)")
-  field(LNK2, "$(SIG2)")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL2512.template b/Bx9000_MBTApp/Db/KL2512.template
deleted file mode 100644
index 6f37bfd..0000000
--- a/Bx9000_MBTApp/Db/KL2512.template
+++ /dev/null
@@ -1,46 +0,0 @@
-record(ao, "$(SIG1)")
-{
-  field(DESC, "$(SIG1.DESC)")
-  field(DTYP, "Bx9000_KL2512")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DUTY_CYCLE_1")
-  field(PREC, "3")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(DRVH, "$(SIG1.DRVH)")
-  field(DRVL, "$(SIG1.DRVL)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(PINI, "$(SIG1.PINI)")
-  field(LINR, "LINEAR")
-}
-
-record(ao, "$(SIG2)")
-{
-  field(DESC, "$(SIG2.DESC)")
-  field(DTYP, "Bx9000_KL2512")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DUTY_CYCLE_2")
-  field(PREC, "3")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(DRVH, "$(SIG2.DRVH)")
-  field(DRVL, "$(SIG2.DRVL)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(PINI, "$(SIG2.PINI)")
-  field(LINR, "LINEAR")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-record(fanout, "$(SIG1)ReProc")
-{
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(SIG1)")
-  field(LNK2, "$(SIG2)")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL2622.template b/Bx9000_MBTApp/Db/KL2622.template
deleted file mode 100644
index f9105b0..0000000
--- a/Bx9000_MBTApp/Db/KL2622.template
+++ /dev/null
@@ -1,29 +0,0 @@
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Relay Channel 1 Set")
-  field(DTYP, "Bx9000_KL2622")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_1")
-  field(ZNAM, "$(SIG1.ZNAM)")
-  field(ONAM, "$(SIG1.ONAM)")
-  field(PINI, "$(SIG1.PINI)")
-}
-
-record(bo, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Relay Channel 2 Set")
-  field(DTYP, "Bx9000_KL2622")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_2")
-  field(ZNAM, "$(SIG2.ZNAM)")
-  field(ONAM, "$(SIG2.ONAM)")
-  field(PINI, "$(SIG2.PINI)")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-record(fanout, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)ReProc") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)")
-  field(LNK2, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL2872-lcls.template b/Bx9000_MBTApp/Db/KL2872-lcls.template
deleted file mode 100644
index 029d8aa..0000000
--- a/Bx9000_MBTApp/Db/KL2872-lcls.template
+++ /dev/null
@@ -1,35 +0,0 @@
- record(bo, "$(ALIAS)") {
-   field(DESC, "$(D)")
-   field(OMSL, "supervisory")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-   field(ZSV,  "$(ZSV)")
-   field(OSV,  "$(OSV)")
-   field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-   field(VAL,  "0")
-   field(PINI, "YES")
-   field(HIGH, "$(HIGH)")
-  info(autosaveFields, "VAL DESC ZNAM ONAM ZSV OSV HIGH")
- }
-
- record(bo, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-   field(DESC, "Digital Channel $(CH) Set")
-   field(DTYP, "Bx9000_KL2872")
-   field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_$(CH)")
-   field(DOL, "$(ALIAS)")
-   field(OMSL, "closed_loop")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-  info(autosaveFields, "VAL DESC ZNAM ONAM ZSV OSV HIGH")
-}
-
-
-record(fanout, "$(APC):M$(SLOT)_CH$(CH)_OUT_REPROC") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3012-lcls-standalone.template b/Bx9000_MBTApp/Db/KL3012-lcls-standalone.template
deleted file mode 100644
index 4d8ae94..0000000
--- a/Bx9000_MBTApp/Db/KL3012-lcls-standalone.template
+++ /dev/null
@@ -1,47 +0,0 @@
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Analog Ch$(CH) Readback")
-  field(SCAN, "1 second")
-  field(DTYP, "Bx9000_KL3012")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "$(PREC)")
-  field(ADEL, "$(ADEL)")
-  field(EGUF, "20")
-  field(EGUL, "0")
-  field(HIGH, "$(HIGH)")
-  field(HIHI, "$(HIHI)")
-  field(HOPR, "20")
-  field(HYST, "$(HYST)")
-  field(LOLO, "$(LOLO)")
-  field(LOPR, "0")
-  field(LOW,  "$(LOW)")
-  field(MDEL, "$(MDEL)")
-  field(SMOO, "$(SMOO)")
-  field(EGU,  "mA")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-  field(FLNK, "$(NAME)")
-}
-
-record(ai, "$(NAME)") {
-  field(DESC, "$(DESC)")
-  field(INP,  "$(APC):M$(SLOT)_CH$(CH)_SIG")
-  field(PREC, "$(PREC)")
-  field(ADEL, "$(ADEL)")
-  field(HIGH, "$(HIGH)")
-  field(HIHI, "$(HIHI)")
-  field(HYST, "$(HYST)")
-  field(LOLO, "$(LOLO)")
-  field(LOW,  "$(LOW)")
-  field(MDEL, "$(MDEL)")
-  field(SMOO, "$(SMOO)")
-  field(EGU,  "mA")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-
diff --git a/Bx9000_MBTApp/Db/KL3012-lcls.template b/Bx9000_MBTApp/Db/KL3012-lcls.template
deleted file mode 100644
index 111b713..0000000
--- a/Bx9000_MBTApp/Db/KL3012-lcls.template
+++ /dev/null
@@ -1,29 +0,0 @@
-# to be used with analog-conversion-lcls.template
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Analog Ch$(CH) Readback")
-  field(SCAN, "1 second")
-  field(DTYP, "Bx9000_KL3012")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "$(PREC)")
-  field(ADEL, "$(ADEL)")
-  field(EGUF, "20")
-  field(EGUL, "0")
-  field(HIGH, "$(HIGH)")
-  field(HIHI, "$(HIHI)")
-  field(HOPR, "20")
-  field(HYST, "$(HYST)")
-  field(LOLO, "$(LOLO)")
-  field(LOPR, "0")
-  field(LOW,  "$(LOW)")
-  field(MDEL, "$(MDEL)")
-  field(SMOO, "$(SMOO)")
-  field(EGU,  "mA")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_EGU")
-}
-
-
diff --git a/Bx9000_MBTApp/Db/KL3012.template b/Bx9000_MBTApp/Db/KL3012.template
deleted file mode 100644
index 0f11ef1..0000000
--- a/Bx9000_MBTApp/Db/KL3012.template
+++ /dev/null
@@ -1,52 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3022")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "3")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3022")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "3")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3022-lcls-standalone.template b/Bx9000_MBTApp/Db/KL3022-lcls-standalone.template
deleted file mode 100644
index 86ee3f0..0000000
--- a/Bx9000_MBTApp/Db/KL3022-lcls-standalone.template
+++ /dev/null
@@ -1,47 +0,0 @@
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Analog Ch$(CH) Readback")
-  field(SCAN, "1 second")
-  field(DTYP, "Bx9000_KL3022")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "$(PREC)")
-  field(ADEL, "$(ADEL)")
-  field(EGUF, "20")
-  field(EGUL, "4")
-  field(HIGH, "$(HIGH)")
-  field(HIHI, "$(HIHI)")
-  field(HOPR, "21")
-  field(HYST, "$(HYST)")
-  field(LOLO, "$(LOLO)")
-  field(LOPR, "3")
-  field(LOW,  "$(LOW)")
-  field(MDEL, "$(MDEL)")
-  field(SMOO, "$(SMOO)")
-  field(EGU,  "mA")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-  field(FLNK, "$(NAME)")
-}
-
-record(ai, "$(NAME)") {
-  field(DESC, "$(DESC)")
-  field(INP,  "$(APC):M$(SLOT)_CH$(CH)_SIG")
-  field(PREC, "$(PREC)")
-  field(ADEL, "$(ADEL)")
-  field(HIGH, "$(HIGH)")
-  field(HIHI, "$(HIHI)")
-  field(HYST, "$(HYST)")
-  field(LOLO, "$(LOLO)")
-  field(LOW,  "$(LOW)")
-  field(MDEL, "$(MDEL)")
-  field(SMOO, "$(SMOO)")
-  field(EGU,  "mA")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-
diff --git a/Bx9000_MBTApp/Db/KL3022-lcls.template b/Bx9000_MBTApp/Db/KL3022-lcls.template
deleted file mode 100644
index 95b5dc2..0000000
--- a/Bx9000_MBTApp/Db/KL3022-lcls.template
+++ /dev/null
@@ -1,29 +0,0 @@
-# to be used with analog-conversion-lcls.template
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Analog Ch$(CH) Readback")
-  field(SCAN, "1 second")
-  field(DTYP, "Bx9000_KL3022")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "$(PREC)")
-  field(ADEL, "$(ADEL)")
-  field(EGUF, "20")
-  field(EGUL, "4")
-  field(HIGH, "$(HIGH)")
-  field(HIHI, "$(HIHI)")
-  field(HOPR, "21")
-  field(HYST, "$(HYST)")
-  field(LOLO, "$(LOLO)")
-  field(LOPR, "3")
-  field(LOW,  "$(LOW)")
-  field(MDEL, "$(MDEL)")
-  field(SMOO, "$(SMOO)")
-  field(EGU,  "mA")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_EGU")
-}
-
-
diff --git a/Bx9000_MBTApp/Db/KL3022.template b/Bx9000_MBTApp/Db/KL3022.template
deleted file mode 100644
index 0f11ef1..0000000
--- a/Bx9000_MBTApp/Db/KL3022.template
+++ /dev/null
@@ -1,52 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3022")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "3")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3022")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "3")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3064-lcls.template b/Bx9000_MBTApp/Db/KL3064-lcls.template
deleted file mode 100644
index f6a440b..0000000
--- a/Bx9000_MBTApp/Db/KL3064-lcls.template
+++ /dev/null
@@ -1,30 +0,0 @@
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "$(D="Analog Channel $(CH) Readback")")
-  field(SCAN, "$(SCAN=1 second)")
-  field(DTYP, "Bx9000_KL3064")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "$(PREC=3)")
-  field(ADEL, "$(ADEL=0.001)")
-  field(EGUF, "$(EGUF=10)")
-  field(EGUL, "$(EGUL=0)")
-  field(HIGH, "$(HIGH)")
-  field(HIHI, "$(HIHI)")
-  field(HOPR, "$(HOPR=10)")
-  field(HYST, "$(HYST="")")
-  field(LOLO, "$(LOLO)")
-  field(LOPR, "$(LOPR=0)")
-  field(LOW,  "$(LOW)")
-  field(MDEL, "$(MDEL=-.001)")
-  field(SMOO, "$(SMOO="")")
-  field(EGU,  "$(EGU=Volts)")
-  field(HHSV, "$(HHSV=MAJOR)")
-  field(LLSV, "$(LLSV=MAJOR)")
-  field(HSV,  "$(HSV=MINOR)")
-  field(LSV,  "$(LSV=MINOR)")
-  field(LINR, "LINEAR")
-  field(FLNK, "$(FLNK=$(APC):M$(SLOT)_CH$(CH)_EGU)")
-$(A=#) alias("$(ALIAS)")
-}
-
-
-
diff --git a/Bx9000_MBTApp/Db/KL3064.template b/Bx9000_MBTApp/Db/KL3064.template
deleted file mode 100644
index e6cb913..0000000
--- a/Bx9000_MBTApp/Db/KL3064.template
+++ /dev/null
@@ -1,104 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3064")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "3")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3064")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "3")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Analog Channel3 Readback")
-  field(SCAN, "$(SIG3.SCAN)")
-  field(DTYP, "Bx9000_KL3064")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
-  field(PREC, "3")
-  field(ADEL, "$(SIG3.ADEL)")
-  field(EGUF, "$(SIG3.EGUF)")
-  field(EGUL, "$(SIG3.EGUL)")
-  field(HIGH, "$(SIG3.HIGH)")
-  field(HIHI, "$(SIG3.HIHI)")
-  field(HOPR, "$(SIG3.HOPR)")
-  field(HYST, "$(SIG3.HYST)")
-  field(LOLO, "$(SIG3.LOLO)")
-  field(LOPR, "$(SIG3.LOPR)")
-  field(LOW,  "$(SIG3.LOW)")
-  field(MDEL, "$(SIG3.MDEL)")
-  field(SMOO, "$(SIG3.SMOO)")
-  field(EGU,  "$(SIG3.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Analog Channel4 Readback")
-  field(SCAN, "$(SIG4.SCAN)")
-  field(DTYP, "Bx9000_KL3064")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
-  field(PREC, "3")
-  field(ADEL, "$(SIG4.ADEL)")
-  field(EGUF, "$(SIG4.EGUF)")
-  field(EGUL, "$(SIG4.EGUL)")
-  field(HIGH, "$(SIG4.HIGH)")
-  field(HIHI, "$(SIG4.HIHI)")
-  field(HOPR, "$(SIG4.HOPR)")
-  field(HYST, "$(SIG4.HYST)")
-  field(LOLO, "$(SIG4.LOLO)")
-  field(LOPR, "$(SIG4.LOPR)")
-  field(LOW,  "$(SIG4.LOW)")
-  field(MDEL, "$(SIG4.MDEL)")
-  field(SMOO, "$(SIG4.SMOO)")
-  field(EGU,  "$(SIG4.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3102-lcls.template b/Bx9000_MBTApp/Db/KL3102-lcls.template
deleted file mode 100644
index e3e5855..0000000
--- a/Bx9000_MBTApp/Db/KL3102-lcls.template
+++ /dev/null
@@ -1,29 +0,0 @@
-# to be used with analog-conversion-lcls.template
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Analog Ch$(CH) Readback")
-  field(SCAN, "1 second")
-  field(DTYP, "Bx9000_KL3102")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "$(PREC)")
-  field(ADEL, "$(ADEL)")
-  field(EGUF, "$(EGUF)")
-  field(EGUL, "$(EGUL)")
-  field(HIGH, "$(HIGH)")
-  field(HIHI, "$(HIHI)")
-  field(HOPR, "$(HOPR)")
-  field(HYST, "$(HYST)")
-  field(LOLO, "$(LOLO)")
-  field(LOPR, "$(LOPR)")
-  field(LOW,  "$(LOW)")
-  field(MDEL, "$(MDEL)")
-  field(SMOO, "$(SMOO)")
-  field(EGU,  "V")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_EGU")
-}
-
-
diff --git a/Bx9000_MBTApp/Db/KL3102.template b/Bx9000_MBTApp/Db/KL3102.template
deleted file mode 100644
index 29d199b..0000000
--- a/Bx9000_MBTApp/Db/KL3102.template
+++ /dev/null
@@ -1,52 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3102")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "3")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3102")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "3")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3162-lcls.template b/Bx9000_MBTApp/Db/KL3162-lcls.template
deleted file mode 100644
index ea4c05d..0000000
--- a/Bx9000_MBTApp/Db/KL3162-lcls.template
+++ /dev/null
@@ -1,29 +0,0 @@
-# to be used with analog-conversion-lcls.template
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Analog Ch$(CH) Readback")
-  field(SCAN, "1 second")
-  field(DTYP, "Bx9000_KL3162")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "$(PREC)")
-  field(ADEL, "$(ADEL)")
-  field(EGUF, "$(EGUF)")
-  field(EGUL, "$(EGUL)")
-  field(HIGH, "$(HIGH)")
-  field(HIHI, "$(HIHI)")
-  field(HOPR, "$(HOPR)")
-  field(HYST, "$(HYST)")
-  field(LOLO, "$(LOLO)")
-  field(LOPR, "$(LOPR)")
-  field(LOW,  "$(LOW)")
-  field(MDEL, "$(MDEL)")
-#  field(SMOO, "$(SMOO)")
-  field(EGU,  "V")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_EGU")
-}
-
-
diff --git a/Bx9000_MBTApp/Db/KL3162.template b/Bx9000_MBTApp/Db/KL3162.template
deleted file mode 100644
index 1ccebb1..0000000
--- a/Bx9000_MBTApp/Db/KL3162.template
+++ /dev/null
@@ -1,51 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3162")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "3")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3162")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "3")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
diff --git a/Bx9000_MBTApp/Db/KL3202-lcls.template b/Bx9000_MBTApp/Db/KL3202-lcls.template
deleted file mode 100644
index 812d476..0000000
--- a/Bx9000_MBTApp/Db/KL3202-lcls.template
+++ /dev/null
@@ -1,135 +0,0 @@
-#==============================================================================
-#
-# Abs:  RTD module KL3202 template, customized for LCLS conventions
-#
-# Name: KL3202-lcls.template
-# 
-# Macros: 
-#
-#	APC	(All Purpose Controller) 
-#		First three fields of APC device name, for example: APC:LTU0:1
-#		(Numbering convention: Each set of I/O modules that share a single
-#		controller is one unit. All PVs associated with this set of modules 
-#		should share this APC device name.)
-#
-#	COUPLER Node name of coupler, for example: bkhf-ltu0-tm01
-#
-#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
-#		The first module to the right of the coupler is in slot 1.
-#
-#	D	Type of device (string), for example: "RTD" 
-#               or device description, for example "50B1"
-#
-#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
-#		The first module to the right of the coupler is in slot 1.
-#
-#	CH	Channel number, from 1 to 4	
-#
-#	ALIAS   Device name, for example: QUAD:LTU0:110:TEMP
-#
-#       SCAN    Data acquisition rate in EPICS record SCAN format. If you are not using data
-#               averaging, set this to "1 second". Otherwise, set it to your desired 
-#               data acquisition rate. It will set the scan rate for the low-level PVs.
-#               The high-level PVs (ALIAS) still scan at "1 second".
-#               
-# 	NSAM	Number of samples to average in _AVG compress record.
-#               Set to "1" if no averaging desired.
-#
-#       ASG     Access Security Group (used by RTDs for MPS)
-#
-#==============================================================================
-
-record(ai, "$(ALIAS)") {
-  field(DESC,"$(D)")
-  field(SCAN, "1 second")
-  field(INP, "$(ALIAS)_AVG PP MS")
-  field(PREC, "$(P)")
-  field(EGU, "DegF")
-  field(HOPR, "$(H)")
-  field(LOPR, "$(L)")
-  field(HIHI, "$(HH)")
-  field(LOLO, "$(LL)")
-  field(HIGH, "$(HI)")
-  field(LOW, "$(LO)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV, "MINOR")
-  field(LSV, "MINOR")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(ASG, "$(ASG)")
-}
-
-# Optional averaging
-# If no averaging desired, 
-#    set $(NSAM) to "1" and $(SCAN) to "1 second"
-#---------------------------------------
-record(compress, "$(ALIAS)_AVG") {
-  field(DESC, "Avg sig samples")
-  field(INP, "$(ALIAS)_DATA NPP MS")
-  field(ALG, "N to 1 Average")
-  field(N, "$(NSAM)")
-  field(NSAM, "1")
-  field(PREC, "$(P)")
-  field(ASG, "$(ASG)")
-}
-
-record(compress, "$(ALIAS)_DATA") {
-  field(DESC, "Samples to avg")
-  field(INP, "$(APC):M$(SLOT)_CH$(CH)_TEMP NPP MS")
-  field(ALG, "Circular Buffer")
-  field(NSAM, "$(NSAM)")
-  field(PREC, "$(P)")
-  field(ASG, "$(ASG)")
-}
-#-----------------------------------------
-
-# Convert degC to degF
-# .VAL and .A  used by generic KL3314 diagnostic display
-record(calc, "$(APC):M$(SLOT)_CH$(CH)_TEMP") {
-  field(DESC, "$(D)")
-  field(FLNK, "$(ALIAS)")
-  field(CALC, "A*1.8+32")
-  field(INPA, "$(APC):M$(SLOT)_CH$(CH)_SIG NPP MS")
-  field(EGU, "DegF")
-  field(PREC, "$(P)")
-  field(HOPR, "$(H)")
-  field(LOPR, "$(L)")
-  field(HIHI, "$(HH)")
-  field(LOLO, "$(LL)")
-  field(HIGH, "$(HI)")
-  field(LOW, "$(LO)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV, "MINOR")
-  field(LSV, "MINOR")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(FLNK, "$(ALIAS)_DATA")
-  field(ASG, "$(ASG)")
-}
-
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "RTD Readback")
-  field(SCAN, "1 second")
-  field(DTYP, "Bx9000_KL3202")
-  field(INP, "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "1")
-  field(HOPR, "500")
-  field(HIHI, "500")
-  field(HIGH, "500")
-  field(LOW,  "-100")
-  field(LOLO, "-100")
-  field(LOPR, "-100")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(EGU, "DegC")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_TEMP")
-  field(ASG, "$(ASG)")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3202.template b/Bx9000_MBTApp/Db/KL3202.template
deleted file mode 100644
index 7b9b149..0000000
--- a/Bx9000_MBTApp/Db/KL3202.template
+++ /dev/null
@@ -1,46 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Temperature 1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3202")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "1")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Temperature 2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3202")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "1")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3204.template b/Bx9000_MBTApp/Db/KL3204.template
deleted file mode 100644
index aa4392f..0000000
--- a/Bx9000_MBTApp/Db/KL3204.template
+++ /dev/null
@@ -1,92 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Temperature 1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3204")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "1")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Temperature 2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3204")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "1")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Temperature 3 Readback")
-  field(SCAN, "$(SIG3.SCAN)")
-  field(DTYP, "Bx9000_KL3204")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
-  field(PREC, "1")
-  field(HOPR, "$(SIG3.HOPR)")
-  field(HIHI, "$(SIG3.HIHI)")
-  field(HIGH, "$(SIG3.HIGH)")
-  field(LOW,  "$(SIG3.LOW)")
-  field(LOLO, "$(SIG3.LOLO)")
-  field(LOPR, "$(SIG3.LOPR)")
-  field(HYST, "$(SIG3.HYST)")
-  field(ADEL, "$(SIG3.ADEL)")
-  field(MDEL, "$(SIG3.MDEL)")
-  field(SMOO, "$(SIG3.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Temperature 4 Readback")
-  field(SCAN, "$(SIG4.SCAN)")
-  field(DTYP, "Bx9000_KL3204")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
-  field(PREC, "1")
-  field(HOPR, "$(SIG4.HOPR)")
-  field(HIHI, "$(SIG4.HIHI)")
-  field(HIGH, "$(SIG4.HIGH)")
-  field(LOW,  "$(SIG4.LOW)")
-  field(LOLO, "$(SIG4.LOLO)")
-  field(LOPR, "$(SIG4.LOPR)")
-  field(HYST, "$(SIG4.HYST)")
-  field(ADEL, "$(SIG4.ADEL)")
-  field(MDEL, "$(SIG4.MDEL)")
-  field(SMOO, "$(SIG4.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3222-lcls.template b/Bx9000_MBTApp/Db/KL3222-lcls.template
deleted file mode 100644
index bc8d47b..0000000
--- a/Bx9000_MBTApp/Db/KL3222-lcls.template
+++ /dev/null
@@ -1,135 +0,0 @@
-#==============================================================================
-#
-# Abs:  RTD module KL3222 template, customized for LCLS conventions
-#
-# Name: KL3222-lcls.template
-# 
-# Macros: 
-#
-#	APC	(All Purpose Controller) 
-#		First three fields of APC device name, for example: APC:LTU0:1
-#		(Numbering convention: Each set of I/O modules that share a single
-#		controller is one unit. All PVs associated with this set of modules 
-#		should share this APC device name.)
-#
-#	COUPLER Node name of coupler, for example: bkhf-ltu0-tm01
-#
-#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
-#		The first module to the right of the coupler is in slot 1.
-#
-#	D	Type of device (string), for example: "RTD" 
-#               or device description, for example "50B1"
-#
-#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
-#		The first module to the right of the coupler is in slot 1.
-#
-#	CH	Channel number, from 1 to 4	
-#
-#	ALIAS   Device name, for example: QUAD:LTU0:110:TEMP
-#
-#       SCAN    Data acquisition rate in EPICS record SCAN format. If you are not using data
-#               averaging, set this to "1 second". Otherwise, set it to your desired 
-#               data acquisition rate. It will set the scan rate for the low-level PVs.
-#               The high-level PVs (ALIAS) still scan at "1 second".
-#               
-# 	NSAM	Number of samples to average in _AVG compress record.
-#               Set to "1" if no averaging desired.
-#       
-#       ASG     Access Security Group (used by RTDs for MPS)
-#
-#==============================================================================
-
-record(ai, "$(ALIAS)") {
-  field(DESC,"$(D)")
-  field(SCAN, "1 second")
-  field(INP, "$(ALIAS)_AVG PP MS")
-  field(PREC, "$(P)")
-  field(EGU, "DegF")
-  field(HOPR, "$(H)")
-  field(LOPR, "$(L)")
-  field(HIHI, "$(HH)")
-  field(LOLO, "$(LL)")
-  field(HIGH, "$(HI)")
-  field(LOW, "$(LO)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV, "MINOR")
-  field(LSV, "MINOR")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(ASG, "$(ASG)")
-}
-
-# Optional averaging
-# If no averaging desired, 
-#    set $(NSAM) to "1" and $(SCAN) to "1 second"
-#---------------------------------------
-record(compress, "$(ALIAS)_AVG") {
-  field(DESC, "Avg sig samples")
-  field(INP, "$(ALIAS)_DATA NPP MS")
-  field(ALG, "N to 1 Average")
-  field(N, "$(NSAM)")
-  field(NSAM, "1")
-  field(PREC, "$(P)")
-  field(ASG, "$(ASG)")
-}
-
-record(compress, "$(ALIAS)_DATA") {
-  field(DESC, "Samples to avg")
-  field(INP, "$(APC):M$(SLOT)_CH$(CH)_TEMP NPP MS")
-  field(ALG, "Circular Buffer")
-  field(NSAM, "$(NSAM)")
-  field(PREC, "$(P)")
-  field(ASG, "$(ASG)")
-}
-#-----------------------------------------
-
-# Convert degC to degF
-# .VAL and .A  used by generic KL3314 diagnostic display
-record(calc, "$(APC):M$(SLOT)_CH$(CH)_TEMP") {
-  field(DESC, "$(D)")
-  field(FLNK, "$(ALIAS)")
-  field(CALC, "A*1.8+32")
-  field(INPA, "$(APC):M$(SLOT)_CH$(CH)_SIG NPP MS")
-  field(EGU, "DegF")
-  field(PREC, "$(P)")
-  field(HOPR, "$(H)")
-  field(LOPR, "$(L)")
-  field(HIHI, "$(HH)")
-  field(LOLO, "$(LL)")
-  field(HIGH, "$(HI)")
-  field(LOW, "$(LO)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV, "MINOR")
-  field(LSV, "MINOR")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(FLNK, "$(ALIAS)_DATA")
-  field(ASG, "$(ASG)")
-}
-
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "RTD Readback")
-  field(SCAN, "1 second")
-  field(DTYP, "Bx9000_KL3222")
-  field(INP, "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "1")
-  field(HOPR, "500")
-  field(HIHI, "500")
-  field(HIGH, "500")
-  field(LOW,  "-100")
-  field(LOLO, "-100")
-  field(LOPR, "-100")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(EGU, "DegC")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_TEMP")
-  field(ASG, "$(ASG)")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3222.template b/Bx9000_MBTApp/Db/KL3222.template
deleted file mode 100644
index 158327b..0000000
--- a/Bx9000_MBTApp/Db/KL3222.template
+++ /dev/null
@@ -1,46 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Temperature 1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3222")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "1")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Temperature 2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3222")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "1")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3312.template b/Bx9000_MBTApp/Db/KL3312.template
deleted file mode 100644
index e2330af..0000000
--- a/Bx9000_MBTApp/Db/KL3312.template
+++ /dev/null
@@ -1,46 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Temperature 1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3312")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "1")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Temperature 2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3312")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "1")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3314-lcls.template b/Bx9000_MBTApp/Db/KL3314-lcls.template
deleted file mode 100644
index f2bd7f9..0000000
--- a/Bx9000_MBTApp/Db/KL3314-lcls.template
+++ /dev/null
@@ -1,127 +0,0 @@
-#==============================================================================
-#
-# Abs:  Thermocouple module KL3314 template, customized for LCLS conventions
-#
-# Name: KL3314-lcls.template
-# 
-# Macros: 
-#
-#	APC	(All Purpose Controller) 
-#		First three fields of APC device name, for example: APC:LTU0:1
-#		(Numbering convention: Each set of I/O modules that share a single
-#		controller is one unit. All PVs associated with this set of modules 
-#		should share this APC device name.)
-#
-#	COUPLER Node name of coupler, for example: bkhf-ltu0-tm01
-#
-#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
-#		The first module to the right of the coupler is in slot 1.
-#
-#	D	Type of device (string), for example: "Thermocouple" 
-#               or device description, for example "50B1"
-#
-#	SLOT	Slot number of I/O module. Slot numbers increment from left to right.
-#		The first module to the right of the coupler is in slot 1.
-#
-#	CH	Channel number, from 1 to 4	
-#
-#	ALIAS   Device name, for example: QUAD:LTU0:110:TEMP
-#
-#       SCAN    Data acquisition rate in EPICS record SCAN format. If you are not using data
-#               averaging, set this to "1 second". Otherwise, set it to your desired 
-#               data acquisition rate. It will set the scan rate for the low-level PVs.
-#               The high-level PVs (ALIAS) still scan at "1 second".
-#               
-# 	NSAM	Number of samples to average in _AVG compress record.
-#               Set to "1" if no averaging desired.
-#
-#==============================================================================
-
-record(ai, "$(ALIAS)") {
-  field(DESC,"$(D)")
-  field(SCAN, "1 second")
-  field(INP, "$(ALIAS)_AVG PP MS")
-  field(PREC, "$(P)")
-  field(EGU, "DegF")
-  field(HOPR, "$(H)")
-  field(LOPR, "$(L)")
-  field(HIHI, "$(HH)")
-  field(LOLO, "$(LL)")
-  field(HIGH, "$(HI)")
-  field(LOW, "$(LO)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV, "MINOR")
-  field(LSV, "MINOR")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-}
-
-# Optional averaging
-# If no averaging desired, 
-#    set $(NSAM) to "1" and $(SCAN) to "1 second"
-#---------------------------------------
-record(compress, "$(ALIAS)_AVG") {
-  field(DESC, "Avg sig samples")
-  field(INP, "$(ALIAS)_DATA NPP MS")
-  field(ALG, "N to 1 Average")
-  field(N, "$(NSAM)")
-  field(NSAM, "1")
-  field(PREC, "$(P)")
-}
-
-record(compress, "$(ALIAS)_DATA") {
-  field(DESC, "Samples to avg")
-  field(INP, "$(APC):M$(SLOT)_CH$(CH)_TEMP NPP MS")
-  field(ALG, "Circular Buffer")
-  field(NSAM, "$(NSAM)")
-  field(PREC, "$(P)")
-}
-#-----------------------------------------
-
-# Convert degC to degF
-# .VAL and .A  used by generic KL3314 diagnostic display
-record(calc, "$(APC):M$(SLOT)_CH$(CH)_TEMP") {
-  field(DESC, "$(D)")
-  field(CALC, "A*1.8+32")
-  field(INPA, "$(APC):M$(SLOT)_CH$(CH)_SIG NPP MS")
-  field(EGU, "DegF")
-  field(PREC, "$(P)")
-  field(HOPR, "$(H)")
-  field(LOPR, "$(L)")
-  field(HIHI, "$(HH)")
-  field(LOLO, "$(LL)")
-  field(HIGH, "$(HI)")
-  field(LOW, "$(LO)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV, "MINOR")
-  field(LSV, "MINOR")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(FLNK, "$(ALIAS)_DATA")
-}
-
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Thermocouple Readback")
-  field(SCAN, "$(SCAN)")
-  field(DTYP, "Bx9000_KL3314")
-  field(INP, "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(PREC, "1")
-  field(HOPR, "500")
-  field(HIHI, "500")
-  field(HIGH, "500")
-  field(LOW,  "-100")
-  field(LOLO, "-100")
-  field(LOPR, "-100")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(EGU, "DegC")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_TEMP")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3314.template b/Bx9000_MBTApp/Db/KL3314.template
deleted file mode 100644
index e95c9bc..0000000
--- a/Bx9000_MBTApp/Db/KL3314.template
+++ /dev/null
@@ -1,92 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Temperature 1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3314")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "1")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Temperature 2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3314")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "1")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Temperature 3 Readback")
-  field(SCAN, "$(SIG3.SCAN)")
-  field(DTYP, "Bx9000_KL3314")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
-  field(PREC, "1")
-  field(HOPR, "$(SIG3.HOPR)")
-  field(HIHI, "$(SIG3.HIHI)")
-  field(HIGH, "$(SIG3.HIGH)")
-  field(LOW,  "$(SIG3.LOW)")
-  field(LOLO, "$(SIG3.LOLO)")
-  field(LOPR, "$(SIG3.LOPR)")
-  field(HYST, "$(SIG3.HYST)")
-  field(ADEL, "$(SIG3.ADEL)")
-  field(MDEL, "$(SIG3.MDEL)")
-  field(SMOO, "$(SIG3.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Temperature 4 Readback")
-  field(SCAN, "$(SIG4.SCAN)")
-  field(DTYP, "Bx9000_KL3314")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
-  field(PREC, "1")
-  field(HOPR, "$(SIG4.HOPR)")
-  field(HIHI, "$(SIG4.HIHI)")
-  field(HIGH, "$(SIG4.HIGH)")
-  field(LOW,  "$(SIG4.LOW)")
-  field(LOLO, "$(SIG4.LOLO)")
-  field(LOPR, "$(SIG4.LOPR)")
-  field(HYST, "$(SIG4.HYST)")
-  field(ADEL, "$(SIG4.ADEL)")
-  field(MDEL, "$(SIG4.MDEL)")
-  field(SMOO, "$(SIG4.SMOO)")
-  field(EGU,  "Degree C")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3408-lcls.template b/Bx9000_MBTApp/Db/KL3408-lcls.template
deleted file mode 100644
index 4ea5f90..0000000
--- a/Bx9000_MBTApp/Db/KL3408-lcls.template
+++ /dev/null
@@ -1,24 +0,0 @@
-record(ai, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "$(D)")
-  field(SCAN, "1 second")
-  field(DTYP, "Bx9000_KL3408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_$(CH)")
-  field(EGUF, "$(EGUF)")
-  field(EGUL, "$(EGUL)")
-  field(HOPR, "11")
-  field(LOPR, "-11")
-  field(HIHI, "10")
-  field(LOLO, "-10")
-  field(HIGH, "10")
-  field(LOW,  "-10")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(EGU,  "Volts")
-  field(SMOO, "$(SMOO)")
-  field(LINR, "LINEAR")
-  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_EGU")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3408.template b/Bx9000_MBTApp/Db/KL3408.template
deleted file mode 100644
index 286d0fe..0000000
--- a/Bx9000_MBTApp/Db/KL3408.template
+++ /dev/null
@@ -1,208 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "3")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "3")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Analog Channel3 Readback")
-  field(SCAN, "$(SIG3.SCAN)")
-  field(DTYP, "Bx9000_KL3408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
-  field(PREC, "3")
-  field(ADEL, "$(SIG3.ADEL)")
-  field(EGUF, "$(SIG3.EGUF)")
-  field(EGUL, "$(SIG3.EGUL)")
-  field(HIGH, "$(SIG3.HIGH)")
-  field(HIHI, "$(SIG3.HIHI)")
-  field(HOPR, "$(SIG3.HOPR)")
-  field(HYST, "$(SIG3.HYST)")
-  field(LOLO, "$(SIG3.LOLO)")
-  field(LOPR, "$(SIG3.LOPR)")
-  field(LOW,  "$(SIG3.LOW)")
-  field(MDEL, "$(SIG3.MDEL)")
-  field(SMOO, "$(SIG3.SMOO)")
-  field(EGU,  "$(SIG3.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Analog Channel4 Readback")
-  field(SCAN, "$(SIG4.SCAN)")
-  field(DTYP, "Bx9000_KL3408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
-  field(PREC, "3")
-  field(ADEL, "$(SIG4.ADEL)")
-  field(EGUF, "$(SIG4.EGUF)")
-  field(EGUL, "$(SIG4.EGUL)")
-  field(HIGH, "$(SIG4.HIGH)")
-  field(HIHI, "$(SIG4.HIHI)")
-  field(HOPR, "$(SIG4.HOPR)")
-  field(HYST, "$(SIG4.HYST)")
-  field(LOLO, "$(SIG4.LOLO)")
-  field(LOPR, "$(SIG4.LOPR)")
-  field(LOW,  "$(SIG4.LOW)")
-  field(MDEL, "$(SIG4.MDEL)")
-  field(SMOO, "$(SIG4.SMOO)")
-  field(EGU,  "$(SIG4.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG5)") {
-  field(DESC, "Analog Channel5 Readback")
-  field(SCAN, "$(SIG5.SCAN)")
-  field(DTYP, "Bx9000_KL3408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_5")
-  field(PREC, "3")
-  field(ADEL, "$(SIG5.ADEL)")
-  field(EGUF, "$(SIG5.EGUF)")
-  field(EGUL, "$(SIG5.EGUL)")
-  field(HIGH, "$(SIG5.HIGH)")
-  field(HIHI, "$(SIG5.HIHI)")
-  field(HOPR, "$(SIG5.HOPR)")
-  field(HYST, "$(SIG5.HYST)")
-  field(LOLO, "$(SIG5.LOLO)")
-  field(LOPR, "$(SIG5.LOPR)")
-  field(LOW,  "$(SIG5.LOW)")
-  field(MDEL, "$(SIG5.MDEL)")
-  field(SMOO, "$(SIG5.SMOO)")
-  field(EGU,  "$(SIG5.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG6)") {
-  field(DESC, "Analog Channel6 Readback")
-  field(SCAN, "$(SIG6.SCAN)")
-  field(DTYP, "Bx9000_KL3408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_6")
-  field(PREC, "3")
-  field(ADEL, "$(SIG6.ADEL)")
-  field(EGUF, "$(SIG6.EGUF)")
-  field(EGUL, "$(SIG6.EGUL)")
-  field(HIGH, "$(SIG6.HIGH)")
-  field(HIHI, "$(SIG6.HIHI)")
-  field(HOPR, "$(SIG6.HOPR)")
-  field(HYST, "$(SIG6.HYST)")
-  field(LOLO, "$(SIG6.LOLO)")
-  field(LOPR, "$(SIG6.LOPR)")
-  field(LOW,  "$(SIG6.LOW)")
-  field(MDEL, "$(SIG6.MDEL)")
-  field(SMOO, "$(SIG6.SMOO)")
-  field(EGU,  "$(SIG6.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG7)") {
-  field(DESC, "Analog Channel7 Readback")
-  field(SCAN, "$(SIG7.SCAN)")
-  field(DTYP, "Bx9000_KL3408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_7")
-  field(PREC, "3")
-  field(ADEL, "$(SIG7.ADEL)")
-  field(EGUF, "$(SIG7.EGUF)")
-  field(EGUL, "$(SIG7.EGUL)")
-  field(HIGH, "$(SIG7.HIGH)")
-  field(HIHI, "$(SIG7.HIHI)")
-  field(HOPR, "$(SIG7.HOPR)")
-  field(HYST, "$(SIG7.HYST)")
-  field(LOLO, "$(SIG7.LOLO)")
-  field(LOPR, "$(SIG7.LOPR)")
-  field(LOW,  "$(SIG7.LOW)")
-  field(MDEL, "$(SIG7.MDEL)")
-  field(SMOO, "$(SIG7.SMOO)")
-  field(EGU,  "$(SIG7.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG8)") {
-  field(DESC, "Analog Channel8 Readback")
-  field(SCAN, "$(SIG8.SCAN)")
-  field(DTYP, "Bx9000_KL3408")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_8")
-  field(PREC, "3")
-  field(ADEL, "$(SIG8.ADEL)")
-  field(EGUF, "$(SIG8.EGUF)")
-  field(EGUL, "$(SIG8.EGUL)")
-  field(HIGH, "$(SIG8.HIGH)")
-  field(HIHI, "$(SIG8.HIHI)")
-  field(HOPR, "$(SIG8.HOPR)")
-  field(HYST, "$(SIG8.HYST)")
-  field(LOLO, "$(SIG8.LOLO)")
-  field(LOPR, "$(SIG8.LOPR)")
-  field(LOW,  "$(SIG8.LOW)")
-  field(MDEL, "$(SIG8.MDEL)")
-  field(SMOO, "$(SIG8.SMOO)")
-  field(EGU,  "$(SIG8.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL3468.template b/Bx9000_MBTApp/Db/KL3468.template
deleted file mode 100644
index 2500d14..0000000
--- a/Bx9000_MBTApp/Db/KL3468.template
+++ /dev/null
@@ -1,208 +0,0 @@
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel1 Readback")
-  field(SCAN, "$(SIG1.SCAN)")
-  field(DTYP, "Bx9000_KL3468")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_1")
-  field(PREC, "3")
-  field(ADEL, "$(SIG1.ADEL)")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(HIGH, "$(SIG1.HIGH)")
-  field(HIHI, "$(SIG1.HIHI)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(HYST, "$(SIG1.HYST)")
-  field(LOLO, "$(SIG1.LOLO)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(LOW,  "$(SIG1.LOW)")
-  field(MDEL, "$(SIG1.MDEL)")
-  field(SMOO, "$(SIG1.SMOO)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel2 Readback")
-  field(SCAN, "$(SIG2.SCAN)")
-  field(DTYP, "Bx9000_KL3468")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_2")
-  field(PREC, "3")
-  field(ADEL, "$(SIG2.ADEL)")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(HIGH, "$(SIG2.HIGH)")
-  field(HIHI, "$(SIG2.HIHI)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(HYST, "$(SIG2.HYST)")
-  field(LOLO, "$(SIG2.LOLO)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(LOW,  "$(SIG2.LOW)")
-  field(MDEL, "$(SIG2.MDEL)")
-  field(SMOO, "$(SIG2.SMOO)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Analog Channel3 Readback")
-  field(SCAN, "$(SIG3.SCAN)")
-  field(DTYP, "Bx9000_KL3468")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_3")
-  field(PREC, "3")
-  field(ADEL, "$(SIG3.ADEL)")
-  field(EGUF, "$(SIG3.EGUF)")
-  field(EGUL, "$(SIG3.EGUL)")
-  field(HIGH, "$(SIG3.HIGH)")
-  field(HIHI, "$(SIG3.HIHI)")
-  field(HOPR, "$(SIG3.HOPR)")
-  field(HYST, "$(SIG3.HYST)")
-  field(LOLO, "$(SIG3.LOLO)")
-  field(LOPR, "$(SIG3.LOPR)")
-  field(LOW,  "$(SIG3.LOW)")
-  field(MDEL, "$(SIG3.MDEL)")
-  field(SMOO, "$(SIG3.SMOO)")
-  field(EGU,  "$(SIG3.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Analog Channel4 Readback")
-  field(SCAN, "$(SIG4.SCAN)")
-  field(DTYP, "Bx9000_KL3468")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_4")
-  field(PREC, "3")
-  field(ADEL, "$(SIG4.ADEL)")
-  field(EGUF, "$(SIG4.EGUF)")
-  field(EGUL, "$(SIG4.EGUL)")
-  field(HIGH, "$(SIG4.HIGH)")
-  field(HIHI, "$(SIG4.HIHI)")
-  field(HOPR, "$(SIG4.HOPR)")
-  field(HYST, "$(SIG4.HYST)")
-  field(LOLO, "$(SIG4.LOLO)")
-  field(LOPR, "$(SIG4.LOPR)")
-  field(LOW,  "$(SIG4.LOW)")
-  field(MDEL, "$(SIG4.MDEL)")
-  field(SMOO, "$(SIG4.SMOO)")
-  field(EGU,  "$(SIG4.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG5)") {
-  field(DESC, "Analog Channel5 Readback")
-  field(SCAN, "$(SIG5.SCAN)")
-  field(DTYP, "Bx9000_KL3468")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_5")
-  field(PREC, "3")
-  field(ADEL, "$(SIG5.ADEL)")
-  field(EGUF, "$(SIG5.EGUF)")
-  field(EGUL, "$(SIG5.EGUL)")
-  field(HIGH, "$(SIG5.HIGH)")
-  field(HIHI, "$(SIG5.HIHI)")
-  field(HOPR, "$(SIG5.HOPR)")
-  field(HYST, "$(SIG5.HYST)")
-  field(LOLO, "$(SIG5.LOLO)")
-  field(LOPR, "$(SIG5.LOPR)")
-  field(LOW,  "$(SIG5.LOW)")
-  field(MDEL, "$(SIG5.MDEL)")
-  field(SMOO, "$(SIG5.SMOO)")
-  field(EGU,  "$(SIG5.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG6)") {
-  field(DESC, "Analog Channel6 Readback")
-  field(SCAN, "$(SIG6.SCAN)")
-  field(DTYP, "Bx9000_KL3468")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_6")
-  field(PREC, "3")
-  field(ADEL, "$(SIG6.ADEL)")
-  field(EGUF, "$(SIG6.EGUF)")
-  field(EGUL, "$(SIG6.EGUL)")
-  field(HIGH, "$(SIG6.HIGH)")
-  field(HIHI, "$(SIG6.HIHI)")
-  field(HOPR, "$(SIG6.HOPR)")
-  field(HYST, "$(SIG6.HYST)")
-  field(LOLO, "$(SIG6.LOLO)")
-  field(LOPR, "$(SIG6.LOPR)")
-  field(LOW,  "$(SIG6.LOW)")
-  field(MDEL, "$(SIG6.MDEL)")
-  field(SMOO, "$(SIG6.SMOO)")
-  field(EGU,  "$(SIG6.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG7)") {
-  field(DESC, "Analog Channel7 Readback")
-  field(SCAN, "$(SIG7.SCAN)")
-  field(DTYP, "Bx9000_KL3468")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_7")
-  field(PREC, "3")
-  field(ADEL, "$(SIG7.ADEL)")
-  field(EGUF, "$(SIG7.EGUF)")
-  field(EGUL, "$(SIG7.EGUL)")
-  field(HIGH, "$(SIG7.HIGH)")
-  field(HIHI, "$(SIG7.HIHI)")
-  field(HOPR, "$(SIG7.HOPR)")
-  field(HYST, "$(SIG7.HYST)")
-  field(LOLO, "$(SIG7.LOLO)")
-  field(LOPR, "$(SIG7.LOPR)")
-  field(LOW,  "$(SIG7.LOW)")
-  field(MDEL, "$(SIG7.MDEL)")
-  field(SMOO, "$(SIG7.SMOO)")
-  field(EGU,  "$(SIG7.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
-record(ai, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG8)") {
-  field(DESC, "Analog Channel8 Readback")
-  field(SCAN, "$(SIG8.SCAN)")
-  field(DTYP, "Bx9000_KL3468")
-  field(INP,  "@$(COUPLER):$(SLOT):R_ANA_IN_8")
-  field(PREC, "3")
-  field(ADEL, "$(SIG8.ADEL)")
-  field(EGUF, "$(SIG8.EGUF)")
-  field(EGUL, "$(SIG8.EGUL)")
-  field(HIGH, "$(SIG8.HIGH)")
-  field(HIHI, "$(SIG8.HIHI)")
-  field(HOPR, "$(SIG8.HOPR)")
-  field(HYST, "$(SIG8.HYST)")
-  field(LOLO, "$(SIG8.LOLO)")
-  field(LOPR, "$(SIG8.LOPR)")
-  field(LOW,  "$(SIG8.LOW)")
-  field(MDEL, "$(SIG8.MDEL)")
-  field(SMOO, "$(SIG8.SMOO)")
-  field(EGU,  "$(SIG8.UNIT)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV,  "MINOR")
-  field(LSV,  "MINOR")
-  field(LINR, "LINEAR")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL4002-lcls.template b/Bx9000_MBTApp/Db/KL4002-lcls.template
deleted file mode 100644
index 449ab1b..0000000
--- a/Bx9000_MBTApp/Db/KL4002-lcls.template
+++ /dev/null
@@ -1,27 +0,0 @@
-record(ao, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Analog Channel $(CH) Set")
-  field(DTYP, "Bx9000_KL4002")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_1")
-  field(PREC, "$(PREC=3)")
-  field(EGUF, "$(EGUF)")
-  field(EGUL, "$(EGUL)")
-  field(DRVH, "$(DRVH)")
-  field(DRVL, "$(DRVL)")
-  field(HOPR, "$(HOPR)")
-  field(LOPR, "$(LOPR)")
-  field(EGU,  "$(EGU=V)")
-  field(PINI, "$(PINI=NO)")
-  field(LINR, "LINEAR")
-  info(autosaveFields,"VAL")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-#record(fanout, "$(APC):M$(SLOT)_CH$(CH)ReProc") {
-#  field(DESC, "FANOUT Reproc")
-#  field(SCAN, "Event")
-#  field(EVNT, "$(REPROCEVT)")
-#  field(SELM, "All")
-#  field(LNK1, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-#  field(PINI, "NO")
-#}
-
diff --git a/Bx9000_MBTApp/Db/KL4002.template b/Bx9000_MBTApp/Db/KL4002.template
deleted file mode 100644
index e8da2e8..0000000
--- a/Bx9000_MBTApp/Db/KL4002.template
+++ /dev/null
@@ -1,43 +0,0 @@
-record(ao, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel 1 Set")
-  field(DTYP, "Bx9000_KL4002")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_1")
-  field(PREC, "3")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(DRVH, "$(SIG1.DRVH)")
-  field(DRVL, "$(SIG1.DRVL)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(PINI, "$(SIG1.PINI)")
-  field(LINR, "LINEAR")
-}
-
-record(ao, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel 2 Set")
-  field(DTYP, "Bx9000_KL4002")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_2")
-  field(PREC, "3")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(DRVH, "$(SIG2.DRVH)")
-  field(DRVL, "$(SIG2.DRVL)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(PINI, "$(SIG2.PINI)")
-  field(LINR, "LINEAR")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-record(fanout, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)ReProc") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)")
-  field(LNK2, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL4004-lcls.template b/Bx9000_MBTApp/Db/KL4004-lcls.template
deleted file mode 100644
index e698274..0000000
--- a/Bx9000_MBTApp/Db/KL4004-lcls.template
+++ /dev/null
@@ -1,21 +0,0 @@
-record(ao, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "$(D="Analog Channel $(CH) Set")")
-  field(DTYP, "Bx9000_KL4004")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_$(CH)")
-  field(DOL,  "$(DOL="")")
-  field(OMSL, "$(OMSL=supervisory)")
-  field(PREC, "$(PREC=3)")
-  field(EGUF, "$(EGUF=10)")
-  field(EGUL, "$(EGUL=0)")
-  field(DRVH, "$(DRVH=10)")
-  field(DRVL, "$(DRVL=0)")
-  field(HOPR, "$(HOPR=10)")
-  field(LOPR, "$(LOPR=0)")
-  field(EGU,  "$(EGU=Volts)")
-  field(PINI, "$(PINI=NO)")
-  field(LINR, "LINEAR")
-  info(autosaveFields,"VAL")
-$(A=#)  alias("$(ALIAS)")
-}
-
-
diff --git a/Bx9000_MBTApp/Db/KL4004.template b/Bx9000_MBTApp/Db/KL4004.template
deleted file mode 100644
index e9c5068..0000000
--- a/Bx9000_MBTApp/Db/KL4004.template
+++ /dev/null
@@ -1,77 +0,0 @@
-record(ao, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel 1 Set")
-  field(DTYP, "Bx9000_KL4004")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_1")
-  field(PREC, "3")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(DRVH, "$(SIG1.DRVH)")
-  field(DRVL, "$(SIG1.DRVL)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(PINI, "$(SIG1.PINI)")
-  field(LINR, "LINEAR")
-}
-
-record(ao, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel 2 Set")
-  field(DTYP, "Bx9000_KL4004")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_2")
-  field(PREC, "3")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(DRVH, "$(SIG2.DRVH)")
-  field(DRVL, "$(SIG2.DRVL)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(PINI, "$(SIG2.PINI)")
-  field(LINR, "LINEAR")
-}
-
-record(ao, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)") {
-  field(DESC, "Analog Channel 3 Set")
-  field(DTYP, "Bx9000_KL4004")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_3")
-  field(PREC, "3")
-  field(EGUF, "$(SIG3.EGUF)")
-  field(EGUL, "$(SIG3.EGUL)")
-  field(DRVH, "$(SIG3.DRVH)")
-  field(DRVL, "$(SIG3.DRVL)")
-  field(HOPR, "$(SIG3.HOPR)")
-  field(LOPR, "$(SIG3.LOPR)")
-  field(EGU,  "$(SIG3.UNIT)")
-  field(PINI, "$(SIG3.PINI)")
-  field(LINR, "LINEAR")
-}
-
-record(ao, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG4)") {
-  field(DESC, "Analog Channel 4 Set")
-  field(DTYP, "Bx9000_KL4004")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_4")
-  field(PREC, "3")
-  field(EGUF, "$(SIG4.EGUF)")
-  field(EGUL, "$(SIG4.EGUL)")
-  field(DRVH, "$(SIG4.DRVH)")
-  field(DRVL, "$(SIG4.DRVL)")
-  field(HOPR, "$(SIG4.HOPR)")
-  field(LOPR, "$(SIG4.LOPR)")
-  field(EGU,  "$(SIG4.UNIT)")
-  field(PINI, "$(SIG4.PINI)")
-  field(LINR, "LINEAR")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-record(fanout, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)ReProc") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)")
-  field(LNK2, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)")
-  field(LNK3, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)")
-  field(LNK4, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG3)")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KL4132-lcls.template b/Bx9000_MBTApp/Db/KL4132-lcls.template
deleted file mode 100644
index 2713552..0000000
--- a/Bx9000_MBTApp/Db/KL4132-lcls.template
+++ /dev/null
@@ -1,33 +0,0 @@
-record(ao, "$(ALIAS)") {
-  field(DESC, "Analog Channel $(CH) Set")
-  field(PREC, "$(PREC)")
-  field(EGUF, "$(EGUF)")
-  field(EGUL, "$(EGUL)")
-  field(DRVH, "$(DRVH)")
-  field(DRVL, "$(DRVL)")
-  field(HOPR, "$(HOPR)")
-  field(LOPR, "$(LOPR)")
-  field(EGU,  "$(UNIT)")
-  field(PINI, "$(PINI)")
-  field(LINR, "LINEAR")
-  field(OMSL, "supervisory")
-  field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-}
-
-record(ao, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Analog Channel $(CH) Set")
-  field(DTYP, "Bx9000_KL4132")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_$(CH)")
-  field(PREC, "$(PREC)")
-  field(EGUF, "$(EGUF)")
-  field(EGUL, "$(EGUL)")
-  field(DRVH, "$(DRVH)")
-  field(DRVL, "$(DRVL)")
-  field(HOPR, "$(HOPR)")
-  field(LOPR, "$(LOPR)")
-  field(EGU,  "$(UNIT)")
-  field(PINI, "NO")
-   field(DOL, "$(ALIAS)")
-   field(OMSL, "closed_loop")
-  field(LINR, "LINEAR")
-}
diff --git a/Bx9000_MBTApp/Db/KL4132.template b/Bx9000_MBTApp/Db/KL4132.template
deleted file mode 100644
index 40f97f0..0000000
--- a/Bx9000_MBTApp/Db/KL4132.template
+++ /dev/null
@@ -1,43 +0,0 @@
-record(ao, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)") {
-  field(DESC, "Analog Channel 1 Set")
-  field(DTYP, "Bx9000_KL4132")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_1")
-  field(PREC, "3")
-  field(EGUF, "$(SIG1.EGUF)")
-  field(EGUL, "$(SIG1.EGUL)")
-  field(DRVH, "$(SIG1.DRVH)")
-  field(DRVL, "$(SIG1.DRVL)")
-  field(HOPR, "$(SIG1.HOPR)")
-  field(LOPR, "$(SIG1.LOPR)")
-  field(EGU,  "$(SIG1.UNIT)")
-  field(PINI, "$(SIG1.PINI)")
-  field(LINR, "LINEAR")
-}
-
-record(ao, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)") {
-  field(DESC, "Analog Channel 2 Set")
-  field(DTYP, "Bx9000_KL4132")
-  field(OUT,  "@$(COUPLER):$(SLOT):W_ANA_OUT_2")
-  field(PREC, "3")
-  field(EGUF, "$(SIG2.EGUF)")
-  field(EGUL, "$(SIG2.EGUL)")
-  field(DRVH, "$(SIG2.DRVH)")
-  field(DRVL, "$(SIG2.DRVL)")
-  field(HOPR, "$(SIG2.HOPR)")
-  field(LOPR, "$(SIG2.LOPR)")
-  field(EGU,  "$(SIG2.UNIT)")
-  field(PINI, "$(SIG2.PINI)")
-  field(LINR, "LINEAR")
-}
-
-# We put SIG1 macro in the name just to avoid name overlaping
-record(fanout, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)ReProc") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG1)")
-  field(LNK2, "$(S)_$(SS):$(DVC)$(N)$(DI):$(SIG2)")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/KM1004-lcls.template b/Bx9000_MBTApp/Db/KM1004-lcls.template
deleted file mode 100644
index f14eac2..0000000
--- a/Bx9000_MBTApp/Db/KM1004-lcls.template
+++ /dev/null
@@ -1,21 +0,0 @@
-record(bi, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-  field(DESC, "Digital Channel $(CH) Readback")
-#Need to scan faster than 1 Hz to avoid bad watchdog state?
-  field(SCAN, ".1 second")
-  field(DTYP, "Bx9000_KM1004")
-  field(INP,  "@$(COUPLER):$(SLOT):R_DIG_IN_$(CH)")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(FLNK, "$(ALIAS)")
-}
-
-record(bi, "$(ALIAS)") {
-  field(DESC, "$(D)")
-  field(INP, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-  field(ZNAM, "$(ZNAM)")
-  field(ONAM, "$(ONAM)")
-  field(ZSV,  "$(ZSV)")
-  field(OSV,  "$(OSV)")
-  field(COSV, "$(COSV)")
-}
-
diff --git a/Bx9000_MBTApp/Db/KM2004-lcls.template b/Bx9000_MBTApp/Db/KM2004-lcls.template
deleted file mode 100644
index 07d7106..0000000
--- a/Bx9000_MBTApp/Db/KM2004-lcls.template
+++ /dev/null
@@ -1,33 +0,0 @@
- record(bo, "$(ALIAS)") {
-   field(DESC, "$(D)")
-   field(OMSL, "supervisory")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-   field(ZSV,  "$(ZSV)")
-   field(OSV,  "$(OSV)")
-   field(FLNK, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-   field(VAL,  "0")
-   field(PINI, "YES")
-   field(HIGH, "$(HIGH)")
- }
-
- record(bo, "$(APC):M$(SLOT)_CH$(CH)_SIG") {
-   field(DESC, "Digital Channel $(CH) Set")
-   field(DTYP, "Bx9000_KM2004")
-   field(OUT,  "@$(COUPLER):$(SLOT):W_DIG_OUT_$(CH)")
-   field(DOL, "$(ALIAS)")
-   field(OMSL, "closed_loop")
-   field(ZNAM, "$(ZNAM)")
-   field(ONAM, "$(ONAM)")
-}
-
-
-record(fanout, "$(APC):M$(SLOT)_CH$(CH)_OUT_REPROC") {
-  field(DESC, "FANOUT Reproc")
-  field(SCAN, "Event")
-  field(EVNT, "$(REPROCEVT)")
-  field(SELM, "All")
-  field(LNK1, "$(APC):M$(SLOT)_CH$(CH)_SIG")
-  field(PINI, "NO")
-}
-
diff --git a/Bx9000_MBTApp/Db/Makefile b/Bx9000_MBTApp/Db/Makefile
deleted file mode 100644
index 3ee15c4..0000000
--- a/Bx9000_MBTApp/Db/Makefile
+++ /dev/null
@@ -1,84 +0,0 @@
-TOP=../..
-include $(TOP)/configure/CONFIG
-#----------------------------------------
-#  ADD MACRO DEFINITIONS AFTER THIS LINE
-
-#----------------------------------------------------
-#  Optimization of db files using dbst (DEFAULT: NO)
-#DB_OPT = YES
-
-#----------------------------------------------------
-# Create and install (or just install)
-# databases, templates, substitutions like this
-DB += Bx9000Info.template
-DB += Bx9000InstalledBTs.template
-DB += KL1104.template
-DB += KL1124.template
-DB += KL1408.template
-DB += KL1488.template
-DB += KL2114.template
-DB += KL2124.template
-DB += KL2408.template
-DB += KL2502.template
-DB += KL2512.template
-DB += KL2622.template
-DB += KL3064.template
-DB += KL3102.template
-DB += KL3022.template
-DB += KL3012.template
-DB += KL3162.template
-DB += KL3202.template
-DB += KL3204.template
-DB += KL3222.template
-DB += KL3312.template
-DB += KL3314.template
-DB += KL3408.template
-DB += KL3468.template
-DB += KL4002.template
-DB += KL4004.template
-DB += KL4132.template
-
-DB += Bx9000-lcls.db
-DB += Bx9000Info-lcls.template
-DB += Bx9000InstalledBTs-lcls.template
-DB += KL1104-lcls.template
-DB += KL1124-lcls.template
-DB += KL1488-lcls.template
-DB += KL1408-lcls.template
-DB += KL2114-lcls.template
-DB += KL2124-lcls.template
-DB += KL2408-lcls.template
-DB += KL2872-lcls.template
-DB += KL3064-lcls.template
-DB += KL3102-lcls.template
-DB += KL3022-lcls.template
-DB += KL3022-lcls-standalone.template
-DB += KL3012-lcls.template
-DB += KL3012-lcls-standalone.template
-DB += KL3162-lcls.template
-DB += KL3202-lcls.template 
-DB += KL3222-lcls.template 
-DB += KL3314-lcls.template 
-DB += KL3408-lcls.template
-DB += KL4002-lcls.template
-DB += KL4004-lcls.template
-DB += KL4132-lcls.template
-DB += KM1004-lcls.template
-DB += KM2004-lcls.template
-
-DB += analog-conversion-lcls.template
-
-# Single channel general purpose analog channel
-# Does not contain or reference higher-level PV(s)
-#DB += Bx9000-anlgchan-standalone.db
-
-# For use in conjunction with analog-conversion-lcls.template
-
-#----------------------------------------------------
-# If <anyname>.db template is not named <anyname>*.template add
-# <anyname>_TEMPLATE = <templatename>
-
-include $(TOP)/configure/RULES
-#----------------------------------------
-#  ADD RULES AFTER THIS LINE
-
diff --git a/Bx9000_MBTApp/Db/analog-conversion-lcls.template b/Bx9000_MBTApp/Db/analog-conversion-lcls.template
deleted file mode 100644
index c50653c..0000000
--- a/Bx9000_MBTApp/Db/analog-conversion-lcls.template
+++ /dev/null
@@ -1,59 +0,0 @@
-record(ai, "$(ALIAS)") {
-  field(DESC, "$(D)")
-  field(DTYP, "Soft Channel")
-  field(INP, "$(APC):M$(SLOT)_CH$(CH)_EGU  NPP MS")
-  field(PREC, "$(P)")
-  field(EGU, "$(EGU)")
-  field(HOPR, "$(H)")
-  field(LOPR, "$(L)")
-  field(HIHI, "$(HH)")
-  field(LOLO, "$(LL)")
-  field(HIGH, "$(HI)")
-  field(LOW, "$(LO)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV, "MINOR")
-  field(LSV, "MINOR")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-
-}
-
-
-# Subroutine record that performs calculation for 
-# these analog signal types:
-# 1 = linear analog in
-# 2 = log analog in
-# 3 = phase mixer
-record(sub, "$(APC):M$(SLOT)_CH$(CH)_EGU") {
-  field(DESC, "$(D)")
-  field(INAM, "InitAnalogCalc")
-  field(SNAM, "AnalogCalc")
-#Signal type (see comments above)
-  field(A, "$(TYPE)")
-#Raw signal
-  field(INPB, "$(APC):M$(SLOT)_CH$(CH)_SIG NPP MS")
-  field(C, "$(OFFS)")
-  field(D, "$(COEF)")
-#Associated device, used by phase mixer
-  field(INPE, "$(ASSOC)")
-#1/-1 determined by ASSOC, used by phase mixer
-  field(F, "$(SIGN)")
-  field(PREC, "$(P)")
-  field(EGU, "$(EGU)")
-  field(HOPR, "$(H)")
-  field(LOPR, "$(L)")
-  field(HIHI, "$(HH)")
-  field(LOLO, "$(LL)")
-  field(HIGH, "$(HI)")
-  field(LOW, "$(LO)")
-  field(HHSV, "MAJOR")
-  field(LLSV, "MAJOR")
-  field(HSV, "MINOR")
-  field(LSV, "MINOR")
-  field(HYST, "$(HY)")
-  field(ADEL, "$(AD)")
-  field(MDEL, "$(MD)")
-  field(FLNK, "$(ALIAS)")
-}
diff --git a/Bx9000_MBTApp/Makefile b/Bx9000_MBTApp/Makefile
deleted file mode 100644
index 60f5ad4..0000000
--- a/Bx9000_MBTApp/Makefile
+++ /dev/null
@@ -1,7 +0,0 @@
-TOP = ..
-include $(TOP)/configure/CONFIG
-DIRS += $(wildcard *src*)
-DIRS += $(wildcard *Src*)
-DIRS += $(wildcard *db*)
-DIRS += $(wildcard *Db*)
-include $(TOP)/configure/RULES_DIRS
diff --git a/Bx9000_MBTApp/src/Bx9000_BTDef.h b/Bx9000_MBTApp/src/Bx9000_BTDef.h
deleted file mode 100644
index 56a0ab6..0000000
--- a/Bx9000_MBTApp/src/Bx9000_BTDef.h
+++ /dev/null
@@ -1,70 +0,0 @@
-#ifndef	_Bx9000_BTDEF_H_
-#define	_Bx9000_BTDEF_H_
-
-#include "Bx9000_MBT_Common.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif  /* __cplusplus */
-
-#if	0	/* Must be 0, just for reference here */
-typedef	struct BUSTERM_IMG_DEF
-{
-	UINT8			busterm_string[8];	/* String name of bus terminal, must be 6 characters */
-	E_BUSTERM_TYPE	busterm_type;		/* number name of bus terminal */
-	UINT32          term_reg_exist;     /* 1: This terminal has registers, for coupler, this is not used, stay 0 */
-	UINT16          term_r32_dft;       /* default value of feature register */
-	UINT16			complex_in_words;	/* how many words in complex input processing image */
-	UINT16			complex_out_words;	/* how many words in complex output processing image */
-	UINT16			digital_in_bits;	/* how many bits in digital input processing image */
-	UINT16			digital_out_bits;	/* how many bits in digital output processing image */
-}	BUSTERM_IMG_DEF;
-#endif
-
-static BUSTERM_IMG_DEF	busterm_img_def[]={
-	{"Bx9000",		BT_TYPE_Bx9000,	0,		0,		0,		0,		0,		0},
-	{"KL1104",      BT_TYPE_KL1104, 0,      0,      0,      0,      4,      0},
-	{"KL1124",      BT_TYPE_KL1124, 0,      0,      0,      0,      4,      0},
-	{"KL1408",      BT_TYPE_KL1408, 0,      0,      0,      0,      8,      0},
-	{"KL1488",      BT_TYPE_KL1488, 0,      0,      0,      0,      8,      0},
-	{"KL2012",		BT_TYPE_KL2012,	0,		0,		0,		0,		0,		2},
-	{"KL2114",		BT_TYPE_KL2114,	0,		0,		0,		0,		0,		4},
-	{"KL2124",		BT_TYPE_KL2124,	0,		0,		0,		0,		0,		4},
-	{"KL2408",      BT_TYPE_KL2408, 0,      0,      0,      0,      0,      8},
-	{"KL2502",      BT_TYPE_KL2502, 1,      0x0004, 4,      4,      0,      0},
-	{"KL2512",      BT_TYPE_KL2512, 1,      0x0004, 4,      4,      0,      0},
-	{"KL2622",      BT_TYPE_KL2622, 0,      0,      0,      0,      0,      2},
-	{"KL2872",      BT_TYPE_KL2872, 0,      0,      0,      0,      0, 		16},
-	{"KL3064",      BT_TYPE_KL3064, 1,      0x1106, 8,      8,      0,      0},
-	{"KL3102",		BT_TYPE_KL3102,	1,		0x0000,	4,		4,		0,		0},
-	{"KL3022",		BT_TYPE_KL3022,	1,		0x0000,	4,		4,		0,		0},
-	{"KL3012",		BT_TYPE_KL3012,	1,		0x0000,	4,		4,		0,		0},
-/* per files Access from User Program-Register Overveiw.pdf and Access from User Program-Mapping.pdf; "Complete evaluation in Intel format with word alignment" --AC */
-	{"KL3162",		BT_TYPE_KL3162,	1,		0x0180,	4,		4,		0,		0},
-	{"KL3202",      BT_TYPE_KL3202, 1,      0x1006, 4,      4,      0,      0},
-/* per KL320xen.pdf, top of p. 14 -- AC */
-	{"KL3204",      BT_TYPE_KL3204, 1,      0x0106, 8,     	8,      0,      0},
-	{"KL3222",      BT_TYPE_KL3222, 1,      0x00A4, 4,      4,      0,      0},
-	{"KL3312",      BT_TYPE_KL3312, 1,      0x1006, 4,      4,      0,      0},
-	{"KL3314",      BT_TYPE_KL3314, 1,      0x1006, 8,      8,      0,      0},
-	{"KL3408",      BT_TYPE_KL3408, 1,      0x1106, 16,     16,     0,      0},
-	{"KL3468",      BT_TYPE_KL3468, 1,      0x1106, 16,     16,     0,      0},
-	{"KL4002",	BT_TYPE_KL4002,	1,	0x0006,	4,	 4,	0,	0},
-	{"KL4004",	BT_TYPE_KL4004,	1,	0x0006,	8,	 8,	0,	0},
-
-	{"KL4132",		BT_TYPE_KL4132,	1,		0x0006,	4,		4,		0,		0},
-	{"KM1004",      BT_TYPE_KM1004, 0,      0,      0,      0,      32,     0},
-	{"KM2004",      BT_TYPE_KM2004, 0,      0,      0,      0,      0, 		32},
-	{"KL9505",		BT_TYPE_KL9505,	0,	0,	0,	0,	0,	0},	/* Power Supply Module */
-	{"KL9020",		BT_TYPE_KL9020,	0,	0,	0,	0,	0,	0},
-	{"KL9080",		BT_TYPE_KL9080,	0,	0,	0,	0,	0,	0}, /* Separation terminal, just a blank */
-	{"KL9010",		BT_TYPE_KL9010,	0,	0,	0,	0,	0,	0}	/* This must be last one */
-};
-
-#define	N_BT_IMG_DEF	(sizeof(busterm_img_def)/sizeof(BUSTERM_IMG_DEF))
-
-#ifdef __cplusplus
-}
-#endif  /* __cplusplus */
-
-#endif
diff --git a/Bx9000_MBTApp/src/Bx9000_MBT.dbd b/Bx9000_MBTApp/src/Bx9000_MBT.dbd
deleted file mode 100644
index 97c830e..0000000
--- a/Bx9000_MBTApp/src/Bx9000_MBT.dbd
+++ /dev/null
@@ -1,36 +0,0 @@
-device(longin,INST_IO,devLiBx9000Info,"Bx9000_Info")
-device(mbbi,INST_IO,devMbbiBx9000Info,"Bx9000_Info")
-device(stringin,INST_IO,devSiBx9000Info,"Bx9000_Info")
-
-device(bi,INST_IO,devBiKL1104,"Bx9000_KL1104")
-device(bi,INST_IO,devBiKL1124,"Bx9000_KL1124")
-device(bi,INST_IO,devBiKL1408,"Bx9000_KL1408")
-device(bi,INST_IO,devBiKL1488,"Bx9000_KL1488")
-device(bi,INST_IO,devBiKM1004,"Bx9000_KM1004")
-device(bo,INST_IO,devBoKL2012,"Bx9000_KL2012")
-device(bo,INST_IO,devBoKL2114,"Bx9000_KL2114")
-device(bo,INST_IO,devBoKL2124,"Bx9000_KL2124")
-device(bo,INST_IO,devBoKL2408,"Bx9000_KL2408")
-device(ao,INST_IO,devAoKL2502,"Bx9000_KL2502")
-device(ao,INST_IO,devAoKL2512,"Bx9000_KL2512")
-device(bo,INST_IO,devBoKL2622,"Bx9000_KL2622")
-device(bo,INST_IO,devBoKL2872,"Bx9000_KL2872")
-device(bo,INST_IO,devBoKM2004,"Bx9000_KM2004")
-device(ai,INST_IO,devAiKL3064,"Bx9000_KL3064")
-device(ai,INST_IO,devAiKL3102,"Bx9000_KL3102")
-device(ai,INST_IO,devAiKL3022,"Bx9000_KL3022")
-device(ai,INST_IO,devAiKL3012,"Bx9000_KL3012")
-device(ai,INST_IO,devAiKL3162,"Bx9000_KL3162")
-device(ai,INST_IO,devAiKL3202,"Bx9000_KL3202")
-device(ai,INST_IO,devAiKL3204,"Bx9000_KL3204")
-device(ai,INST_IO,devAiKL3222,"Bx9000_KL3222")
-device(ai,INST_IO,devAiKL3312,"Bx9000_KL3312")
-device(ai,INST_IO,devAiKL3314,"Bx9000_KL3314")
-device(ai,INST_IO,devAiKL3408,"Bx9000_KL3408")
-device(ai,INST_IO,devAiKL3468,"Bx9000_KL3468")
-device(ao,INST_IO,devAoKL4002,"Bx9000_KL4002")
-device(ao,INST_IO,devAoKL4004,"Bx9000_KL4004")
-device(ao,INST_IO,devAoKL4132,"Bx9000_KL4132")
-driver(drvBx9000_MBT)
-
-registrar(drvBx9000_MBT_Register)
diff --git a/Bx9000_MBTApp/src/Bx9000_MBT_Common.h b/Bx9000_MBTApp/src/Bx9000_MBT_Common.h
deleted file mode 100644
index ed49a52..0000000
--- a/Bx9000_MBTApp/src/Bx9000_MBT_Common.h
+++ /dev/null
@@ -1,725 +0,0 @@
-#ifndef	_Bx9000_MBT_COMMON_H_
-#define	_Bx9000_MBT_COMMON_H_
-
-/* This is the header file of Beckhoff BX9000/BC9000/BK9000 EPICS driver */
-/* Because we use OSI interface, so we need EPICS 3.14 or above */
-#ifdef _WIN32
-#include <winsock2.h>
-#pragma pack(push, 1)
-#else
-
-#ifdef vxWorks
-#include <vxWorks.h>
-#include <sysLib.h>
-#include <sys/types.h>
-#include <sys/times.h>
-#include <sys/socket.h>
-#include <sockLib.h>
-#include <sys/ioctl.h>
-#include <errno.h>
-#include <netinet/in.h>
-#include <netinet/tcp.h>
-#include <arpa/inet.h>
-#include <net/if.h>
-#include <inetLib.h>
-#include <ioLib.h>
-#include <hostLib.h>
-#include <selectLib.h>
-#include <ctype.h>
-#include <tickLib.h>
-#include <unistd.h>
-#include <rebootLib.h>
-#else
-/* Unix settings */
-#include <sys/types.h>
-#include <sys/socket.h>
-#include <sys/time.h>
-#include <sys/ioctl.h>
-#include <sys/fcntl.h>
-#include <unistd.h>
-#include <errno.h>
-#include <netinet/in.h>
-#include <netinet/tcp.h>
-#include <arpa/inet.h>
-#include <netdb.h>
-#ifdef SOLARIS
-#include <sys/filio.h>
-#endif
-/* end of Unix settings */
-#endif
-#endif
-
-#include "string.h"
-#include "stdio.h"
-#include "stdlib.h"
-
-#include <epicsVersion.h>
-#if EPICS_VERSION>=3 && EPICS_REVISION>=14
-#include <epicsExport.h>
-#include <alarm.h>
-#include <dbDefs.h>
-#include <dbAccess.h>
-#include <recSup.h>
-#include <recGbl.h>
-#include <devSup.h>
-#include <drvSup.h>
-#include <link.h>
-#include <ellLib.h>
-#include <errlog.h>
-#include <special.h>
-#include <epicsTime.h>
-#include <epicsMutex.h>
-#include <epicsMessageQueue.h>
-#include <epicsThread.h>
-#else
-#error "We need EPICS 3.14 or above to support OSI calls!"
-#endif
-
-#include "drvModBusTCPClnt.h"
-
-/******************************************************************************************/
-/***** important!!! important!!! important!!! important!!! important!!! important!!! ******/
-/* We support only default image mapping. That means:                                     */
-/* Complete evaluation: map control & status register                                     */
-/* Word alignment                                                                         */
-/* No motorola format                                                                     */
-/******************************************************************************************/
-#define	Bx9000_MBT_DRV_VER_STRING	"Bx9000_MBT driver version 1.2.6"
-/******************************************************************************************/
-/*********************         define general data type         ***************************/
-/* we don't use epicsType because under vxWorks, char is unsigned by default              */
-/******************************************************************************************/
-#ifndef	vxWorks	/* because vxWorks already defined them */
-typedef unsigned char		UINT8;
-typedef unsigned short int	UINT16;
-typedef unsigned int		UINT32;
-#endif
-
-typedef signed char		SINT8;
-typedef signed short int	SINT16;
-typedef signed int		SINT32;
-typedef float			FLOAT32;
-typedef double			DOUBLE64;
-/******************************************************************************************/
-
-/******************************************************************************************/
-/* We have an opThread running for each Bx9000 coupler,                                   */
-/* it picks up request from msgQ and line them up in link list and execute it             */
-/* it also keep talking to coupler to avoid link drop                                     */
-/******************************************************************************************/
-#define OPTHREAD_PRIORITY       (50)		/* opthread Priority, make it a little lower than scan task to finish all request once */
-#define OPTHREAD_STACK          (0x20000)	/* opthread Stack Size */
-#define OPTHREAD_MSGQ_CAPACITY	(200)		/* This means we can support 200 signal records per coupler */
-#define	OPTHREAD_MSGQ_TMOUT	(0.5)		/* Even no request, we timeout then check link to avoid link drop */
-#define	OPTHREAD_RECON_INTVL	(30)		/* If coupler not ready, we try to reconnect every 30 seconds */
-/******************************************************************************************/
-
-/******************************************************************************************/
-/*********************       EPICS device support return        ***************************/
-/******************************************************************************************/
-#define CONVERT			(0)
-#define NO_CONVERT		(2)
-#define MAX_CA_STRING_SIZE      (40)
-/******************************************************************************************/
-
-/******************************************************************************************/
-/* Below the information is from Beckhoff BC9000/BK9000 manual                            */
-/* With BX9000, normally it supports up to 64 terminals,                                  */
-/* but with K-bus extension, it might support up to 255                                   */
-/* BK9000 and BC9000 can only support up to 64 bus terminals,                             */
-/* for portability, we support 255 here                                                   */
-/******************************************************************************************/
-#define	MAX_NUM_OF_BUSTERM	255	/* The max number of bus terminals per coupler */
-
-/* For BC9000/BK9000, this is 256, but for BX9000, it is 1024 */
-#define	MAX_WORDS_OF_INPIMG	1024	/* The max number of word of input processing image */
-/* For BC9000/BK9000, this is 256, but for BX9000, it is 1024 */
-#define MAX_WORDS_OF_OUTIMG	1024    /* The max number of word of output processing image */
-
-/* Below we define some special offset of memory based registers */
-#define	INPUT_IMG_BASE		0
-#define	OUTPUT_IMG_BASE		0x800
-#define	COUPLER_MREG_START	0x1000
-
-#define	COUPLER_ID_MREG		0x1000	/* Totally 7 words 0x1000 ~ 0x1006 */
-#define	COUPLER_ID_SIZE		7		/* words */
-
-/* Below two registers are used to access table/register in coupler, has nothing to do with PLC */
-#define	PLC_READ_INTERFACE	0x100A
-#define	PLC_WRITE_INTERFACE	0x110A
-
-/* We can read back the image size to verify our mapping */
-#define	COMPLEX_OUT_IMG_BITS_MREG	0x1010
-#define	COMPLEX_IN_IMG_BITS_MREG	0x1011
-#define	DIGITAL_OUT_IMG_BITS_MREG	0x1012
-#define	DIGITAL_IN_IMG_BITS_MREG	0x1013
-/******************************************************************************************/
-
-/******************************************************************************************/
-/* We define the default time out for ModBusTCP transaction and when we issue reset       */
-/******************************************************************************************/
-#define	DFT_MBT_TOUT	3	/* 3 seconds */
-#define	N_EXC_TO_RST	20	/* How many exception PDU will cause us to reset coupler */
-/******************************************************************************************/
-
-#ifdef __cplusplus
-extern "C" {
-#endif  /* __cplusplus */
-
-/******************************************************************************************/
-/* Below we defined all currently existing terminals,                                     */
-/* you might add some new entries once Beckhoff releases some new terminals               */
-/* The reason we use number to indicate bus terminal type is Bx9000 table 9 does same     */
-/******************************************************************************************/
-typedef enum BUSTERM_TYPE
-{
-	BT_TYPE_Bx9000 = 9000,	/* This is coupler */
-	BT_TYPE_KL9010 = 9010,	/* This is terminator */
-	BT_TYPE_KL9020 = 9020,	/* This is expander */
-	BT_TYPE_KL9080 = 9080,	/* Blank/separator */
-	BT_TYPE_KL9505 = 9505,	/* Power Supply Module */
-
-	/* 32 bits counter */
-	BT_TYPE_KL1501 = 1501,	/* Up/down counter 24 V DC, 100 kHz */
-
-	/* Multi-I/O Function Terminal */
-	BT_TYPE_KL1528 = 1528,	/* multi-I/O function, fast In-/Outputs */
-
-	/* Stepper motor terminal */
-	BT_TYPE_KL2531 = 2531,	/* Stepper motor terminal, 24 V DC, 1.5 A */
-	BT_TYPE_KL2541 = 2541,	/* Stepper motor terminal with incremental encoder, 50 V DC, 5 A */
-
-	/* pulse train output terminal RS422/24 V DC */
-	BT_TYPE_KL2521 = 2521,	/* 1-channel pulse train output terminal RS422/24 V DC */
-
-	/* pulse width output terminal */
-	BT_TYPE_KL2502 = 2502,  /* 2-channel Pulse width modulated digital output terminal 24 V DC, switched pos, 100ma */
-	BT_TYPE_KL2512 = 2512,  /* 2-channel Pulse width modulated digital output terminal 24 V DC, switched neg, 1A */
-
-	/* Digital terminal with both input/output */
-	BT_TYPE_KL2641 = 2641,	/* 1-channel relay output terminal 230 V AC, 16 A, manual operation */
-	BT_TYPE_KL2212 = 2212,	/* Imax = 0.5 A, diagnostic, rotectored sensor supply */
-	BT_TYPE_KL2692 = 2692,	/* Cycle monitoring terminal (watchdog) */
-	
-	/* Digital Input, last digit means num of channels */
-	BT_TYPE_KL1002 = 1002,	/* 24V DC, filter 3.0ms */
-	BT_TYPE_KL1012 = 1012,	/* 24V DC, filter 0.2ms */
-	BT_TYPE_KL1052 = 1052,	/* 24V DC, filter 3.0ms, p/n switching */
-	BT_TYPE_KL1212 = 1212,	/* 24V DC, filter 3.0ms, short protect */
-	BT_TYPE_KL1232 = 1232,	/* 24V DC, filter 0.2ms, pulse expansion */
-	BT_TYPE_KL1362 = 1362,	/* 24V DC, filter 3.0ms, break-in alarm */
-	BT_TYPE_KL1382 = 1382,	/* 24V DC, filter 30ms, thermistor */ 
-	BT_TYPE_KL1302 = 1302,	/* 24V DC, filter 3.0ms, type 2 sensors */
-	BT_TYPE_KL1312 = 1312,	/* 24V DC, filter 0.2ms, type 2 sensors */
-	BT_TYPE_KL1032 = 1032,	/* 48V DC, filter 3.0ms */
-	BT_TYPE_KL1712 = 1712,	/* 120V AC/DC, power contacts */
-	BT_TYPE_KL1702 = 1702,	/* 230V AC/DC, power contacts */
-	BT_TYPE_KL1722 = 1722,	/* 230V AC/DC, no power contacts */
-	BT_TYPE_KL1352 = 1352,	/* 24 V DC, filter 3.0ms, for NAMUR sensors */
-	BT_TYPE_KL1124 = 1124,  /* 5V DC, filter 3.0ms */
-	BT_TYPE_KL1104 = 1104,  /* 24V DC, filter 3.0ms */
-	BT_TYPE_KL1114 = 1114,  /* 24V DC, filter 0.2ms */
-	BT_TYPE_KL1154 = 1154,  /* 24V DC, filter 3.0ms, p/n switching */
-	BT_TYPE_KL1164 = 1164,  /* 24V DC, filter 0.2ms, p/n switching */
-	BT_TYPE_KL1184 = 1184,	/* 24V DC, filter 3.0ms, p switching */
-	BT_TYPE_KL1194 = 1194,	/* 24V DC, filter 0.2ms, p switching */
-	BT_TYPE_KL1304 = 1304,	/* 24V DC, filter 3.0ms, type 2 sensors */
-	BT_TYPE_KL1314 = 1314,	/* 24V DC, filter 0.2ms, type 2 sensors */
-	BT_TYPE_KL1404 = 1404,	/* 24V DC, filter 3.0ms, 4 x 2-wire connection */
-	BT_TYPE_KL1414 = 1414,	/* 24V DC, filter 0.2ms, 4 x 2-wire connection */
-	BT_TYPE_KL1434 = 1434,	/* 24V DC, filter 0.2ms, type 2 sensors, 4 x 2-wire connection */
-	BT_TYPE_KL1408 = 1408,	/* 24V DC, filter 3.0ms */
-	BT_TYPE_KL1418 = 1418,	/* 24V DC, filter 0.2ms */
-	BT_TYPE_KL1488 = 1488,  /* 24V DC, filter 3.0ms, n switching */
-	BT_TYPE_KL1498 = 1498,  /* 24V DC, filter 0.2ms, n switching */
-	BT_TYPE_KM1004 = 1004,	/* 24V DC, filter 3.0ms, 32 inputs */
-
-	/* Digital Output, last digit means num of channels */
-	BT_TYPE_KL2631 = 2631,  /* 1-channel relay output terminal 400 V AC, 300 V DC */
-	BT_TYPE_KL2012 = 2012,  /* 24 V DC, Imax = 0.5A */
-	BT_TYPE_KL2022 = 2022,  /* 24 V DC, Imax = 2.0A */
-	BT_TYPE_KL2032 = 2032,  /* 24 V DC, Imax = 0.5A, reverse voltage protection */
-	BT_TYPE_KL2612 = 2612,  /* relay output terminal 120 VAC, change-over */
-	BT_TYPE_KL2602 = 2602,  /* relay output terminal 230 VAC, make contacts */
-	BT_TYPE_KL2622 = 2622,  /* relay output terminal 230 VAC, make contacts, np power contact */
-	BT_TYPE_KL2702 = 2702,  /* 2-channel solid state load relay up to 230 V AC/DC, 0.3 A */
-	BT_TYPE_KL2712 = 2712,  /* 2-channel triac output terminal 12 ... 230 V AC , 0.5 A */
-	BT_TYPE_KL2722 = 2722,  /* 2-channel triac output terminal 12 ... 230 V AC , 1 A */
-	BT_TYPE_KL2732 = 2732,  /* 2-channel triac output terminal 12 ... 230 V AC , 1 A, no power contact */
-	BT_TYPE_KL2124 = 2124,  /* 4-channel 5 V DC */
-	BT_TYPE_KL2114 = 2114,  /* 4-channel digital output terminal 24 V DC */
-	BT_TYPE_KL2134 = 2134,  /* 4-channel digital output terminal 24 V DC, reverse voltage protection */
-	BT_TYPE_KL2184 = 2184,  /* 4-channel digital output terminal 24 V DC, n switching */
-	BT_TYPE_KL2404 = 2404,  /* 4-channel digital output terminal 24 V DC, Imax=0.5A, 4x2-wire conn */
-	BT_TYPE_KL2424 = 2424,  /* 4-channel digital output terminal 24 V DC, Imax=2.0A, 4x2-wire conn */
-	BT_TYPE_KL2408 = 2408,  /* 8-channel digital output terminal 24 V DC */
-	BT_TYPE_KL2488 = 2488,  /* 8-channel digital output terminal 24 V DC, n-switch */
-	BT_TYPE_KL2872 = 2872,  /* 16-channel digital output terminal 24 V DC, Imax=0.5A */
-	BT_TYPE_KM2004 = 2004,  /* 32-channel digital output terminal 24 V DC, Imax=0.5A */
-
-	/* Analog terminal with both input and output */
-	BT_TYPE_KL4494 = 4494,  /* 2-channel analog input, 2-channel analog output terminal -10 V ... 10 V, 12 bits */
-
-	/* Analog Input, last digit means num of channels */	
-	BT_TYPE_KL3061 = 3061,  /* 1-channel analog input terminal 0 ... 10 V, 12 bits */
-	BT_TYPE_KL3001 = 3001,  /* 1-channel analog input terminal -10 ... 10 V, 12 bits */
-	BT_TYPE_KL3011 = 3011,  /* 1-channel analog input terminal 0 ... 20 mA, 12 bits */
-	BT_TYPE_KL3041 = 3041,  /* 1-channel loop-powered input terminal 0 ... 20 mA, 12 bits */
-	BT_TYPE_KL3021 = 3021,  /* 1-channel analog input terminal 4 ... 20 mA, 12 bits */
-	BT_TYPE_KL3051 = 3051,  /* 1-channel loop-powered input terminal 4 ... 20 mA, 12 bits */
-	BT_TYPE_KL3311 = 3311,  /* 1-channel thermocouple with open-circuit recognition, 16 bits */
-	BT_TYPE_KL3201 = 3201,  /* 1-channel input terminal PT100 (RTD), 16 bits */
-	BT_TYPE_KL3351 = 3351,  /* 1-channel resistor bridge input terminal (strain gauge), 16 bits */
-	BT_TYPE_KL3356 = 3356,  /* 1-channel accurate resistance bridge evaluation, 16 bits */
-	BT_TYPE_KL3361 = 3361,  /* 1-channel oscilloscope terminal -16 mV ... +16 mV, 15 bits */
-	BT_TYPE_KL3172 = 3172,  /* 2-channel analog input terminal, 0 ... 2 V, 16 bits */
-	BT_TYPE_KL3062 = 3062,  /* 2-channel analog input terminal, 0 ... 10 V, 12 bits */
-	BT_TYPE_KL3162 = 3162,  /* 2-channel analog input terminal, 0 ... 10 V, 16 bits */
-	BT_TYPE_KL3182 = 3182,  /* 2-channel analog input terminal, -2 ... 2 V, 16 bits */
-	BT_TYPE_KL3002 = 3002,  /* 2-channel analog input terminal, -10 ... 10 V, 12 bits */
-	BT_TYPE_KL3102 = 3102,  /* 2-channel analog input terminal, -10 ... 10 V, 16 bits */
-	BT_TYPE_KL3132 = 3132,  /* 2-channel analog input terminal, -10 ... 10 V, 16 bits */
-	BT_TYPE_KL3012 = 3012,  /* 2-channel analog input terminal, 0 ... 20 mA, 12 bits */
-	BT_TYPE_KL3042 = 3042,  /* 2-channel loop-powered input terminal 0 ... 20 mA, 12 bits */
-	BT_TYPE_KL3112 = 3112,  /* 2-channel analog input terminal, 0 ... 20 mA, 15/16 bits */
-	BT_TYPE_KL3142 = 3142,  /* 2-channel analog input terminal, 0 ... 20 mA, 16 bits */
-	BT_TYPE_KL3022 = 3022,  /* 2-channel analog input terminal, 4 ... 20 mA, 12 bits */
-	BT_TYPE_KL3052 = 3052,  /* 2-channel loop-powered input terminal 4 ... 20 mA, 12 bits */
-	BT_TYPE_KL3122 = 3122,  /* 2-channel analog input terminal, 4 ... 20 mA, 15/16 bits */
-	BT_TYPE_KL3152 = 3152,  /* 2-channel analog input terminal, 4 ... 20 mA, 16 bits */
-	BT_TYPE_KL3312 = 3312,	/* 2-channel thermocouple with open-circuit recognition, 16 bits */
-	BT_TYPE_KL3202 = 3202,  /* 2-channel input terminal PT100 (RTD), 16 bits */
-	BT_TYPE_KL3222 = 3222,  /* 2-channel input terminal PT100 (RTD), 16 bits */
-	BT_TYPE_KL3362 = 3362,  /* 2-channel oscilloscope terminal -10 V ... +10 V, 15 bits */
-	BT_TYPE_KL3403 = 3403,  /* 3-phase power measurement terminal, 16 bits */
-	BT_TYPE_KL3064 = 3064,  /* 4-channel analog input terminal, 0 ... 10 V, 12 bits */
-	BT_TYPE_KL3464 = 3464,  /* 4-channel analog input terminal, 0 ... 10 V, 12 bits, 4x2-wire */
-	BT_TYPE_KL3404 = 3404,  /* 4-channel analog input terminal, -10 ... 10 V, 12 bits, 4x2-wire */
-	BT_TYPE_KL3444 = 3444,  /* 4-channel analog input terminal, 0 ... 20 mA, 12 bits, 4x2-wire */
-	BT_TYPE_KL3044 = 3044,  /* 4-channel analog input terminal, 0 ... 20 mA, 12 bits */
-	BT_TYPE_KL3454 = 3454,  /* 4-channel analog input terminal, 4 ... 20 mA, 12 bits, 4x2-wire */
-	BT_TYPE_KL3054 = 3054,  /* 4-channel analog input terminal, 4 ... 20 mA, 12 bits */
-	BT_TYPE_KL3314 = 3314,	/* 4-channel thermocouple with open-circuit recognition, 16 bits */
-	BT_TYPE_KL3204 = 3204,  /* 4-channel input terminal PT100 (RTD), 16 bits */
-	BT_TYPE_KL3468 = 3468,  /* 8-channel analog input terminal, 0 ... 10 V, 12 bits, 8x1-wire */
-	BT_TYPE_KL3408 = 3408,  /* 8-channel analog input terminal, -10 ... 10 V, 12 bits, 8x1-wire */
-	BT_TYPE_KL3448 = 3448,  /* 8-channel analog input terminal, 0 ... 20 mA, 12 bits, 8x1-wire */
-	BT_TYPE_KL3458 = 3458,  /* 8-channel analog input terminal, 4 ... 20 mA, 12 bits, 8x1-wire */
-
-	/* Analog Output, last digit means num of channels */
-	BT_TYPE_KL4001 = 4001,  /* 1-channel analog output terminal 0 ... 10 V, 12 bits */
-	BT_TYPE_KL4031 = 4031,  /* 1-channel analog output terminal -10 ... 10 V, 12 bits */
-	BT_TYPE_KL4011 = 4011,  /* 1-channel analog output terminal 0 ... 20 mA, 12 bits */
-	BT_TYPE_KL4021 = 4021,  /* 1-channel analog output terminal 4 ... 20 mA, 12 bits */
-	BT_TYPE_KL4002 = 4002,  /* 2-channel analog output terminal 0 ... 10 V, 12 bits */
-	BT_TYPE_KL4004 = 4004,  /* 4-channel analog output terminal 0 ... 10 V, 12 bits */
-	BT_TYPE_KL4032 = 4032,  /* 2-channel analog output terminal -10 ... 10 V, 12 bits */
-	BT_TYPE_KL4132 = 4132,  /* 2-channel analog output terminal -10 ... 10 V, 16 bits */
-	BT_TYPE_KL4012 = 4012,  /* 2-channel analog output terminal 0 ... 20 mA, 12 bits */
-	BT_TYPE_KL4112 = 4112,  /* 2-channel analog output terminal 0 ... 20 mA, 16 bits */
-	BT_TYPE_KL4022 = 4022,  /* 2-channel analog output terminal 4 ... 20 mA, 12 bits */
-	BT_TYPE_KL4404 = 4404,  /* 4-channel analog output terminal 0 ... 10 V, 12 bits, 4x2-wire */
-	BT_TYPE_KL4034 = 4034,  /* 4-channel analog output terminal -10 ... 10 V, 12 bits */
-	BT_TYPE_KL4434 = 4434,  /* 4-channel analog output terminal -10 ... 10 V, 12 bits, 4x2-wire */
-	BT_TYPE_KL4414 = 4414,  /* 4-channel analog output terminal 0 ... 20 mA, 12 bits, 4x2-wire */
-	BT_TYPE_KL4424 = 4424,  /* 4-channel analog output terminal 4 ... 20 mA, 12 bits, 4x2-wire */
-	BT_TYPE_KL4408 = 4408,  /* 8-channel analog output terminal 0 ... 10 V, 12 bits, 8x1-wire */
-	BT_TYPE_KL4438 = 4438,  /* 8-channel analog output terminal -10 ... 10 V, 12 bits, 8x1-wire */
-	BT_TYPE_KL4418 = 4418,  /* 8-channel analog output terminal 0 ... 20 mA, 12 bits, 8x1-wire */
-	BT_TYPE_KL4428 = 4428,  /* 8-channel analog output terminal 4 ... 20 mA, 12 bits, 8x1-wire */
-
-}	E_BUSTERM_TYPE;
-
-/******************************************************************************************/
-/* We try to describe bus terminal here, some info may be overkill                        */
-/* We can't use input/output to describe terminal because some terminals have both        */
-/* We don't use analog/digital to describe terminal because complex is more accurate      */
-/* complex_in_bits is always same as complex_out_bits, for more general, we define both   */
-/* This definition is for image mapping only, Bx9000_BTDef.h defines terminals            */
-/******************************************************************************************/
-typedef	struct BUSTERM_IMG_DEF
-{
-	UINT8			busterm_string[8];	/* String name of bus terminal, must be 6 characters */
-	E_BUSTERM_TYPE	busterm_type;		/* number name of bus terminal */
-	UINT32			term_reg_exist;		/* 1: This terminal has registers, for coupler, this is not used, stay 0 */
-	UINT16			term_r32_dft;		/* default value of feature register, if not exist, stay 0 */
-	UINT16			complex_in_words;	/* how many words in complex input processing image */
-	UINT16			complex_out_words;	/* how many words in complex output processing image */
-	UINT16			digital_in_bits;	/* how many bits in digital input processing image */
-	UINT16			digital_out_bits;	/* how many bits in digital output processing image */
-}	BUSTERM_IMG_DEF;
-
-/******************************************************************************************/
-/* We defined all possible operations, and default function only handle these             */
-/* CIMG means complex image, all offset is word, DIMG is digital image and bit based      */
-/******************************************************************************************/
-typedef enum    BUSTERM_OPTYPE
-{
-	BT_OPTYPE_READ_INPUT_CIMG,
-	BT_OPTYPE_READ_OUTPUT_CIMG,
-	BT_OPTYPE_WRITE_OUTPUT_CIMG,
-	BT_OPTYPE_READ_INPUT_DIMG,
-	BT_OPTYPE_READ_OUTPUT_DIMG,
-	BT_OPTYPE_WRITE_OUTPUT_DIMG,
-	BT_OPTYPE_READ_CPLR_MREG,
-	BT_OPTYPE_WRITE_CPLR_MREG,
-	BT_OPTYPE_READ_CPLR_REG,
-	BT_OPTYPE_WRITE_CPLR_REG,
-	BT_OPTYPE_CPLR_DIAG,
-	BT_OPTYPE_READ_TERM_REG,
-	BT_OPTYPE_WRITE_TERM_REG
-}	E_BUSTERM_OPTYPE;
-/******************************************************************************************/
-
-/******************************************************************************************/
-/*********************       Record type we support             ***************************/
-/******************************************************************************************/
-typedef	enum	EPICS_RTYPE
-{
-	EPICS_RTYPE_NONE,
-	EPICS_RTYPE_AI,
-	EPICS_RTYPE_AO,
-	EPICS_RTYPE_BI,
-	EPICS_RTYPE_BO,
-	EPICS_RTYPE_LI,
-	EPICS_RTYPE_LO,
-	EPICS_RTYPE_MBBI,
-	EPICS_RTYPE_MBBO,
-	EPICS_RTYPE_MBBID,
-	EPICS_RTYPE_MBBOD,
-	EPICS_RTYPE_SI,
-	EPICS_RTYPE_SO,
-	EPICS_RTYPE_WF
-}	E_EPICS_RTYPE;
-/******************************************************************************************/
-
-/******************************************************************************************/
-/* Data type of signal, it only means scalar value. For more complicated case             */
-/* user should have special function to process it                                        */
-/******************************************************************************************/
-typedef	enum	DATA_TYPE
-{
-	DTYP_UINT8,
-	DTYP_UINT16,
-	DTYP_UINT32,
-	DTYP_SINT8,
-	DTYP_SINT16,
-	DTYP_SINT32,
-	DTYP_FLOAT32,
-	DTYP_DOUBLE64
-}	E_DATA_TYPE;
-/******************************************************************************************/
-
-/******************************************************************************************/
-/* The signal definition, the busterm_string/type and function combination must be unique */
-/* The definition of arg1 -> arg3 is different between different operation                */
-/*	BT_OPTYPE_READ_INPUT_CIMG/BT_OPTYPE_READ_OUTPUT_CIMG/BT_OPTYPE_WRITE_OUTPUT_CIMG: */
-/* word offset to start of terminal, number of words, effective bits                      */
-/*	BT_OPTYPE_READ_INPUT_DIMG/BT_OPTYPE_READ_OUTPUT_DIMG/BT_OPTYPE_WRITE_OUTPUT_DIMG: */
-/* bit offset to start of terminal, number of bits, 0                                     */
-/*	BT_OPTYPE_READ_CPLR_MREG/BT_OPTYPE_WRITE_CPLR_MREG:                               */
-/* word offset in image above COUPLER_MREG_START, Reset to apply, 0?                      */
-/*	BT_OPTYPE_READ_CPLR_REG/BT_OPTYPE_WRITE_CPLR_REG:                                 */
-/* table, register, Reset to apply?                                                       */
-/*	BT_OPTYPE_CPLR_DIAG                                                               */
-/* sub-function, 0, 0                                                                     */
-/*	BT_OPTYPE_READ_TERM_REG/BT_OPTYPE_WRITE_TERM_REG:                                 */
-/* C/S word offset in complex input image, C/S word offset in complex output image, reg   */ 
-/******************************************************************************************/
-typedef	struct BUSTERM_SIG_PREDEF
-{/* We use this one to define signals */
-	UINT8			busterm_string[8];		/* String name of bus terminal, must be 6 characters */
-	E_BUSTERM_TYPE	busterm_type;			/* number name of bus terminal */
-	UINT8			function[MAX_CA_STRING_SIZE];	/* Function name, should be the third part of INP/OUT field */
-	E_BUSTERM_OPTYPE	busterm_optype;			/* The operation type, one of above list */
-	E_EPICS_RTYPE	epics_rtype;			/* EPICS record type to use this signal, EPICS_RTYP_NONE means not for EPICS or waive check */
-	E_DATA_TYPE		data_type;
-	UINT32			arg1;
-	UINT32			arg2;
-	UINT32			arg3;
-}	BUSTERM_SIG_PREDEF;
-
-typedef	struct BUSTERM_SIG_DEF
-{/* We use this one to really handle sigals */
-	UINT8			busterm_string[8];		/* String name of bus terminal, must be 6 characters */
-	E_BUSTERM_TYPE		busterm_type;			/* number name of bus terminal */
-	UINT8			function[MAX_CA_STRING_SIZE];	/* Function name, should be the third part of INP/OUT field */
-	E_BUSTERM_OPTYPE	busterm_optype;			/* The operation type, one of above list */
-	E_EPICS_RTYPE		epics_rtype;			/* EPICS record type to use this signal, EPICS_RTYP_NONE means not for EPICS or waive check */
-	E_DATA_TYPE		data_type;
-	union ARGS
-	{
-		struct CIMG_rw
-		{
-			UINT32	woffset;
-			UINT32	nwords;
-			UINT32	effbits;
-		}cimg_rw;
-		struct DIMG_rw
-		{
-			UINT32	boffset;
-			UINT32	nbits;
-			UINT32	not_used1;
-		}dimg_rw;
-		struct CPLR_MREG
-		{
-			UINT32	woffset;
-			UINT32	reset;
-			UINT32	not_used1;
-		}cplr_mreg;
-		struct CPLR_REG
-		{
-			UINT32	table;
-			UINT32	reg;
-			UINT32	reset;
-		}cplr_reg;
-		struct CPLR_DIAG
-		{
-			UINT32	subfunc;
-			UINT32	not_used1;
-			UINT32	not_used2;
-		}cplr_diag;
-		struct TERM_REG
-		{
-			UINT32	Rwoffset;
-			UINT32	Wwoffset;
-			UINT32	reg;
-		}term_reg;
-
-	}	args;
-}	BUSTERM_SIG_DEF;
-/******************************************************************************************/
-
-/******************************************************************************************/
-/* Below we define the run-time control structures                                        */
-/******************************************************************************************/
-typedef ELLLIST Bx9000_INIT_LIST;
-typedef ELLLIST Bx9000_COUPLER_LIST;
-typedef ELLLIST Bx9000_SIGNAL_LIST;
-typedef	ELLLIST	Bx9000_SIGPTR_LIST;
-
-typedef	struct Bx9000_INIT
-{
-	ELLNODE			node;	/* Linked List Node */
-	
-	BUSTERM_SIG_DEF		* pbusterm_sig_def;
-	UINT16			init_value;
-}	Bx9000_INIT;
-
-typedef	struct INSTALLED_BUSTERM
-{
-	BUSTERM_IMG_DEF		* pbusterm_img_def;
-	Bx9000_INIT_LIST	init_list;
-	UINT16			term_r32_value;		/* If this terminal has registers, this will hold the latest setting of feature register, or else stays 0 */
-	UINT32			complex_in_wordoffset;	/* complex input word offset of this module in input processing image */
-	UINT32			complex_out_wordoffset;	/* complex output word offset of this module in output processing image */
-	UINT32			digital_in_bitoffset;	/* digital input bit offset of this module in input processing image */
-	UINT32			digital_out_bitoffset;	/* digital output bit offset of this module in output processing image */
-}	INSTALLED_BUSTERM;
-
-/* BC9000/BK9000 coupler information */
-typedef struct Bx9000_COUPLER
-{
-	ELLNODE			node;	/* Linked List Node */
-
-	ModBusTCP_Link		mbt_link;	/* The link to device via ModBusTCP protocol */
-
-	epicsMutexId		mutex_lock;
-
-	INSTALLED_BUSTERM	installedBusTerm[MAX_NUM_OF_BUSTERM+2];	/* +2 means include coupler 9000 and terminator 9010 */
-	UINT32			terminated;		/* Is KL9010 already installed */
-
-	/* Below 4 we calculate first, then we read back from  memory imaged register of coupler to verify*/
-	UINT16			complex_out_bits;
-	UINT16			complex_in_bits;
-	UINT16			digital_out_bits;
-	UINT16			digital_in_bits;
-	/* Below 2 we calculate by software */
-	UINT32			total_out_words; /* This must be equal to (complex_out_bits + digital_out_bits +15)/16 */
-	UINT32			total_in_words; /* This must be equal to (complex_in_bits + digital_in_bits +15)/16 */
-
-	UINT32			couplerReady;	/* This indicate if coupler really usable */
-	UINT32			needReset;	/* This is used to bundle all register ops that need reset, so we only reset once to apply all */
-
-	epicsTimeStamp		time_lost_conn;	/* Last time we found we lost connection */
-	epicsTimeStamp		time_set_conn;	/* Last time we successfully set up connection */
-	epicsTimeStamp		time_last_try;	/* Last time we try to connect */
-
-	char			couplerID[COUPLER_ID_SIZE*2+2];
-	
-	/* We use hardcoded size, this wastes a little bit memory, but no malloc and error check */
-	UINT16			outputImage[MAX_WORDS_OF_OUTIMG];
-	UINT16			inputImage[MAX_WORDS_OF_INPIMG];
-
-	Bx9000_SIGPTR_LIST	sigptr_list;	/* All singals' poniter link list */
-
-	epicsMessageQueueId	msgQ_id;	/* Through this message queue, record processing sends request to opthread */
-
-	epicsThreadId		opthread_id;	/* operation thread ID for this Bx9000 */
-	char			opthread_name[MAX_CA_STRING_SIZE];
-
-}	Bx9000_COUPLER;
-
-/* Bx9000 device suport record information */
-typedef	struct Bx9000_DEVDATA
-{
-	dbCommon       		* precord;
-				
-	Bx9000_COUPLER		* pcoupler;
-	UINT16			slot;							
-	BUSTERM_SIG_DEF		* pbusterm_sig_def;
-
-	UINT16			value;	/* the value of input or ouput, 16 bits fits most of signals */
-
-	BOOL			op_done;
-	UINT32			err_code;	/* high 16 will be local error, low 16 will copy MBTC err code, 0 means no error */
-
-}	Bx9000_DEVDATA;
-
-/* This is the one dpvt ponits to and send in message queue */
-typedef	SINT32	(* Bx9000_FPTR)(Bx9000_DEVDATA * pdevdata, void * pextra_arg);
-typedef	struct Bx9000_SIGNAL
-{
-	ELLNODE			node;	/* Linked list node */
-
-	Bx9000_FPTR		process_fptr;
-
-	Bx9000_DEVDATA		* pdevdata;
-											
-	void			* pextra_arg;
-}	Bx9000_SIGNAL;
-
-/* This is the one that in the coupler's SIGPTR list */
-typedef	struct Bx9000_SIGPTR
-{
-	ELLNODE			node;	/* Linked list node */
-	Bx9000_SIGNAL		* psignal;
-}	Bx9000_SIGPTR;
-
-/* This is for device support to malloc memory easier */
-typedef	struct Bx9000_DEVSUPDATA
-{
-	Bx9000_SIGPTR	sigptr;
-	Bx9000_SIGNAL	signal;
-	Bx9000_DEVDATA	devdata;
-}	Bx9000_DEVSUPDATA;
-/******************************************************************************************/
-/* Define err_code here                                                                   */
-/******************************************************************************************/
-#define	ERR_CODE_NO_ERROR			0x00000000
-#define	ERR_CODE_CPLR_NOT_READY		0x00010000
-#define	ERR_CODE_SYNC_IMG_FAIL		0x00020000
-#define	ERR_CODE_PROC_NOT_SUPT		0x00030000
-#define ERR_CODE_OUTINIT_NOT_SUPT   0x00040000
-/******************************************************************************************/
-/* Below we define the function prototype                                                 */
-/******************************************************************************************/
-
-/******************************************************************************************/
-/* Below functions are from Bx9000_MBT_Ext.c                                              */
-/******************************************************************************************/
-
-/******************************************************************************************/
-/* By default, return value 0 means OK, return value -1 means something wrong             */
-/* In this file, all offsets for Mreg are absolute value                                  */
-/* All offsets for IO image is relative                                                   */
-/* We don't check any Bx9000 related parameter range, caller should prepare it            */
-/******************************************************************************************/
-
-/***********************************************************************************************/
-/*********************** Request PDU and Response PDU definition *******************************/
-/* We use xXYYYoffset to name offset, x is b(bit) or w(word), X is R(read) or W(Write)         */
-/* YYY is the combination of I(input image) O(output image) R(registers)                       */
-/* Dworddata means 16 bits scalar value for Diag, and WByteData means byte array to write      */
-/***********************************************************************************************/
-
-/* This function uses MBT function 8 to reset Bx9000 coupler */
-/* We need this in Bx9000 connection monitor task if too many exception PDUs */
-int Bx9000_MBT_Reset(ModBusTCP_Link mbt_link, unsigned int toutsec);
-
-/* This function uses MBT function 8 to do echo to test connection */
-/* We keep calling this in Bx9000 connection monitor task to avoid link drop */
-int Bx9000_MBT_TestLink(ModBusTCP_Link mbt_link, unsigned int toutsec);
-
-/* This function uses MBT function 3 to read coupler id from image */
-/* ID must be a pre-malloced buffer with size bytes */
-int	Bx9000_MBT_Read_Cplr_ID(ModBusTCP_Link mbt_link, char * ID, int size, unsigned int toutsec);
-
-/* This function uses MBT function 3 to read image size info from image */
-/* Then verify if the calculated size is correct */
-int	Bx9000_MBT_Verify_Image_Size(ModBusTCP_Link mbt_link, unsigned short int cal_complex_out_bits, unsigned short int cal_complex_in_bits,
-								 unsigned short int cal_digital_out_bits, unsigned short int cal_digital_in_bits, unsigned int toutsec);
-
-/* This function uses MBT function 3 to read memory image based register of Bx9000 coupler */
-/* Now it reads only one word, user might use it as template to build function to read more */
-/* Because we read only one register(word), we don't worry about oversize here */
-int Bx9000_MBT_Read_Cplr_MReg(ModBusTCP_Link mbt_link, unsigned short int wRRoffset, unsigned short int *pRWordData, unsigned int toutsec);
-
-/* This function uses MBT function 16 to write memory image based register of Bx9000 coupler */
-/* Now it writes only one word, user might use it as template to build function to write more */
-/* That is the reason we use function 16 instead of function 6 and use pWWordData to pass even single data */
-/* Because we read only one register(word), we don't worry about oversize here */
-int Bx9000_MBT_Write_Cplr_MReg(ModBusTCP_Link mbt_link, unsigned short int wWRoffset, unsigned short int *pWWordData, unsigned int toutsec);
-
-/* Below two functions use MBT function 3 and function 16 to operate the PLC register in Bx9000 coupler */
-/* This allow you read/write all table/register in coupler, we only operate one register(word) here  */
-/* Caution: Don't get confused, I call PLC register here just because it's listed in manual like this way */
-/* There is nothing to do with PLC. It is only for register access purpose */
-/* Because it is accessing coupler register, so terminal number will be always 0 */
-/* If you add terminal number as a parameter, you can use same technique to access terminal registers */
-/* But because we have another faster way to access terminal register, so we define other functions */
-int Bx9000_MBT_Read_Cplr_Reg(ModBusTCP_Link mbt_link, unsigned char table, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec);
-int Bx9000_MBT_Write_Cplr_Reg(ModBusTCP_Link mbt_link, unsigned char table, unsigned char reg, unsigned short int *pWWordData, unsigned int toutsec);
-
-/* Below two functions use MBT function 3 and function 16 to operate the terminal registers */
-/* Here we don't use PLC register in coupler, we use C/S byte mapped in image */
-/* To be general, we use two parameters to specify the offset of C/S in input and output image */
-/* But so far as we know, they should be always same */
-/* This allow you read/write all registers in terminal, we only operate one register(word) here  */
-int Bx9000_MBT_Read_Term_Reg(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int wWOoffset, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec);
-int Bx9000_MBT_Write_Term_Reg(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int wWOoffset, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec);
-
-/* We need this function to init whole local image of output, it is based on function 3 */
-int Bx9000_MBT_Read_Output_Image(ModBusTCP_Link mbt_link, unsigned short int *pimage, unsigned short int wimg_size, unsigned int toutsec);
-
-/* We try to combine all analong/digital signal operations based on memory image to one function 23 */
-/* pinpimage and poutimage will be always point to the begin of the image */
-/* But if nothing to write, we will use function 4 */
-/* If nothing to read, we will use function 16 */
-int Bx9000_MBT_Sync_Both_Image(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int RWordCount, unsigned short int *pinpimage,
-				unsigned short int wWOoffset, unsigned short int WWordCount, unsigned short int *poutimage,unsigned int toutsec);
-
-/******************************************************************************************/
-/* Below functions are from drvBx9000_MBT.c                                               */
-/******************************************************************************************/
-
-/* This function returns the pointer to the coupler with name */
-Bx9000_COUPLER	* Bx9000_Get_Coupler_By_Name(const char * cplrname);
-
-/* This must be called in st.cmd first before any operation to the coupler */
-/* name must be unique, and ipaddr is not necessary to be unique */
-/* This function can be only called in st.cmd */
-/* init_string will be "signame1=1234,signame2=0x2345" */
-int	Bx9000_Coupler_Add( char * cplrname, char * ipaddr, char * init_string);
-
-/* This function add a bus terminal to an existing coupler */
-/* init_string will be "signame1=1234,signame2=0x2345" */
-int	Bx9000_Terminal_Add( char * cplrname, UINT16 slot, char * btname, char * init_string);
-
-/* This function will be called by all device support */
-/* The memory for Bx9000_SIGNAL will be malloced inside */
-int	Bx9000_Signal_Init(dbCommon * precord, E_EPICS_RTYPE epics_rtype, char * ioString, E_BUSTERM_TYPE bttype, Bx9000_FPTR process_fptr, void * pextra_arg);
-
-/* This is the default process function, it deals with coupler reg/Mreg and terminal reg */
-/* For image based operation, it supports single bit op and single word op only */
-/* For the op needs more words or bits, it will put ERR_CODE_PROC_NOT_SUPT, you need your own function */
-int	Bx9000_Dft_ProcFunc(Bx9000_DEVDATA * pdevdata, void * pextra_arg);
-
-/* This is the function will be called in device support init function to init output record */
-int	Bx9000_Dft_OutInit(Bx9000_SIGNAL * psignal);
-
-#ifdef __cplusplus
-}
-#endif  /* __cplusplus */
-
-#endif
diff --git a/Bx9000_MBTApp/src/Bx9000_MBT_Ext.c b/Bx9000_MBTApp/src/Bx9000_MBT_Ext.c
deleted file mode 100644
index d1362ab..0000000
--- a/Bx9000_MBTApp/src/Bx9000_MBT_Ext.c
+++ /dev/null
@@ -1,330 +0,0 @@
-/* This file we implement some extensions of ModBusTCPClnt for Beckhoff */
-/* It is based on ModBusTCPClnt, but for Beckhoff Bx9000 only */
-#include "Bx9000_MBT_Common.h"
-
-
-/* Add MACRO Definitions for min/max */
-/* Needed as of EPICS BASE R3-14-11 */
-/* provide an macro that implements max() and min() */
-
-#ifndef __cplusplus
-#ifndef max
-#define max(a,b) (((a)>(b)) ? (a) : (b))
-#endif
-
-#ifndef min
-#define min(a,b) (((a)<(b)) ? (a) : (b))
-#endif
-#endif
-
-
-
-extern	SINT32	Bx9000_DRV_DEBUG;
-/******************************************************************************************/
-/* By default, return value 0 means OK, return value -1 means something wrong             */
-/* In this file, all offsets for Mreg are absolute value                                  */
-/* All offsets for IO image is relative                                                   */
-/* We don't check any Bx9000 related parameter range, caller should prepare it            */
-/******************************************************************************************/
-
-/***********************************************************************************************/
-/*********************** Request PDU and Response PDU definition *******************************/
-/* We use xXYYYoffset to name offset, x is b(bit) or w(word), X is R(read) or W(Write)         */
-/* YYY is the combination of I(input image) O(output image) R(registers)                       */
-/* Dworddata means 16 bits scalar value for Diag, and WByteData means byte array to write      */
-/***********************************************************************************************/
-
-/* This function uses MBT function 8 to reset Bx9000 coupler */
-/* We need this in Bx9000 connection monitor task if too many exception PDUs */
-int Bx9000_MBT_Reset(ModBusTCP_Link mbt_link, unsigned int toutsec)
-{
-	int status;
-	unsigned short dummy;	/* this is for holding the response */
-
-	/* We don't explicitly check link here because MBT_FunctionX does it */
-	/* int MBT_Function8(mbt_link, subFunction, WDworddata,  *pRDworddata, toutsec); */
-	status = MBT_Function8(mbt_link, 1, 0, &dummy, toutsec);
-	return status;
-}
-
-/* This function uses MBT function 8 to do echo to test connection */
-/* We keep calling this in Bx9000 connection monitor task to avoid link drop */
-int Bx9000_MBT_TestLink(ModBusTCP_Link mbt_link, unsigned int toutsec)
-{
-	unsigned short echo=0;   /* this is for holding the response */
-
-	/* We don't explicitly check link here because MBT_FunctionX does it */
-	/* int MBT_Function8(mbt_link, subFunction, WDworddata,  *pRDworddata, toutsec); */
-	MBT_Function8(mbt_link, 0, 0x5186, &echo, toutsec);
-	if(echo != 0x5186)
-		return -1;
-	else
-		return 0;
-}
-
-/* This function uses MBT function 3 to read coupler id from image */
-/* ID must be a pre-malloced buffer with size bytes */
-int	Bx9000_MBT_Read_Cplr_ID(ModBusTCP_Link mbt_link, char * ID, int size, unsigned int toutsec)
-{
-	int	status;
-	int	actual_size;	/* for swab */
-	int	loop;
-	unsigned short int temp_ID[COUPLER_ID_SIZE];
-	unsigned short int * ptemp;
-
-	if(size <= 0)
-		return -1;	/* You must have at least one byte */
-
-	/* We don't explicitly check link here because MBT_FunctionX does it */
-	/* int MBT_Function3(mbt_link, wRIORoffset, RWordCount, *pRWordData, toutsec); */
-	status = MBT_Function3(mbt_link, COUPLER_ID_MREG, COUPLER_ID_SIZE, temp_ID, toutsec);
-	if(status !=0 )
-	{/* Something wrong */
-		return -1;
-	}
-	else
-	{
-		actual_size = 2*min( (size-1)/2, COUPLER_ID_SIZE );
-		swab((char *)temp_ID, ID, actual_size);
-		ptemp = (unsigned short int *)ID;
-		for(loop = 0; loop < actual_size/2; loop++)
-			ptemp[loop] = ntohs(ptemp[loop]);	/* if IOC is big-endian, do nothing, or else swab again */
-		ID[actual_size]='\0';
-		return 0;
-	}
-}
-
-/* This function uses MBT function 3 to read image size info from image */
-/* Then verify if the calculated size is correct */
-int	Bx9000_MBT_Verify_Image_Size(
-	ModBusTCP_Link mbt_link,
-	unsigned short int cal_complex_out_bits,
-	unsigned short int cal_complex_in_bits,
-	unsigned short int cal_digital_out_bits,
-	unsigned short int cal_digital_in_bits,
-	unsigned int toutsec)
-{
-	int	status;
-	int	retStatus	= 0;
-	unsigned short int	temp;
-
-	status = MBT_Function3(mbt_link, COMPLEX_OUT_IMG_BITS_MREG, 1, &temp, toutsec);
-	if(status != 0 || temp != cal_complex_out_bits)
-	{
-		if ( Bx9000_DRV_DEBUG && status == 0 )
-		{
-			printf(	"Bx9000_MBT_Verify_Image_Size: COMPLEX_OUT_IMG_BITS_MREG was 0x%08x, not 0x%08x\n",
-					temp, cal_complex_out_bits );
-		}
-		retStatus = -1;
-	}
-
-	status = MBT_Function3(mbt_link, COMPLEX_IN_IMG_BITS_MREG, 1, &temp, toutsec);
-	if(status != 0 || temp != cal_complex_in_bits)
-	{
-		if ( Bx9000_DRV_DEBUG && status == 0 )
-		{
-			printf(	"Bx9000_MBT_Verify_Image_Size: COMPLEX_IN_IMG_BITS_MREG was 0x%08x, not 0x%08x\n",
-					temp, cal_complex_in_bits );
-		}
-		retStatus = -1;
-	}
-
-	status = MBT_Function3(mbt_link, DIGITAL_OUT_IMG_BITS_MREG, 1, &temp, toutsec);
-	if(status != 0 || temp != cal_digital_out_bits)
-	{
-		if ( Bx9000_DRV_DEBUG && status == 0 )
-		{
-			printf(	"Bx9000_MBT_Verify_Image_Size: DIGITAL_OUT_IMG_BITS_MREG was 0x%08x, not 0x%08x\n",
-					temp, cal_digital_out_bits );
-		}
-		retStatus = -1;
-	}
-
-	status = MBT_Function3(mbt_link, DIGITAL_IN_IMG_BITS_MREG, 1, &temp, toutsec);
-	if(status != 0 || temp != cal_digital_in_bits)
-	{
-		if ( Bx9000_DRV_DEBUG && status == 0 )
-		{
-			printf(	"Bx9000_MBT_Verify_Image_Size: DIGITAL_IN_IMG_BITS_MREG was 0x%08x, not 0x%08x\n",
-					temp, cal_digital_in_bits );
-		}
-		retStatus = -1;
-	}
-
-	return retStatus;
-}
-
-/* This function uses MBT function 3 to read memory image based register of Bx9000 coupler */
-/* Now it reads only one word, user might use it as template to build function to read more */
-/* Because we read only one register(word), we don't worry about oversize here */
-int Bx9000_MBT_Read_Cplr_MReg(
-	ModBusTCP_Link			mbt_link,
-	unsigned short int		wRRoffset,
-	unsigned short int	*	pRWordData,
-	unsigned int			toutsec	)
-{
-	int status;
-
-	/* We don't explicitly check link here because MBT_FunctionX does it */
-	/* int MBT_Function3(mbt_link, wRIORoffset, RWordCount, *pRWordData, toutsec); */
-	status = MBT_Function3(mbt_link, wRRoffset, 1, pRWordData, toutsec);
-	return status;
-}
-
-/* This function uses MBT function 16 to write memory image based register of Bx9000 coupler */
-/* Now it writes only one word, user might use it as template to build function to write more */
-/* That is the reason we use function 16 instead of function 6 and use pWWordData to pass even single data */
-/* Because we read only one register(word), we don't worry about oversize here */
-int Bx9000_MBT_Write_Cplr_MReg(ModBusTCP_Link mbt_link, unsigned short int wWRoffset, unsigned short int *pWWordData, unsigned int toutsec)
-{
-	int status;
-
-	/* We don't explicitly check link here because MBT_FunctionX does it */
-	/* int MBT_Function16(mbt_link, wWORoffset, WWordCount, *pWWordData, toutsec); */
-	status = MBT_Function16(mbt_link, wWRoffset, 1, pWWordData, toutsec);
-	return status;
-}
-
-/* Below two functions use MBT function 3 and function 16 to operate the PLC register in Bx9000 coupler */
-/* This allow you read/write all table/register in coupler, we only operate one register(word) here  */
-/* Caution: Don't get confused, I call PLC register here just because it's listed in manual like this way */
-/* There is nothing to do with PLC. It is only for register access purpose */
-/* Because it is accessing coupler register, so terminal number will be always 0 */
-/* If you add terminal number as a parameter, you can use same technique to access terminal registers */
-/* But because we have another faster way to access terminal register, so we define other functions */
-int Bx9000_MBT_Read_Cplr_Reg(ModBusTCP_Link mbt_link, unsigned char table, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec)
-{/* Fininsh me */
-	return 0;
-}
-
-int Bx9000_MBT_Write_Cplr_Reg(ModBusTCP_Link mbt_link, unsigned char table, unsigned char reg, unsigned short int *pWWordData, unsigned int toutsec)
-{/* Finish me */
-	return 0;
-}
-
-/* Below two functions use MBT function 3 and function 16 to operate the terminal registers */
-/* Here we don't use PLC register in coupler, we use C/S byte mapped in image */
-/* To be general, we use two parameters to specify the offset of C/S in input and output image */
-/* But so far as we know, they should be always same */
-/* This allow you read/write all registers in terminal, we only operate one register(word) here  */
-int Bx9000_MBT_Read_Term_Reg(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int wWOoffset, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec)
-{/* Fininsh me */
-        return 0;
-}
-
-int Bx9000_MBT_Write_Term_Reg(ModBusTCP_Link mbt_link, unsigned short int wRIoffset, unsigned short int wWOoffset, unsigned char reg, unsigned short int *pRWordData, unsigned int toutsec)
-{/* Finish me */
-        return 0;
-}
-
-/* We need this function to init whole local image of output, it is based on function 3 */
-int Bx9000_MBT_Read_Output_Image(ModBusTCP_Link mbt_link, unsigned short int *pimage, unsigned short int wimg_size, unsigned int toutsec)
-{
-	int status;
-	unsigned int	errorCode;
-	char		errString[40];
-	/* We don't check if woffset is bigger than 0x800 because we don't inlcude the Bx9000_Constant.h */
-	/* We don't explicitly check link here because MBT_FunctionX does it */
-	/* int MBT_Function3(mbt_link, wRIORoffset, RWordCount, *pRWordData, toutsec); */
-	status = MBT_Function3(mbt_link, OUTPUT_IMG_BASE, wimg_size, pimage, toutsec);
-	if(Bx9000_DRV_DEBUG)
-	{
-		if(status != 0)
-		{/* something wrong */
-			MBT_GetLastErr(mbt_link, &errorCode);
-			MBT_ErrCodeToString(errorCode, errString, 40);
-
-			printf("Read first %d words from output image of %s failed!\n", wimg_size, MBT_GetName(mbt_link));
-			printf("Error code 0x%08x, %s\n", errorCode, errString);
-		} 
-	}
-	return status;
-}
-
-/* We try to combine all analong/digital signal operations based on memory image to one function 23 */
-/* pinpimage and poutimage will be always point to the begin of the image */
-/* But if nothing to write, we will use function 4 */
-/* If nothing to read, we will use function 16 */
-int Bx9000_MBT_Sync_Both_Image(
-	ModBusTCP_Link			mbt_link,
-	unsigned short int		wRIoffset,
-	unsigned short int		RWordCount,
-	unsigned short int	*	pinpimage,
-	unsigned short int		wWOoffset,
-	unsigned short int		WWordCount,
-	unsigned short int	*	poutimage,
-	unsigned int			toutsec	)
-{
-	int status=0;
-	unsigned short int cur_wRIoffset, cur_wWOoffset;
-	unsigned short int remain_RWordCount, remain_WWordCount;
-	unsigned short int cur_RWordCount, cur_WWordCount;
-
-	cur_wRIoffset = wRIoffset;
-	cur_wWOoffset = wWOoffset;
-	remain_RWordCount = RWordCount;
-	remain_WWordCount = WWordCount;
-
-	while(TRUE)
-	{
-		if(0==remain_RWordCount && 0==remain_WWordCount)
-		{/* Nothing left to read or write, we successfully done */
-			return 0;
-		}
-		else if(0!=remain_RWordCount && 0==remain_WWordCount)
-		{/* We only have read left */
-			cur_RWordCount = min(remain_RWordCount, MBT_F3_MAX_RWORDCOUNT);
-			/* int MBT_Function3(mbt_link, wRIORoffset, RWordCount, *pRWordData, toutsec); */
-			status = MBT_Function3(mbt_link, cur_wRIoffset+INPUT_IMG_BASE, cur_RWordCount,
-									pinpimage+cur_wRIoffset, toutsec);
-			if(status != 0)
-			{/* something wrong */
-				return -1;
-			}
-			else
-			{/* everything is OK, update all variables */
-				cur_wRIoffset += cur_RWordCount;
-				remain_RWordCount -= cur_RWordCount;
-			}
-		}
-		else if(0==remain_RWordCount && 0!=remain_WWordCount)
-		{/*We only have write left */
-			cur_WWordCount = min(remain_WWordCount, MBT_F16_MAX_WWORDCOUNT);
-			/* int MBT_Function16(mbt_link, wWORoffset, WWordCount, *pWWordData, toutsec); */
-			status = MBT_Function16(mbt_link, cur_wWOoffset+OUTPUT_IMG_BASE, cur_WWordCount,
-									poutimage+cur_wWOoffset, toutsec);
-			if(status != 0)
-			{/* something wrong */
-				return -1;
-			}
-			else
-			{/* everything is OK, update all variables */
-				cur_wWOoffset += cur_WWordCount;
-				remain_WWordCount -= cur_WWordCount;
-			}
-		}
-		else if(0!=remain_RWordCount && 0!=remain_WWordCount)
-		{/* We got to do both read and write */
-			cur_RWordCount = min(remain_RWordCount, MBT_F23_MAX_RWORDCOUNT);
-			cur_WWordCount = min(remain_WWordCount, MBT_F23_MAX_WWORDCOUNT);
-			/*MBT_Function23(mbt_link, wRIRoffset, RWordCount,pRWordData,wWORoffset,WWordCount,pWWordData,toutsec)*/
-			status = MBT_Function23(mbt_link, cur_wRIoffset+INPUT_IMG_BASE, cur_RWordCount, pinpimage+cur_wRIoffset,
-							  cur_wWOoffset+OUTPUT_IMG_BASE, cur_WWordCount, poutimage+cur_wWOoffset, toutsec);
-			if(status != 0)
-			{/* something wrong */
-				return -1;
-			}
-			else
-			{/* everything is OK, update all variables */
-				cur_wRIoffset += cur_RWordCount;
-				remain_RWordCount -= cur_RWordCount;
-				cur_wWOoffset += cur_WWordCount;
-				remain_WWordCount -= cur_WWordCount;
-			}
-		}
-		else
-		{/* We should never ever get here */}
-	}
-}
-
diff --git a/Bx9000_MBTApp/src/Bx9000_SigDef.h b/Bx9000_MBTApp/src/Bx9000_SigDef.h
deleted file mode 100644
index feac7d2..0000000
--- a/Bx9000_MBTApp/src/Bx9000_SigDef.h
+++ /dev/null
@@ -1,268 +0,0 @@
-#ifndef	_Bx9000_SIGDEF_H_
-#define	_Bx9000_SIGDEF_H_
-
-#include "Bx9000_MBT_Common.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif  /* __cplusplus */
-
-#if	0	/* Must be 0, just for reference here */
-/******************************************************************************************/
-/* The signal definition, the busterm_string/type and function combination must be unique */
-/* The definition of arg1 -> arg3 is different between different operation                */
-/*	BT_OPTYPE_READ_INPUT_CIMG/BT_OPTYPE_READ_OUTPUT_CIMG/BT_OPTYPE_WRITE_OUTPUT_CIMG: */
-/* word offset to start of terminal, number of words, effective bits                      */
-/*	BT_OPTYPE_READ_INPUT_DIMG/BT_OPTYPE_READ_OUTPUT_DIMG/BT_OPTYPE_WRITE_OUTPUT_DIMG: */
-/* bit offset to start of terminal, number of bits, 0                                     */
-/*	BT_OPTYPE_READ_CPLR_MREG/BT_OPTYPE_WRITE_CPLR_MREG:                               */
-/* word offset in image above COUPLER_MREG_START, Reset to apply, 0?                      */
-/*	BT_OPTYPE_READ_CPLR_REG/BT_OPTYPE_WRITE_CPLR_REG:                                 */
-/* table, register, Reset to apply?                                                       */
-/*      BT_OPTYPE_CPLR_DIAG                                                               */
-/* sub-function, 0, 0                                                                     */
-/*	BT_OPTYPE_READ_TERM_REG/BT_OPTYPE_WRITE_TERM_REG:                                 */
-/* C/S word offset in complex input image, C/S word offset in complex output image, reg   */ 
-/******************************************************************************************/
-typedef	struct BUSTERM_SIG_PREDEF
-{/* We use this one to define signals */
-	UINT8				busterm_string[8];		/* String name of bus terminal, must be 6 characters */
-	E_BUSTERM_TYPE			busterm_type;			/* number name of bus terminal */
-	UINT8				function[MAX_CA_STRING_SIZE];	/* Function name, should be the third part of INP/OUT field */
-	E_BUSTERM_OPTYPE		busterm_optype;			/* The operation type, one of above list */
-	E_EPICS_RTYPE			epics_rtype;			/* EPICS record type to use this signal, EPICS_RTYP_NONE means not for EPICS or waive check */
-	E_DATA_TYPE			data_type;
-	UINT32				arg1;
-	UINT32				arg2;
-	UINT32				arg3;
-}	BUSTERM_SIG_PREDEF;
-#endif
-
-/* Most of signals could be processed by default function, but if you have anything longer than 16 bits, you might need your own function */
-static	BUSTERM_SIG_PREDEF	busterm_sig_predef[]= {
-	{"KL1104", BT_TYPE_KL1104, "R_DIG_IN_1",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    0, 1, 0},
-	{"KL1104", BT_TYPE_KL1104, "R_DIG_IN_2",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    1, 1, 0},
-	{"KL1104", BT_TYPE_KL1104, "R_DIG_IN_3",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    2, 1, 0},
-	{"KL1104", BT_TYPE_KL1104, "R_DIG_IN_4",        BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI, DTYP_UINT16,    3, 1, 0},
-
-	{"KL1124", BT_TYPE_KL1124, "R_DIG_IN_1",		BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI,	DTYP_UINT16,	0, 1, 0},
-	{"KL1124", BT_TYPE_KL1124, "R_DIG_IN_2",		BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI,	DTYP_UINT16,	1, 1, 0},
-	{"KL1124", BT_TYPE_KL1124, "R_DIG_IN_3",		BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI,	DTYP_UINT16,	2, 1, 0},
-	{"KL1124", BT_TYPE_KL1124, "R_DIG_IN_4",		BT_OPTYPE_READ_INPUT_DIMG,	EPICS_RTYPE_BI,	DTYP_UINT16,	3, 1, 0},
-
-	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_1",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    0, 1, 0},
-	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_2",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    1, 1, 0},
-	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_3",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    2, 1, 0},
-	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_4",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    3, 1, 0},
-	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_5",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    4, 1, 0},
-	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_6",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    5, 1, 0},
-	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_7",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    6, 1, 0},
-	{"KL1408", BT_TYPE_KL1408, "R_DIG_IN_8",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    7, 1, 0},
-
-	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_1",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    0, 1, 0},
-	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_2",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    1, 1, 0},
-	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_3",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    2, 1, 0},
-	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_4",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    3, 1, 0},
-	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_5",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    4, 1, 0},
-	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_6",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    5, 1, 0},
-	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_7",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    6, 1, 0},
-	{"KL1488", BT_TYPE_KL1488, "R_DIG_IN_8",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    7, 1, 0},
-
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_1",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    0, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_2",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    1, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_3",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    2, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_4",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    3, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_5",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    4, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_6",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    5, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_7",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    6, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_8",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    7, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_9",        BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,    8, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_10",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   	9, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_11",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   10, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_12",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   11, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_13",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   12, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_14",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   13, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_15",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   14, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_16",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   15, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_17",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   16, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_18",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   17, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_19",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   18, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_20",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   19, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_21",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   20, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_22",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   21, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_23",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   22, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_24",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   23, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_25",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   24, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_26",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   25, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_27",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   26, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_28",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   27, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_29",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   28, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_30",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   29, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_31",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   30, 1, 0},
-	{"KM1004", BT_TYPE_KM1004, "R_DIG_IN_32",       BT_OPTYPE_READ_INPUT_DIMG,      EPICS_RTYPE_BI, DTYP_UINT16,   31, 1, 0},
-
-	{"KL2012", BT_TYPE_KL2012, "W_DIG_OUT_1",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	0, 1, 0},
-	{"KL2012", BT_TYPE_KL2012, "W_DIG_OUT_2",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	1, 1, 0},
-
-	{"KL2114", BT_TYPE_KL2114, "W_DIG_OUT_1",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	0, 1, 0},
-	{"KL2114", BT_TYPE_KL2114, "W_DIG_OUT_2",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	1, 1, 0},
-	{"KL2114", BT_TYPE_KL2114, "W_DIG_OUT_3",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	2, 1, 0},
-	{"KL2114", BT_TYPE_KL2114, "W_DIG_OUT_4",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	3, 1, 0},
-
-	{"KL2124", BT_TYPE_KL2124, "W_DIG_OUT_1",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	0, 1, 0},
-	{"KL2124", BT_TYPE_KL2124, "W_DIG_OUT_2",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	1, 1, 0},
-	{"KL2124", BT_TYPE_KL2124, "W_DIG_OUT_3",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	2, 1, 0},
-	{"KL2124", BT_TYPE_KL2124, "W_DIG_OUT_4",		BT_OPTYPE_WRITE_OUTPUT_DIMG,	EPICS_RTYPE_BO,	DTYP_UINT16,	3, 1, 0},
-
-	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    0, 1, 0},
-	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    1, 1, 0},
-	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_3",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    2, 1, 0},
-	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_4",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    3, 1, 0},
-	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_5",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    4, 1, 0},
-	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_6",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    5, 1, 0},
-	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_7",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    6, 1, 0},
-	{"KL2408", BT_TYPE_KL2408, "W_DIG_OUT_8",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    7, 1, 0},
-
-	{"KL2502", BT_TYPE_KL2502, "W_DUTY_CYCLE_1",    BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 0},
-	{"KL2502", BT_TYPE_KL2502, "W_DUTY_CYCLE_2",    BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    3, 1, 0},
-	{"KL2502", BT_TYPE_KL2502, "W_PERIOD",    		BT_OPTYPE_WRITE_TERM_REG,    	EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 0},
-
-	{"KL2512", BT_TYPE_KL2512, "W_DUTY_CYCLE_1",    BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 0},
-	{"KL2512", BT_TYPE_KL2512, "W_DUTY_CYCLE_2",    BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    3, 1, 0},
-	{"KL2512", BT_TYPE_KL2512, "W_PERIOD",    		BT_OPTYPE_WRITE_TERM_REG,    	EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 0},
-
-	{"KL2622", BT_TYPE_KL2622, "W_DIG_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    0, 1, 0},
-	{"KL2622", BT_TYPE_KL2622, "W_DIG_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    1, 1, 0},
-
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    0, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    1, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_3",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    2, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_4",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    3, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_5",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    4, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_6",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    5, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_7",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    6, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_8",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    7, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_9",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    8, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_10",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    9, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_11",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   10, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_12",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   11, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_13",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   12, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_14",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   13, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_15",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   14, 1, 0},
-	{"KL2872", BT_TYPE_KL2872, "W_DIG_OUT_16",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   15, 1, 0},
-
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    0, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    1, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_3",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    2, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_4",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    3, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_5",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    4, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_6",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    5, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_7",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    6, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_8",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    7, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_9",       BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    8, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_10",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,    9, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_11",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   10, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_12",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   11, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_13",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   12, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_14",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   13, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_15",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   14, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_16",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   15, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_17",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   16, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_18",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   17, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_19",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   18, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_20",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   19, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_21",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   20, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_22",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   21, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_23",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   22, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_24",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   23, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_25",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   24, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_26",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   25, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_27",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   26, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_28",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   27, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_29",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   28, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_30",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   29, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_31",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   30, 1, 0},
-	{"KM2004", BT_TYPE_KM2004, "W_DIG_OUT_32",      BT_OPTYPE_WRITE_OUTPUT_DIMG,    EPICS_RTYPE_BO, DTYP_UINT16,   31, 1, 0},
-
-	{"KL3064", BT_TYPE_KL3064, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    1, 1, 15},/* 12 bits << 3 */
-	{"KL3064", BT_TYPE_KL3064, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    3, 1, 15},/* 12 bits << 3 */
-	{"KL3064", BT_TYPE_KL3064, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    5, 1, 15},/* 12 bits << 3 */
-	{"KL3064", BT_TYPE_KL3064, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    7, 1, 15},/* 12 bits << 3 */
-
-	{"KL3102", BT_TYPE_KL3102, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
-	{"KL3102", BT_TYPE_KL3102, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
-
-	{"KL3022", BT_TYPE_KL3022, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
-	{"KL3022", BT_TYPE_KL3022, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
-
-	{"KL3012", BT_TYPE_KL3012, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
-	{"KL3012", BT_TYPE_KL3012, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
-
-	/* KL3162 is single-ended while KL3102 is bipolar */
-	/* channel 1, terminals 1 and 2 */
-	{"KL3162", BT_TYPE_KL3162, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    1, 1, 16},
-	/* channel 2, terminals 5 and 6 */
-	{"KL3162", BT_TYPE_KL3162, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    3, 1, 16},
-
-    {"KL3202", BT_TYPE_KL3202, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
-    {"KL3202", BT_TYPE_KL3202, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
-
-	/* see KL3204.pdf */
-	/* channel 1, terminals 1 and 2 */
-    {"KL3204", BT_TYPE_KL3204, "R_ANA_IN_1",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	1, 1, 16},
-	/* channel 2, terminals 5 and 6 */
-	{"KL3204", BT_TYPE_KL3204, "R_ANA_IN_2",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	3, 1, 16},
-	/* channel 3, terminals 3 and 4 */
-    {"KL3204", BT_TYPE_KL3204, "R_ANA_IN_3",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	5, 1, 16},
-	/* channel 4, terminal 7 and 8 */
-	{"KL3204", BT_TYPE_KL3204, "R_ANA_IN_4",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	7, 1, 16}, 
-
-
-    {"KL3222", BT_TYPE_KL3222, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
-    {"KL3222", BT_TYPE_KL3222, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
-
-	{"KL3312", BT_TYPE_KL3312, "R_ANA_IN_1",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	1, 1, 16},
-	{"KL3312", BT_TYPE_KL3312, "R_ANA_IN_2",		BT_OPTYPE_READ_INPUT_CIMG,		EPICS_RTYPE_AI,	DTYP_SINT16,	3, 1, 16},
-	
-    {"KL3314", BT_TYPE_KL3314, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 16},
-	{"KL3314", BT_TYPE_KL3314, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 16},
-	{"KL3314", BT_TYPE_KL3314, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    5, 1, 16},
-	{"KL3314", BT_TYPE_KL3314, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    7, 1, 16},
-
-	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    1, 1, 15},/* 12 bits << 3 */
-	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    3, 1, 15},/* 12 bits << 3 */
-	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    5, 1, 15},/* 12 bits << 3 */
-	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    7, 1, 15},/* 12 bits << 3 */
-	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_5",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    9, 1, 15},/* 12 bits << 3 */
-	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_6",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    11, 1, 15},/* 12 bits << 3 */
-	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_7",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    13, 1, 15},/* 12 bits << 3 */
-	{"KL3408", BT_TYPE_KL3408, "R_ANA_IN_8",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_SINT16,    15, 1, 15},/* 12 bits << 3 */
-
-	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_1",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    1, 1, 15},/* 12 bits << 3 */
-	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_2",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    3, 1, 15},/* 12 bits << 3 */
-	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_3",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    5, 1, 15},/* 12 bits << 3 */
-	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_4",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    7, 1, 15},/* 12 bits << 3 */
-	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_5",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    9, 1, 15},/* 12 bits << 3 */
-	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_6",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    11, 1, 15},/* 12 bits << 3 */
-	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_7",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    13, 1, 15},/* 12 bits << 3 */
-	{"KL3468", BT_TYPE_KL3468, "R_ANA_IN_8",        BT_OPTYPE_READ_INPUT_CIMG,      EPICS_RTYPE_AI, DTYP_UINT16,    15, 1, 15},/* 12 bits << 3 */
-
-	{"KL4002", BT_TYPE_KL4002, "W_ANA_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 15},/* 12 bits << 3 */
-	{"KL4002", BT_TYPE_KL4002, "W_ANA_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    3, 1, 15},/* 12 bits << 3 */
-
-	{"KL4004", BT_TYPE_KL4004, "W_ANA_OUT_1",       BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    1, 1, 15},/* 12 bits << 3 */
-	{"KL4004", BT_TYPE_KL4004, "W_ANA_OUT_2",       BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    3, 1, 15},/* 12 bits << 3 */
-	{"KL4004", BT_TYPE_KL4004, "W_ANA_OUT_3",       BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    5, 1, 15},/* 12 bits << 3 */
-	{"KL4004", BT_TYPE_KL4004, "W_ANA_OUT_4",       BT_OPTYPE_WRITE_OUTPUT_CIMG,    EPICS_RTYPE_AO, DTYP_UINT16,    7, 1, 15},/* 12 bits << 3 */
-
-	{"KL4132", BT_TYPE_KL4132, "W_ANA_OUT_1",	BT_OPTYPE_WRITE_OUTPUT_CIMG,	EPICS_RTYPE_AO,	DTYP_SINT16,	1, 1, 16},
-	{"KL4132", BT_TYPE_KL4132, "W_ANA_OUT_2",	BT_OPTYPE_WRITE_OUTPUT_CIMG,	EPICS_RTYPE_AO,	DTYP_SINT16,	3, 1, 16}
-};
-
-#define	N_BT_SIG_PREDEF	(sizeof(busterm_sig_predef)/sizeof(BUSTERM_SIG_PREDEF))
-
-#ifdef __cplusplus
-}
-#endif  /* __cplusplus */
-
-#endif
diff --git a/Bx9000_MBTApp/src/Bx9000_Watchdog.cpp b/Bx9000_MBTApp/src/Bx9000_Watchdog.cpp
deleted file mode 100644
index 6dafe2d..0000000
--- a/Bx9000_MBTApp/src/Bx9000_Watchdog.cpp
+++ /dev/null
@@ -1,208 +0,0 @@
-#include "Bx9000_MBT_Common.h"
-#include "Bx9000_Watchdog.h"
-
-
-class	BK_Coupler
-{
-public:
-	BK_Coupler(	char *	pNameOrIpAddr )
-		:	m_fCreated(		FALSE		),
-			m_pModBusLink(	NULL		)
-	{
-		if ( pNameOrIpAddr == NULL )
-			return;
-
-		Bx9000_COUPLER	*	pCplr	= NULL;
-		pCplr	= Bx9000_Get_Coupler_By_Name( pNameOrIpAddr );
-		if ( pCplr != NULL )
-		{
-			m_pModBusLink	= pCplr->mbt_link;
-			return;
-		}
-
-		m_pModBusLink = MBT_Init( "BH1", pNameOrIpAddr, 502, 0xFF );
-		if ( !m_pModBusLink )
-			return;
-
-		if ( MBT_Connect( m_pModBusLink, 3 ) < 0 )
-		{
-			MBT_Release( m_pModBusLink );
-			m_pModBusLink	= NULL;
-			return;
-		}
-		m_fCreated	= true;
-	}
-
-	virtual ~BK_Coupler( )
-	{
-		if ( m_fCreated && m_pModBusLink )
-		{
-			MBT_Release( m_pModBusLink );
-			m_pModBusLink	= NULL;
-		}
-	}
-
-	ModBusTCP_Link	GetModBusLink( ) const
-	{
-		return m_pModBusLink;
-	}
-
-private:
-	bool					m_fCreated;
-	struct ModBusTCP_CB	*	m_pModBusLink;
-};
-
-extern "C" unsigned int BK_CheckWatchdog( char * pNameOrIpAddr, unsigned int fQuiet )
-{
-	unsigned short			watchdogElapsed	= FALSE;
-	BK_Coupler				bkCoupler(	pNameOrIpAddr ); 
-	ModBusTCP_Link			mbt_link		= bkCoupler.GetModBusLink();
-
-	if ( mbt_link )
-		watchdogElapsed	= MBT_CheckWatchdog( mbt_link, fQuiet );
-	return watchdogElapsed;
-}
-
-extern "C" unsigned int MBT_CheckWatchdog( ModBusTCP_Link mbt_link, unsigned int fQuiet )
-{
-	unsigned short			couplerStatus	= 0;
-	unsigned short			watchdogElapsed	= FALSE;
-	const unsigned short	timeoutSec		= 2;
-
-	MBT_Function3( mbt_link, BK_REG_COUPLER_STATUS, 1, &couplerStatus, timeoutSec );
-	if ( couplerStatus & BK_STATUS_WATCHDOG_ELAPSED )
-		watchdogElapsed	= TRUE;
-	if ( !fQuiet )
-	{
-		printf( "Watchdog status is %s.\n", ( watchdogElapsed ? "ELAPSED" : "OK" ) );
-	}
-
-	return watchdogElapsed;
-}
-
-
-/*
- *	BK_SetWatchdogType
- *	Sets the type to either R/W or Write mode.
- *	R/W mode resets the watchdog timer on either a read or a write telegram.
- *	Write mode resets the watchdog timer only on write telegrams.
- *	(A telegram is a message reading or writing a process value)
- *	tyWatchdog = 1 for R/W Telegram Mode
- *	tyWatchdog = 0 for Write Telegram Mode
- */
-extern "C" int BK_SetWatchdogType( char * pNameOrIpAddr, unsigned int tyWatchdog )
-{
-	int						result		= 0;
-	BK_Coupler				bkCoupler(	pNameOrIpAddr ); 
-	ModBusTCP_Link			mbt_link	= bkCoupler.GetModBusLink();
-
-	if ( mbt_link )
-		result = MBT_SetWatchdogType( mbt_link, tyWatchdog );
-
-	return result;
-}
-
-
-/*
- *	MBT_SetWatchdogType
- *	Sets the type to either R/W or Write mode.
- *	R/W mode resets the watchdog timer on either a read or a write telegram.
- *	Write mode resets the watchdog timer only on write telegrams.
- *	(A telegram is a message reading or writing a process value)
- *	tyWatchdog = 1 for R/W Telegram Mode
- *	tyWatchdog = 0 for Write Telegram Mode
- */
-extern "C" int MBT_SetWatchdogType( ModBusTCP_Link mbt_link, unsigned int tyWatchdog )
-{
-	const unsigned short	timeoutSec	= 2;
-
-	MBT_Function6(mbt_link, BK_REG_WATCHDOG_TYPE, tyWatchdog, timeoutSec );
-	printf( "Watchdog type is now %s.\n", ( tyWatchdog ? "R/W Telegram" : "Write Telegram" ) );
-
-	return 0;
-}
-
-
-extern "C" int BK_ResetWatchdog( char * pNameOrIpAddr )
-{
-	int						result		= 0;
-	BK_Coupler				bkCoupler(	pNameOrIpAddr ); 
-	ModBusTCP_Link			mbt_link	= bkCoupler.GetModBusLink();
-
-	if ( mbt_link )
-	{
-		result = MBT_ResetWatchdog( mbt_link );
-		MBT_CheckWatchdog( mbt_link, FALSE );
-	}
-
-	return result;
-}
-
-
-extern "C" int MBT_ResetWatchdog( ModBusTCP_Link mbt_link )
-{
-	const unsigned short	timeoutSec	= 2;
-
-	MBT_Function6(mbt_link, BK_REG_WATCHDOG_RESET, BK_WATCHDOG_RESET_WORD_0, timeoutSec);
-	MBT_Function6(mbt_link, BK_REG_WATCHDOG_RESET, BK_WATCHDOG_RESET_WORD_1, timeoutSec);
-
-	return 0;
-}
-
-
-extern "C" int BK_SetWatchdogTimeout( char * pNameOrIpAddr, unsigned int timeout )
-{
-	int						result		= 0;
-	BK_Coupler				bkCoupler(	pNameOrIpAddr ); 
-	ModBusTCP_Link			mbt_link	= bkCoupler.GetModBusLink();
-
-	if ( mbt_link )
-		result = MBT_SetWatchdogTimeout( mbt_link, timeout );
-
-	return result;
-}
-
-
-extern "C" int MBT_SetWatchdogTimeout( ModBusTCP_Link mbt_link, unsigned int timeout )
-{
-	const unsigned short	timeoutSec	= 2;
-	int						result		= 0;
-
-	result = MBT_ResetWatchdog( mbt_link );
-	if ( result < 0 )
-	{
-		errPrintf( result, __FILE__, __LINE__, "MBT_SetWatchdogTimeout: Unable to reset watchdog!\n" );
-		return result;
-	}
-	result = MBT_Function6(mbt_link, BK_REG_WATCHDOG_TIMEOUT, timeout, timeoutSec);
-	if ( result < 0 )
-	{
-		errPrintf( result, __FILE__, __LINE__, "MBT_SetWatchdogTimeout: Error setting timeout!\n" );
-	}
-	else
-	{
-		if ( timeout == 0 )
-		{
-			printf( "Watchdog timeout is now disabled.\n" );
-			printf( "Call BK_SetWatchdogTimeout() to enable.\n\n" );
-		}
-		else
-		{
-			printf( "Watchdog timeout is now %dms.\n\n", timeout );
-		}
-	}
-
-	return result;
-}
-
-
-extern "C" int BK_DisableWatchdog( char * pNameOrIpAddr )
-{
-	return BK_SetWatchdogTimeout( pNameOrIpAddr, 0 );
-}
-
-
-extern "C" int MBT_DisableWatchdog( ModBusTCP_Link mbt_link )
-{
-	return MBT_SetWatchdogTimeout( mbt_link, 0 );
-}
diff --git a/Bx9000_MBTApp/src/Bx9000_Watchdog.h b/Bx9000_MBTApp/src/Bx9000_Watchdog.h
deleted file mode 100644
index b8ca211..0000000
--- a/Bx9000_MBTApp/src/Bx9000_Watchdog.h
+++ /dev/null
@@ -1,105 +0,0 @@
-#ifndef		_BX9000_WATCHDOG_H_
-#define		_BX9000_WATCHDOG_H_
-
-#ifdef __cplusplus
-extern "C" {
-#endif  /* __cplusplus */
-
-/**
- * These Beckhoff registers are 16 bits wide
- */
-static const unsigned short int	BK_REG_COUPLER_STATUS		=	0x100C;	/* Read only */
-static const unsigned short int	BK_REG_WATCHDOG_CURTIME		=	0x1020;	/* Read only */
-static const unsigned short int	BK_REG_WATCHDOG_TIMEOUT		=	0x1120;
-static const unsigned short int	BK_REG_WATCHDOG_RESET		=	0x1121;
-static const unsigned short int	BK_REG_WATCHDOG_TYPE		=	0x1122;
-
-static const unsigned short int	BK_STATUS_WATCHDOG_ELAPSED	=	0x8000;
-static const unsigned short int	BK_STATUS_CONFIG_ERROR		=	0x0002;
-static const unsigned short int	BK_STATUS_BUS_TERM_ERROR	=	0x0001;
-
-static const unsigned short int	BK_WATCHDOG_RESET_WORD_0	=	0xBECF;
-static const unsigned short int	BK_WATCHDOG_RESET_WORD_1	=	0xAFFE;
-
-
-/**
- *	BK_CheckWatchdog
- *	Checks the status of the watchdog timer.
- *	If fQuiet is FALSE or 0, it prints status to stdout
- *	Returns TRUE if watchdog has elapsed, FALSE if OK
- */
-extern unsigned int BK_CheckWatchdog( char * pNameOrIpAddr, unsigned int fQuiet );
-
-/**
- *	MBT_CheckWatchdog
- *	Checks the status of the watchdog timer.
- *	If fQuiet is FALSE or 0, it prints status to stdout
- *	Returns TRUE if watchdog has elapsed, FALSE if OK
- */
-extern unsigned int MBT_CheckWatchdog( ModBusTCP_Link mbt_link, unsigned int fQuiet );
-
-/**
- *	BK_SetWatchdogType
- *	Sets the type to either R/W or Write mode.
- *	R/W mode resets the watchdog timer on either a read or a write telegram.
- *	Write mode resets the watchdog timer only on write telegrams.
- *	(A telegram is a message reading or writing a process value);
- *	tyWatchdog = 1 for R/W Telegram Mode
- *	tyWatchdog = 0 for Write Telegram Mode
- */
-extern int BK_SetWatchdogType( char * pNameOrIpAddr, unsigned int tyWatchdog );
-
-/**
- *	MBT_SetWatchdogType
- *	Sets the type to either R/W or Write mode.
- *	R/W mode resets the watchdog timer on either a read or a write telegram.
- *	Write mode resets the watchdog timer only on write telegrams.
- *	(A telegram is a message reading or writing a process value);
- *	tyWatchdog = 1 for R/W Telegram Mode
- *	tyWatchdog = 0 for Write Telegram Mode
- */
-extern int MBT_SetWatchdogType( ModBusTCP_Link mbt_link, unsigned int tyWatchdog );
-
-/**
- *	BK_ResetWatchdog
- *	Resets the watchdog timer
- */
-extern int BK_ResetWatchdog( char * pNameOrIpAddr );
-
-/**
- *	MBT_ResetWatchdog
- *	Resets the watchdog timer
- */
-extern int MBT_ResetWatchdog( ModBusTCP_Link mbt_link );
-
-/**
- *	BK_SetWatchdogTimer
- *	Set the watchdog timer to the desired timeout in ms
- */
-extern int BK_SetWatchdogTimeout( char * pNameOrIpAddr, unsigned int timeout );
-
-/**
- *	MBT_SetWatchdogTimer
- *	Set the watchdog timer to the desired timeout in ms
- */
-extern int MBT_SetWatchdogTimeout( ModBusTCP_Link mbt_link, unsigned int timeout );
-
-/**
- *	BK_DisableWatchdog
- *	Disable the watchdog timer by setting the timeout to zero
- *	To re-enable, use BK_SetWatchdogTimeout()
- */
-extern int BK_DisableWatchdog( char * pNameOrIpAddr );
-
-/**
- *	MBT_DisableWatchdog
- *	Disable the watchdog timer by setting the timeout to zero
- *	To re-enable, use MBT_SetWatchdogTimeout()
- */
-extern int MBT_DisableWatchdog( ModBusTCP_Link mbt_link );
-
-#ifdef __cplusplus
-}
-#endif  /* __cplusplus */
-
-#endif	/*	_BX9000_WATCHDOG_H_	*/
diff --git a/Bx9000_MBTApp/src/Makefile b/Bx9000_MBTApp/src/Makefile
deleted file mode 100644
index 97a75da..0000000
--- a/Bx9000_MBTApp/src/Makefile
+++ /dev/null
@@ -1,93 +0,0 @@
-TOP=../..
-
-include $(TOP)/configure/CONFIG
-#----------------------------------------
-#  ADD MACRO DEFINITIONS AFTER THIS LINE
-#=============================
-#==================================================
-# The following will built and instaled:
-# dbd/Bx9000_MBT.dbd
-# include/Bx9000_MBT.h
-# bin/<arch>/Bx9000_MBTLib.munch
-# lib/<arch>/libBx9000_MBT.a
-#=============================
-# build an ioc application
-
-# This is what we will be building from here:
-# create library for OSI type driver
-LIBRARY_IOC += Bx9000_MBT
-
-# This is for vxWorks specific drivers.
-# Don't forget to substitute your driver name.
-# create library for linking will install in <lib>
-# LIBRARY_vxWorks += Bx9000_MBT
-
-# create munch file for dynamic loading will install in <bin>
-PROD_IOC_vxWorks += Bx9000_MBTLib
-
-INC += Bx9000_Watchdog.h
-
-# The following line makes the Bx9000_MBT.h file
-# This is needed for Record support. So uncomment
-# the following line if you are making record support.
-##DBDINC += Bx9000_MBT
-# Bx9000_MBT.dbd will be created from Bx9000_MBTInclude.dbd
-DBD += Bx9000_MBT.dbd
-
-
-# Add locally compiled object code
-Bx9000_MBT_SRCS += Bx9000_MBT_Ext.c
-Bx9000_MBT_SRCS += Bx9000_Watchdog.cpp
-Bx9000_MBT_SRCS += drvBx9000_MBT.c
-Bx9000_MBT_SRCS += devBx9000Info.c
-Bx9000_MBT_SRCS += devKL1104.c
-Bx9000_MBT_SRCS += devKL1124.c
-Bx9000_MBT_SRCS += devKL1408.c
-Bx9000_MBT_SRCS += devKL1488.c
-Bx9000_MBT_SRCS += devKM1004.c
-Bx9000_MBT_SRCS += devKL2012.c
-Bx9000_MBT_SRCS += devKL2114.c
-Bx9000_MBT_SRCS += devKL2124.c
-Bx9000_MBT_SRCS += devKL2408.c
-Bx9000_MBT_SRCS += devKL2502.c
-Bx9000_MBT_SRCS += devKL2512.c
-Bx9000_MBT_SRCS += devKL2622.c
-Bx9000_MBT_SRCS += devKL2872.c
-Bx9000_MBT_SRCS += devKM2004.c
-Bx9000_MBT_SRCS += devKL3064.c
-Bx9000_MBT_SRCS += devKL3102.c
-Bx9000_MBT_SRCS += devKL3022.c
-Bx9000_MBT_SRCS += devKL3012.c
-Bx9000_MBT_SRCS += devKL3162.c
-Bx9000_MBT_SRCS += devKL3202.c
-Bx9000_MBT_SRCS += devKL3204.c
-Bx9000_MBT_SRCS += devKL3222.c
-Bx9000_MBT_SRCS += devKL3312.c
-Bx9000_MBT_SRCS += devKL3314.c
-Bx9000_MBT_SRCS += devKL3408.c
-Bx9000_MBT_SRCS += devKL3468.c
-Bx9000_MBT_SRCS += devKL4002.c
-Bx9000_MBT_SRCS += devKL4004.c
-Bx9000_MBT_SRCS += devKL4132.c
-Bx9000_MBT_SRCS += drvBx9000_MBTRegister.cpp
-
-#Adding support for LCLS Analog Support 
-DBD +=  analogSub.dbd
-Bx9000_MBT_SRCS += analogIn.c
-
-# The following builds sncExample as a component of Bx9000_MBT
-# Also in Bx9000_MBTInclude.dbd uncomment #registrar(sncExampleRegistrar)
-#Bx9000_MBT_SRCS += sncExample.stt
-#Bx9000_MBT_LIBS += seq pv
-
-# The PROD_IOC_vxWorks is built from the same srcs and must include
-# the registry routines.
-Bx9000_MBTLib_SRCS += $(Bx9000_MBT_SRCS)
-Bx9000_MBTLib_SRCS += Bx9000_MBT_registerRecordDeviceDriver.cpp
-
-#===========================
-
-include $(TOP)/configure/RULES
-#----------------------------------------
-#  ADD RULES AFTER THIS LINE
-
diff --git a/Bx9000_MBTApp/src/analogIn.c b/Bx9000_MBTApp/src/analogIn.c
deleted file mode 100644
index 4914593..0000000
--- a/Bx9000_MBTApp/src/analogIn.c
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- * file:                analogIn.c
- * purpose:             subroutine to perform calculation for analog input signal. calculation
- *                      depends on type of signal. 
- *
- * created:             02-Sep-2009
- *
- * revision history:
- *   02-Sep-2009        Sonya Hoobler             initial version
- *
- * remarks:             Possible signal types are:
- *                        1  linear scaling
- *                        2  log scaling
- *                        3  phase mixer
- *
- *                      If type=1, perform linear scaling, write result to val
- *                      If type=2, perform log scaling, write result to val
- *                      If type 3, perform phase mixer conversion, write result to val
-*                                                                             
- *                       Inputs:                                                                      
- *                       a = type                                                             
- *                       b = raw signal          
- *                       c = offs for linear, coef for log                                            
- *                       d = coef for linear, coef of exponent for log                                
- *                       e = val of associated device (phase mixer only)
- *                       f = sign (1 or -1) (phase mixer only)
- */
-
-#include <stdio.h>
-#include <math.h>
-
-#include <registryFunction.h>
-#include <epicsExport.h>
-#include <subRecord.h>
-
-
-/* Add MACRO Definitions for min/max */
-/* Needed as of EPICS BASE R3-14-11 */
-/* provide an macro that implements max() and min() */
-
-#ifndef __cplusplus
-#ifndef max
-#define max(a,b) (((a)>(b)) ? (a) : (b))
-#endif
-
-#ifndef min
-#define min(a,b) (((a)<(b)) ? (a) : (b))
-#endif
-#endif
-
-
-static long
-InitAnalogCalc( subRecord *psub)
-        {
-
-        return 0;
-        }
-
-static long
-AnalogCalc( subRecord *psub)
-        {
-        int type;
-        float t;
-        float b;
-        float c;
-        float d;
-        float e;
-        float f;
-
-        if( psub == NULL)
-           return 0;
-
-        type = psub->a;
-        b = psub->b;
-        c = psub->c;
-        d = psub->d;
-        e = psub->e;
-        f = psub->f;
-
-        if(type == 1) /* linear scaling */
-           psub->val = c + d*b;
-
-        if(type == 2) /* log scaling */
-           psub->val = c * (pow(10,d*b));
-
-        if(type == 3) /* phase mixer */ 
-           {
-           t = min(max(d*0.01745329*b,-1.2),1.2); 
-           psub->val = c + 57.29577*(t + 0.1667*pow(t,5)) + f*e;
-           }
-          return 0;
-        }
-epicsRegisterFunction(InitAnalogCalc);
-epicsRegisterFunction(AnalogCalc);
diff --git a/Bx9000_MBTApp/src/analogSub.dbd b/Bx9000_MBTApp/src/analogSub.dbd
deleted file mode 100644
index 09f1779..0000000
--- a/Bx9000_MBTApp/src/analogSub.dbd
+++ /dev/null
@@ -1,2 +0,0 @@
-function(InitAnalogCalc)
-function(AnalogCalc)
diff --git a/Bx9000_MBTApp/src/devBx9000Info.c b/Bx9000_MBTApp/src/devBx9000Info.c
deleted file mode 100644
index f15ba7f..0000000
--- a/Bx9000_MBTApp/src/devBx9000Info.c
+++ /dev/null
@@ -1,393 +0,0 @@
-/***************************************************************************
- *   File:		devBx9000Info.c
- *   Author:		Sheng Peng
- *   Institution:	Oak Ridge National Laboratory / SNS Project
- *   Date:		12/2004
- *   Version:		1.1
- *
- *   EPICS device layer support for Beckhoff Bx9000 Coupler static info
- *
- *   Hardware addressing:	
- *   @cplrname:slot:func
- *   For most of records, slot will be 0, so far only for function "BTTYPE",
- *   we need slot not 0.
- ****************************************************************************/
-
-/*	Include header files	*/
-#include <Bx9000_MBT_Common.h>
-#include <longinRecord.h>
-#include <mbbiRecord.h>
-#include <stringinRecord.h>
-
-/* The infomation we try to get here either static after initialization or atomic */
-/* So we don't need semaphore protection */
-/* Some info matters coupler ready, some info doesn't */
-extern  SINT32  Bx9000_DEV_DEBUG;
-
-/*	define function IDs, some of functions need slot	*/
-typedef enum {
-	Bx9000Info_LI_COWCNT,
-	Bx9000Info_LI_CIWCNT,
-	Bx9000Info_LI_DOBCNT,
-	Bx9000Info_LI_DIBCNT,
-	Bx9000Info_LI_BTTYPE,	/* slot could be vary */
-	Bx9000Info_LI_NOFCONN,
-	Bx9000Info_LI_NOFEXCP,
-	Bx9000Info_LI_NOFPKTS,
-	Bx9000Info_LI_NOFSIGS,
-	Bx9000Info_LI_OPTHRDID,
-	Bx9000Info_MBBI_CPLRRDY,
-	Bx9000Info_MBBI_LINKSTAT,
-	Bx9000Info_SI_CPLRNAME,
-	Bx9000Info_SI_CPLRIP,
-	Bx9000Info_SI_TLSTCONN,
-	Bx9000Info_SI_TSETCONN,
-	Bx9000Info_SI_TLASTTRY,
-	Bx9000Info_SI_CPLRID,
-	Bx9000Info_SI_OPTHRDNM
-}	E_Bx9000Info_FUNC;
-
-typedef struct	Bx9000_INFO_REQ
-{
-	Bx9000_COUPLER		* pcoupler;
-	UINT16			slot;
-	E_Bx9000Info_FUNC	funcid;
-}	Bx9000_INFO_REQ;
-
-/* This function will be called by all Bx9000Info device support */
-static int Bx9000_Info_Req_Init(dbCommon * precord, E_EPICS_RTYPE epics_rtype, char * ioString)
-{
-	SINT32				count;
-	char				cplrname[MAX_CA_STRING_SIZE];
-	char				func[MAX_CA_STRING_SIZE];
-	SINT32				slotnum;
-	Bx9000_COUPLER	*	pcoupler;
-	E_Bx9000Info_FUNC	functionID;
-	Bx9000_INFO_REQ	*	pinforeq;
-
-	if(precord == NULL)
-	{
-		errlogPrintf("No legal record pointer in Bx9000_Info_Req_Init!\n");
-		return -1;
-	}
-
-	if(ioString == NULL)
-	{
-		errlogPrintf("No INP/OUT field for record %s!\n", precord->name);
-		return -1;
-	}
-
-	count = sscanf(ioString, "%[^:]:%i:%[^:]", cplrname, &slotnum, func);
-	if (count != 3)
-	{
-		errlogPrintf("Record %s INP/OUT string %s format is illegal!\n", precord->name, ioString);
-		return -1;
-	}
-
-	pcoupler = Bx9000_Get_Coupler_By_Name(cplrname);
-	if(pcoupler == NULL)
-	{
-		errlogPrintf("Can't find coupler %s for record %s!\n", cplrname, precord->name);
-		return -1;
-	}
-
-	/* For most of records, the slot number doesn't matter and should be 0, but we don't enforce */
-	if( slotnum < 0 || slotnum > MAX_NUM_OF_BUSTERM )
-	{
-		errlogPrintf("Terminal must be on slot 1~%d for record %s!\n", MAX_NUM_OF_BUSTERM, precord->name);
-		return -1;
-	}
-
-	switch(epics_rtype)
-	{
-	case EPICS_RTYPE_LI:
-		if( 0 == strcmp(func, "COWCNT") )	functionID = Bx9000Info_LI_COWCNT;
-		else if( 0 == strcmp(func, "CIWCNT") )	functionID = Bx9000Info_LI_CIWCNT;
-		else if( 0 == strcmp(func, "DOBCNT") )	functionID = Bx9000Info_LI_DOBCNT;
-		else if( 0 == strcmp(func, "DIBCNT") )	functionID = Bx9000Info_LI_DIBCNT;
-		else if( 0 == strcmp(func, "BTTYPE") )	functionID = Bx9000Info_LI_BTTYPE;
-		else if( 0 == strcmp(func, "NOFCONN") )	functionID = Bx9000Info_LI_NOFCONN;
-		else if( 0 == strcmp(func, "NOFEXCP") )	functionID = Bx9000Info_LI_NOFEXCP;
-		else if( 0 == strcmp(func, "NOFPKTS") )	functionID = Bx9000Info_LI_NOFPKTS;
-		else if( 0 == strcmp(func, "NOFSIGS") )	functionID = Bx9000Info_LI_NOFSIGS;
-		else if( 0 == strcmp(func, "OPTHRDID") )functionID = Bx9000Info_LI_OPTHRDID;
-		else
-		{
-			errlogPrintf("Unsupported function for Bx9000Info of record %s!\n", precord->name);
-			return -1;
-		}
-		break;
-	case EPICS_RTYPE_MBBI:
-		if ( 0 == strcmp(func, "CPLRRDY") )
-			functionID = Bx9000Info_MBBI_CPLRRDY;
-		else if( 0 == strcmp(func, "LINKSTAT") )
-			functionID = Bx9000Info_MBBI_LINKSTAT;
-		else
-		{
-			errlogPrintf("Unsupported function for Bx9000Info of record %s!\n", precord->name);
-			return -1;
-		}
-		break;
-	case EPICS_RTYPE_SI:
-		if( 0 == strcmp(func, "CPLRNAME") )	functionID = Bx9000Info_SI_CPLRNAME;
-		else if( 0 == strcmp(func, "CPLRIP") )	functionID = Bx9000Info_SI_CPLRIP;
-		else if( 0 == strcmp(func, "TLSTCONN") )functionID = Bx9000Info_SI_TLSTCONN;
-		else if( 0 == strcmp(func, "TSETCONN") )functionID = Bx9000Info_SI_TSETCONN;
-		else if( 0 == strcmp(func, "TLASTTRY") )functionID = Bx9000Info_SI_TLASTTRY;
-		else if( 0 == strcmp(func, "CPLRID") )	functionID = Bx9000Info_SI_CPLRID;
-		else if( 0 == strcmp(func, "OPTHRDNM") )functionID = Bx9000Info_SI_OPTHRDNM;
-		else
-		{
-			errlogPrintf("Unsupported function for Bx9000Info of record %s!\n", precord->name);
-			return -1;
-		}
-		break;
-	default:
-		errlogPrintf("Unsupported record type for Bx9000Info of record %s!\n", precord->name);
-		return -1;
-	}
-
-	pinforeq = (Bx9000_INFO_REQ *)malloc(sizeof(Bx9000_INFO_REQ));
-	if(pinforeq == NULL)
-	{
-		errlogPrintf("Fail to malloc memory for record %s!\n", precord->name);
-		return -1;
-	}
-
-	memset( (char *)pinforeq, 0, sizeof(Bx9000_INFO_REQ) );
-
-	pinforeq->pcoupler = pcoupler;
-	pinforeq->slot = slotnum;
-	pinforeq->funcid = functionID;
-
-	precord->dpvt = (void *)pinforeq;
-	return 0;
-}
-
-/* function prototypes */
-static long init_li_Bx9000Info(struct longinRecord *pli);
-static long read_li_Bx9000Info(struct longinRecord *pli);
-
-static long init_mbbi_Bx9000Info(struct mbbiRecord *pmbbi);
-static long read_mbbi_Bx9000Info(struct mbbiRecord *pmbbi);
-
-static long init_si_Bx9000Info(struct stringinRecord *psi);
-static long read_si_Bx9000Info(struct stringinRecord *psi);
-
-/* global struct for devSup */
-typedef struct
-{
-	long		number;
-	DEVSUPFUN	report;
-	DEVSUPFUN	init;
-	DEVSUPFUN	init_record;
-	DEVSUPFUN	get_ioint_info;
-	DEVSUPFUN	read_write;
-	DEVSUPFUN	special_linconv;
-}	Bx9000Info_DEV_SUP_SET;
-
-Bx9000Info_DEV_SUP_SET devLiBx9000Info= {6, NULL, NULL, init_li_Bx9000Info, NULL, read_li_Bx9000Info, NULL};
-Bx9000Info_DEV_SUP_SET devMbbiBx9000Info= {6, NULL, NULL, init_mbbi_Bx9000Info, NULL, read_mbbi_Bx9000Info, NULL};
-Bx9000Info_DEV_SUP_SET devSiBx9000Info= {6, NULL, NULL, init_si_Bx9000Info, NULL, read_si_Bx9000Info, NULL};
-
-epicsExportAddress(dset, devLiBx9000Info);
-epicsExportAddress(dset, devMbbiBx9000Info);
-epicsExportAddress(dset, devSiBx9000Info);
-
-static long init_li_Bx9000Info(struct longinRecord * pli)
-{
-	if (pli->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pli,
-				"devLiBx9000Info Init_record, Illegal INP");
-		pli->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Info_Req_Init((dbCommon *) pli, EPICS_RTYPE_LI, pli->inp.value.instio.string) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)
-			errlogPrintf("Fail to init info_req for record %s!!", pli->name);
-		recGblRecordError(S_db_badField, (void *) pli, "Init info_req Error");
-		pli->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_li_Bx9000Info(struct longinRecord * pli)
-{
-	Bx9000_INFO_REQ	*	pinforeq = (Bx9000_INFO_REQ *) (pli->dpvt);
-	UINT32				temp;
-
-	switch((int)(pinforeq->funcid))
-	{
-	case Bx9000Info_LI_COWCNT:
-		pli->val = (pinforeq->pcoupler->complex_out_bits)/16;
-		if( !(pinforeq->pcoupler->couplerReady) )
-			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
-		break;
-	case Bx9000Info_LI_CIWCNT:
-		pli->val = (pinforeq->pcoupler->complex_in_bits)/16;
-		if( !(pinforeq->pcoupler->couplerReady) )
-			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
-		break;
-	case Bx9000Info_LI_DOBCNT:
-		pli->val = pinforeq->pcoupler->digital_out_bits;
-		if( !(pinforeq->pcoupler->couplerReady) )
-			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
-		break;
-	case Bx9000Info_LI_DIBCNT:
-		pli->val = pinforeq->pcoupler->digital_in_bits;
-		if( !(pinforeq->pcoupler->couplerReady) )
-			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
-		break;
-	case Bx9000Info_LI_BTTYPE:   /* slot could be vary */
-		if( pinforeq->pcoupler->installedBusTerm[pinforeq->slot].pbusterm_img_def )
-		{
-			pli->val = pinforeq->pcoupler->installedBusTerm[pinforeq->slot].pbusterm_img_def->busterm_type;
-			if( !(pinforeq->pcoupler->couplerReady) )
-				recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
-		}
-		else
-		{
-			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
-		}
-		break;
-	case Bx9000Info_LI_NOFCONN:
-		MBT_GetNthOfConn(pinforeq->pcoupler->mbt_link, &temp);
-		pli->val = temp;
-		if( !(pinforeq->pcoupler->couplerReady) )
-			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
-		break;
-	case Bx9000Info_LI_NOFEXCP:
-		MBT_GetRemoteErrCnt(pinforeq->pcoupler->mbt_link, &temp);
-		pli->val = temp;
-		if( !(pinforeq->pcoupler->couplerReady) )
-			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
-		break;
-	case Bx9000Info_LI_NOFPKTS:
-		MBT_GetNofPackets(pinforeq->pcoupler->mbt_link, &temp);
-					pli->val = temp;
-		if( !(pinforeq->pcoupler->couplerReady) )
-			recGblSetSevr(pli, READ_ALARM, INVALID_ALARM);
-		break;
-	case Bx9000Info_LI_NOFSIGS:
-		pli->val = ellCount( (ELLLIST *)&(pinforeq->pcoupler->sigptr_list) );
-		break;
-	case Bx9000Info_LI_OPTHRDID:
-		pli->val = (int)(pinforeq->pcoupler->opthread_id);
-		break;
-	}
-	pli->udf=FALSE;
-	return 0;
-}
-
-/******* mbbi record *************/
-static long init_mbbi_Bx9000Info(struct mbbiRecord *pmbbi)
-{
-	if (pmbbi->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pmbbi,
-				"devMbbiBx9000Info Init_record, Illegal INP");
-		pmbbi->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Info_Req_Init((dbCommon *) pmbbi, EPICS_RTYPE_MBBI, pmbbi->inp.value.instio.string) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)
-			errlogPrintf("Fail to init info_req for record %s!!", pmbbi->name);
-		recGblRecordError(S_db_badField, (void *) pmbbi, "Init info_req Error");
-		pmbbi->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	pmbbi->shft = 0;
-	return 0;
-}
-
-static long read_mbbi_Bx9000Info(struct mbbiRecord *pmbbi)
-{
-	Bx9000_INFO_REQ         * pinforeq = (Bx9000_INFO_REQ *) (pmbbi->dpvt);
-	SINT32                  temp;
-
-	switch((int)(pinforeq->funcid))
-	{
-	case Bx9000Info_MBBI_CPLRRDY:
-		pmbbi->rval = pinforeq->pcoupler->couplerReady;
-		break;
-	case Bx9000Info_MBBI_LINKSTAT:
-		MBT_GetLinkStat(pinforeq->pcoupler->mbt_link, &temp);
-		pmbbi->rval = temp;
-		break;
-	}
-
-	pmbbi->udf=FALSE;
-	return  CONVERT;
-}
-
-/******* stringin  record *************/
-static long init_si_Bx9000Info(struct stringinRecord *psi)
-{
-	if (psi->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)psi,
-				"devSiBx9000Info Init_record, Illegal INP");
-		psi->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Info_Req_Init((dbCommon *) psi, EPICS_RTYPE_SI, psi->inp.value.instio.string) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)
-			errlogPrintf("Fail to init info_req for record %s!!", psi->name);
-		recGblRecordError(S_db_badField, (void *) psi, "Init info_req Error");
-		psi->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_si_Bx9000Info(struct stringinRecord *psi)
-{
-	Bx9000_INFO_REQ	*	pinforeq = (Bx9000_INFO_REQ *) (psi->dpvt);
-	struct sockaddr_in	addr;
-	switch ((int)(pinforeq->funcid))
-	{
-	case Bx9000Info_SI_CPLRNAME:
-		strncpy(psi->val, MBT_GetName(pinforeq->pcoupler->mbt_link), MAX_CA_STRING_SIZE-1);
-		psi->val[MAX_CA_STRING_SIZE-1] = '\0';
-		break;
-	case Bx9000Info_SI_CPLRIP:
-		MBT_GetAddr(pinforeq->pcoupler->mbt_link, &addr);
-		strncpy(psi->val, inet_ntoa(addr.sin_addr), MAX_CA_STRING_SIZE-1);
-		psi->val[MAX_CA_STRING_SIZE-1] = '\0';
-		break;
-	case Bx9000Info_SI_TLSTCONN:
-		epicsTimeToStrftime(psi->val, MAX_CA_STRING_SIZE-1, "%Y/%m/%d %H:%M:%S.%06f",
-							&(pinforeq->pcoupler->time_lost_conn));
-		break;
-	case Bx9000Info_SI_TSETCONN:
-		epicsTimeToStrftime(psi->val, MAX_CA_STRING_SIZE-1, "%Y/%m/%d %H:%M:%S.%06f",
-							&(pinforeq->pcoupler->time_set_conn));
-		break;
-	case Bx9000Info_SI_TLASTTRY:
-		epicsTimeToStrftime(psi->val, MAX_CA_STRING_SIZE-1, "%Y/%m/%d %H:%M:%S.%06f",
-							&(pinforeq->pcoupler->time_last_try));
-		break;
-	case Bx9000Info_SI_CPLRID:
-		strcpy(psi->val, pinforeq->pcoupler->couplerID);
-		if( !(pinforeq->pcoupler->couplerReady) )
-			recGblSetSevr(psi, READ_ALARM, INVALID_ALARM);
-		break;
-	case Bx9000Info_SI_OPTHRDNM:
-		strcpy(psi->val, pinforeq->pcoupler->opthread_name);
-		break;
-	}
-	
-	psi->udf=FALSE;
-	return 0;
-}
diff --git a/Bx9000_MBTApp/src/devKL1104.c b/Bx9000_MBTApp/src/devKL1104.c
deleted file mode 100644
index b02047f..0000000
--- a/Bx9000_MBTApp/src/devKL1104.c
+++ /dev/null
@@ -1,80 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <biRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bi_KL1104(struct biRecord * pbi)
-{
-	if (pbi->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbi,
-			"devBiKL1104 Init_record, Illegal INP");
-		pbi->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KL1104, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
-		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
-		pbi->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_bi_KL1104(struct biRecord * pbi)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbi->dpvt);
-
-	if (!pbi->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
-			return -1;
-		}
-		else
-		{
-			pbi->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pbi->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we don't */
-			pbi->rval = (psignal->pdevdata->value)?1:0;
-		}
-	}
-	return (CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bi;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_bi;
-}	devBiKL1104 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bi_KL1104,
-	NULL,
-	read_bi_KL1104,
-};
-epicsExportAddress(dset, devBiKL1104);
-
diff --git a/Bx9000_MBTApp/src/devKL1124.c b/Bx9000_MBTApp/src/devKL1124.c
deleted file mode 100644
index be0aacc..0000000
--- a/Bx9000_MBTApp/src/devKL1124.c
+++ /dev/null
@@ -1,80 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <biRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bi_KL1124(struct biRecord * pbi)
-{
-	if (pbi->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbi,
-			"devBiKL1124 Init_record, Illegal INP");
-		pbi->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KL1124, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
-		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
-		pbi->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_bi_KL1124(struct biRecord * pbi)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbi->dpvt);
-
-	if (!pbi->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
-			return -1;
-		}
-		else
-		{
-			pbi->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pbi->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we don't */
-			pbi->rval = (psignal->pdevdata->value)?1:0;
-		}
-	}
-	return (CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bi;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_bi;
-}	devBiKL1124 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bi_KL1124,
-	NULL,
-	read_bi_KL1124,
-};
-epicsExportAddress(dset, devBiKL1124);
-
diff --git a/Bx9000_MBTApp/src/devKL1408.c b/Bx9000_MBTApp/src/devKL1408.c
deleted file mode 100644
index 5fa82cc..0000000
--- a/Bx9000_MBTApp/src/devKL1408.c
+++ /dev/null
@@ -1,80 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <biRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bi_KL1408(struct biRecord * pbi)
-{
-	if (pbi->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbi,
-			"devBiKL1408 Init_record, Illegal INP");
-		pbi->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KL1408, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
-		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
-		pbi->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_bi_KL1408(struct biRecord * pbi)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbi->dpvt);
-
-	if (!pbi->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
-			return -1;
-		}
-		else
-		{
-			pbi->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pbi->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we don't */
-			pbi->rval = (psignal->pdevdata->value)?1:0;
-		}
-	}
-	return (CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bi;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_bi;
-}	devBiKL1408 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bi_KL1408,
-	NULL,
-	read_bi_KL1408,
-};
-epicsExportAddress(dset, devBiKL1408);
-
diff --git a/Bx9000_MBTApp/src/devKL1488.c b/Bx9000_MBTApp/src/devKL1488.c
deleted file mode 100644
index cc32f41..0000000
--- a/Bx9000_MBTApp/src/devKL1488.c
+++ /dev/null
@@ -1,80 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <biRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bi_KL1488(struct biRecord * pbi)
-{
-	if (pbi->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbi,
-			"devBiKL1488 Init_record, Illegal INP");
-		pbi->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KL1488, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
-		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
-		pbi->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_bi_KL1488(struct biRecord * pbi)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbi->dpvt);
-
-	if (!pbi->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
-			return -1;
-		}
-		else
-		{
-			pbi->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pbi->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we don't */
-			pbi->rval = (psignal->pdevdata->value)?1:0;
-		}
-	}
-	return (CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bi;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_bi;
-}	devBiKL1488 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bi_KL1488,
-	NULL,
-	read_bi_KL1488,
-};
-epicsExportAddress(dset, devBiKL1488);
-
diff --git a/Bx9000_MBTApp/src/devKL2012.c b/Bx9000_MBTApp/src/devKL2012.c
deleted file mode 100644
index 352175f..0000000
--- a/Bx9000_MBTApp/src/devKL2012.c
+++ /dev/null
@@ -1,98 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <boRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bo_KL2012(struct boRecord * pbo)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pbo->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbo,
-			"devBoKL2012 Init_record, Illegal OUT");
-		pbo->pact=TRUE;
-		return (S_db_badField);
-	}
-
-        pbo->mask = 0x0;
-
-	if(Bx9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2012, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
-		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
-		pbo->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pbo->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		pbo->rval = (psignal->pdevdata->value)?1:0;
-		pbo->udf = FALSE;
-		pbo->stat = pbo->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_bo_KL2012(struct boRecord * pbo)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-
-	if (!pbo->pact)
-	{
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't exist */
-		psignal->pdevdata->value = (pbo->rval)?1:0;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
-			return -1;
-		}
-		else
-		{
-			pbo->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bo;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_bo;
-}	devBoKL2012 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bo_KL2012,
-	NULL,
-	write_bo_KL2012,
-};
-epicsExportAddress(dset, devBoKL2012);
-
diff --git a/Bx9000_MBTApp/src/devKL2114.c b/Bx9000_MBTApp/src/devKL2114.c
deleted file mode 100644
index 43231ef..0000000
--- a/Bx9000_MBTApp/src/devKL2114.c
+++ /dev/null
@@ -1,98 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <boRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bo_KL2114(struct boRecord * pbo)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pbo->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbo,
-			"devBoKL2114 Init_record, Illegal OUT");
-		pbo->pact=TRUE;
-		return (S_db_badField);
-	}
-
-        pbo->mask = 0x0;
-
-	if(Bx9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2114, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
-		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
-		pbo->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pbo->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		pbo->rval = (psignal->pdevdata->value)?1:0;
-		pbo->udf = FALSE;
-		pbo->stat = pbo->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_bo_KL2114(struct boRecord * pbo)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-
-	if (!pbo->pact)
-	{
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't exist */
-		psignal->pdevdata->value = (pbo->rval)?1:0;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
-			return -1;
-		}
-		else
-		{
-			pbo->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bo;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_bo;
-}	devBoKL2114 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bo_KL2114,
-	NULL,
-	write_bo_KL2114,
-};
-epicsExportAddress(dset, devBoKL2114);
-
diff --git a/Bx9000_MBTApp/src/devKL2124.c b/Bx9000_MBTApp/src/devKL2124.c
deleted file mode 100644
index 1bd7e95..0000000
--- a/Bx9000_MBTApp/src/devKL2124.c
+++ /dev/null
@@ -1,98 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <boRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bo_KL2124(struct boRecord * pbo)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pbo->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbo,
-			"devBoKL2124 Init_record, Illegal OUT");
-		pbo->pact=TRUE;
-		return (S_db_badField);
-	}
-
-        pbo->mask = 0x0;
-
-	if(Bx9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2124, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
-		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
-		pbo->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pbo->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		pbo->rval = (psignal->pdevdata->value)?1:0;
-		pbo->udf = FALSE;
-		pbo->stat = pbo->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_bo_KL2124(struct boRecord * pbo)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-
-	if (!pbo->pact)
-	{
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't exist */
-		psignal->pdevdata->value = (pbo->rval)?1:0;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
-			return -1;
-		}
-		else
-		{
-			pbo->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bo;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_bo;
-}	devBoKL2124 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bo_KL2124,
-	NULL,
-	write_bo_KL2124,
-};
-epicsExportAddress(dset, devBoKL2124);
-
diff --git a/Bx9000_MBTApp/src/devKL2408.c b/Bx9000_MBTApp/src/devKL2408.c
deleted file mode 100644
index 7130efa..0000000
--- a/Bx9000_MBTApp/src/devKL2408.c
+++ /dev/null
@@ -1,98 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <boRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bo_KL2408(struct boRecord * pbo)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pbo->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbo,
-			"devBoKL2408 Init_record, Illegal OUT");
-		pbo->pact=TRUE;
-		return (S_db_badField);
-	}
-
-        pbo->mask = 0x0;
-
-	if(Bx9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2408, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
-		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
-		pbo->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pbo->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		pbo->rval = (psignal->pdevdata->value)?1:0;
-		pbo->udf = FALSE;
-		pbo->stat = pbo->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_bo_KL2408(struct boRecord * pbo)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-
-	if (!pbo->pact)
-	{
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't exist */
-		psignal->pdevdata->value = (pbo->rval)?1:0;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
-			return -1;
-		}
-		else
-		{
-			pbo->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bo;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_bo;
-}	devBoKL2408 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bo_KL2408,
-	NULL,
-	write_bo_KL2408,
-};
-epicsExportAddress(dset, devBoKL2408);
-
diff --git a/Bx9000_MBTApp/src/devKL2502.c b/Bx9000_MBTApp/src/devKL2502.c
deleted file mode 100644
index eacb16d..0000000
--- a/Bx9000_MBTApp/src/devKL2502.c
+++ /dev/null
@@ -1,149 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aoRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-
-/* The KL2502 duty cycle value is 0x0000 for 0% and 0x7FFF for 100% */
-#define	RAW_DUTY_CYCLE_0	0x0000
-#define	RAW_DUTY_CYCLE_100	0x7FFF
-
-static long lincvt_ao_KL2502(struct aoRecord	*pao, int after)
-{
-	if(!after)
-		return(0);
-
-	/*
-	 * Linear conversion slope calculated from eng units full - eng units low
-	 */
-	pao->eslo = (	(pao->eguf - pao->egul)
-				/	(float)(RAW_DUTY_CYCLE_100 - RAW_DUTY_CYCLE_0) );
-	pao->roff = -	(float) RAW_DUTY_CYCLE_0;
-	return(0);
-}
-
-
-static long init_ao_KL2502(struct aoRecord * pao)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pao->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pao,
-			"devAoKL2502 Init_record, Illegal OUT");
-		pao->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	/*
-	 * Update Linear conversion slope
-	 */
-	lincvt_ao_KL2502( pao, 1 );
-
-	/*
-	 * Initialize Signal
-	 */
-	if ( Bx9000_Signal_Init(	(dbCommon *) pao, EPICS_RTYPE_AO,
-								pao->out.value.instio.string,
-								BT_TYPE_KL2502, Bx9000_Dft_ProcFunc, NULL ) != 0 )
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pao->name);
-		recGblRecordError(S_db_badField, (void *) pao, "Init signal Error");
-		pao->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pao->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pao,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		/*	Feature register	*/
-		/*	psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value	*/
-		/*	Bit 0:	User scaling active								*/
-		/*	Bit 1:	Manufacturer scaling active						*/
-		/*	Bit 2:	Watchdog timer active							*/
-		/*	Bits 13-15:	Mode										*/
-		/*		000:	PWMH mode			250Hz to 20kHz			*/
-		/*		001:	PWMH mode			2Hz   to 250Hz			*/
-		/*		011:	Frq-Cnt PWM mode	2Hz   to 2kHz			*/
-		/*		101:	Frq-Cnt pulse mode	2Hz   to 2kHz			*/
-		/*		111:	Cnt-Cnt PWM mode	250Hz to 8kHz			*/
-
-		pao->rval	= (SINT16)(psignal->pdevdata->value);
-		pao->udf	= FALSE;
-		pao->stat	= pao->sevr	= NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_ao_KL2502(struct aoRecord * pao)
-{
-	UINT16				rawDutyCycle;
-	Bx9000_SIGNAL	*	psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-
-	if (!pao->pact)
-	{
-		/*	Limit range of raw value */
-		if( pao->rval < RAW_DUTY_CYCLE_0 )
-			rawDutyCycle = RAW_DUTY_CYCLE_0;
-		else if( pao->rval > RAW_DUTY_CYCLE_100 )
-			rawDutyCycle = RAW_DUTY_CYCLE_100;
-		else
-			rawDutyCycle = (UINT16)(pao->rval);
-
-		psignal->pdevdata->value = rawDutyCycle;
-		if ( epicsMessageQueueTrySend(	psignal->pdevdata->pcoupler->msgQ_id,
-										(void *)&psignal,
-										sizeof(Bx9000_SIGNAL *) ) == -1 )
-		{
-			recGblSetSevr( pao, WRITE_ALARM, INVALID_ALARM );
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pao->name);
-			return -1;
-		}
-		else
-		{
-			pao->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pao->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ao;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_ao;
-	DEVSUPFUN       special_linconv;
-}	devAoKL2502 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ao_KL2502,
-	NULL,
-	write_ao_KL2502,
-	lincvt_ao_KL2502
-};
-epicsExportAddress(dset, devAoKL2502);
-
diff --git a/Bx9000_MBTApp/src/devKL2512.c b/Bx9000_MBTApp/src/devKL2512.c
deleted file mode 100644
index 3e7ef82..0000000
--- a/Bx9000_MBTApp/src/devKL2512.c
+++ /dev/null
@@ -1,149 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aoRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-
-/* KL2512 raw duty cycle values */
-#define	RAW_DUTY_CYCLE_0	0x7FFF
-#define	RAW_DUTY_CYCLE_100	0x0000
-
-static long lincvt_ao_KL2512(struct aoRecord	*pao, int after)
-{
-	if(!after)
-		return(0);
-
-	/*
-	 * Linear conversion slope calculated from eng units full - eng units low
-	 */
-	pao->eslo = (	(pao->eguf - pao->egul)
-				/	(float)(RAW_DUTY_CYCLE_100 - RAW_DUTY_CYCLE_0) );
-	pao->roff = -	(float) RAW_DUTY_CYCLE_0;
-	return(0);
-}
-
-
-static long init_ao_KL2512(struct aoRecord * pao)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pao->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pao,
-			"devAoKL2512 Init_record, Illegal OUT");
-		pao->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	/*
-	 * Update Linear conversion slope
-	 */
-	lincvt_ao_KL2512( pao, 1 );
-
-	/*
-	 * Initialize Signal
-	 */
-	if ( Bx9000_Signal_Init(	(dbCommon *) pao, EPICS_RTYPE_AO,
-								pao->out.value.instio.string,
-								BT_TYPE_KL2512, Bx9000_Dft_ProcFunc, NULL ) != 0 )
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pao->name);
-		recGblRecordError(S_db_badField, (void *) pao, "Init signal Error");
-		pao->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pao->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pao,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		/*	Feature register	*/
-		/*	psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value	*/
-		/*	Bit 0:	User scaling active								*/
-		/*	Bit 1:	Manufacturer scaling active						*/
-		/*	Bit 2:	Watchdog timer active							*/
-		/*	Bits 13-15:	Mode										*/
-		/*		000:	PWMH mode			250Hz to 20kHz			*/
-		/*		001:	PWMH mode			2Hz   to 250Hz			*/
-		/*		011:	Frq-Cnt PWM mode	2Hz   to 2kHz			*/
-		/*		101:	Frq-Cnt pulse mode	2Hz   to 2kHz			*/
-		/*		111:	Cnt-Cnt PWM mode	250Hz to 8kHz			*/
-
-		pao->rval	= (SINT16)(psignal->pdevdata->value);
-		pao->udf	= FALSE;
-		pao->stat	= pao->sevr	= NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_ao_KL2512(struct aoRecord * pao)
-{
-	UINT16				rawDutyCycle;
-	Bx9000_SIGNAL	*	psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-
-	if (!pao->pact)
-	{
-		/*	Limit range of raw value */
-		if( pao->rval > RAW_DUTY_CYCLE_0 )
-			rawDutyCycle = RAW_DUTY_CYCLE_0;
-		else if( pao->rval < RAW_DUTY_CYCLE_100 )
-			rawDutyCycle = RAW_DUTY_CYCLE_100;
-		else
-			rawDutyCycle = (UINT16)(pao->rval);
-
-		psignal->pdevdata->value = rawDutyCycle;
-		if ( epicsMessageQueueTrySend(	psignal->pdevdata->pcoupler->msgQ_id,
-										(void *)&psignal,
-										sizeof(Bx9000_SIGNAL *) ) == -1 )
-		{
-			recGblSetSevr( pao, WRITE_ALARM, INVALID_ALARM );
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pao->name);
-			return -1;
-		}
-		else
-		{
-			pao->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pao->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ao;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_ao;
-	DEVSUPFUN       special_linconv;
-}	devAoKL2512 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ao_KL2512,
-	NULL,
-	write_ao_KL2512,
-	lincvt_ao_KL2512
-};
-epicsExportAddress(dset, devAoKL2512);
-
diff --git a/Bx9000_MBTApp/src/devKL2622.c b/Bx9000_MBTApp/src/devKL2622.c
deleted file mode 100644
index 28d7a67..0000000
--- a/Bx9000_MBTApp/src/devKL2622.c
+++ /dev/null
@@ -1,98 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <boRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bo_KL2622(struct boRecord * pbo)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pbo->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbo,
-			"devBoKL2622 Init_record, Illegal OUT");
-		pbo->pact=TRUE;
-		return (S_db_badField);
-	}
-
-        pbo->mask = 0x0;
-
-	if(Bx9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2622, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
-		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
-		pbo->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pbo->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		pbo->rval = (psignal->pdevdata->value)?1:0;
-		pbo->udf = FALSE;
-		pbo->stat = pbo->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_bo_KL2622(struct boRecord * pbo)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-
-	if (!pbo->pact)
-	{
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't exist */
-		psignal->pdevdata->value = (pbo->rval)?1:0;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
-			return -1;
-		}
-		else
-		{
-			pbo->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bo;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_bo;
-}	devBoKL2622 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bo_KL2622,
-	NULL,
-	write_bo_KL2622,
-};
-epicsExportAddress(dset, devBoKL2622);
-
diff --git a/Bx9000_MBTApp/src/devKL2872.c b/Bx9000_MBTApp/src/devKL2872.c
deleted file mode 100644
index 77bd40a..0000000
--- a/Bx9000_MBTApp/src/devKL2872.c
+++ /dev/null
@@ -1,98 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <boRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bo_KL2872(struct boRecord * pbo)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pbo->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbo,
-			"devBoKL2872 Init_record, Illegal OUT");
-		pbo->pact=TRUE;
-		return (S_db_badField);
-	}
-
-        pbo->mask = 0x0;
-
-	if(Bx9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KL2872, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
-		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
-		pbo->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pbo->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		pbo->rval = (psignal->pdevdata->value)?1:0;
-		pbo->udf = FALSE;
-		pbo->stat = pbo->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_bo_KL2872(struct boRecord * pbo)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-
-	if (!pbo->pact)
-	{
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't exist */
-		psignal->pdevdata->value = (pbo->rval)?1:0;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
-			return -1;
-		}
-		else
-		{
-			pbo->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bo;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_bo;
-}	devBoKL2872 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bo_KL2872,
-	NULL,
-	write_bo_KL2872,
-};
-epicsExportAddress(dset, devBoKL2872);
-
diff --git a/Bx9000_MBTApp/src/devKL3012.c b/Bx9000_MBTApp/src/devKL3012.c
deleted file mode 100644
index 341ee8e..0000000
--- a/Bx9000_MBTApp/src/devKL3012.c
+++ /dev/null
@@ -1,103 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3012(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3012 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3012, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
-	pai->roff = 0;
-
-	return 0;
-}
-
-static long read_ai_KL3012(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-		}
-	}
-	return (CONVERT);
-}
-
-static long lincvt_ai_KL3012(struct aiRecord	*pai, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope*/
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
-	pai->roff = 0x8000;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3012 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3012,
-	NULL,
-	read_ai_KL3012,
-	lincvt_ai_KL3012
-};
-epicsExportAddress(dset, devAiKL3012);
-
diff --git a/Bx9000_MBTApp/src/devKL3022.c b/Bx9000_MBTApp/src/devKL3022.c
deleted file mode 100644
index b902cfb..0000000
--- a/Bx9000_MBTApp/src/devKL3022.c
+++ /dev/null
@@ -1,103 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3022(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3022 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3022, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
-	pai->roff = 0;
-
-	return 0;
-}
-
-static long read_ai_KL3022(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-		}
-	}
-	return (CONVERT);
-}
-
-static long lincvt_ai_KL3022(struct aiRecord	*pai, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope*/
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
-	pai->roff = 0x8000;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3022 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3022,
-	NULL,
-	read_ai_KL3022,
-	lincvt_ai_KL3022
-};
-epicsExportAddress(dset, devAiKL3022);
-
diff --git a/Bx9000_MBTApp/src/devKL3064.c b/Bx9000_MBTApp/src/devKL3064.c
deleted file mode 100644
index 9ba39e8..0000000
--- a/Bx9000_MBTApp/src/devKL3064.c
+++ /dev/null
@@ -1,105 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3064(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3064 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3064, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	/* This is a unipolar 12 bits(12b<<3) module */
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x0FFF;
-	pai->roff = 0x0;
-
-	return 0;
-}
-
-static long read_ai_KL3064(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			/* We know this is a unipolar 12 bits(12b<<3) module, so rval must be [0,32767], below check is just over kill */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-		}
-	}
-	return (CONVERT);
-}
-
-static long lincvt_ai_KL3064(struct aiRecord	*pai, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope, this is a unipolar 12 bits(12b<<3) module */
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x0FFF;
-	pai->roff = 0x0;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3064 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3064,
-	NULL,
-	read_ai_KL3064,
-	lincvt_ai_KL3064
-};
-epicsExportAddress(dset, devAiKL3064);
-
diff --git a/Bx9000_MBTApp/src/devKL3102.c b/Bx9000_MBTApp/src/devKL3102.c
deleted file mode 100644
index 18cce94..0000000
--- a/Bx9000_MBTApp/src/devKL3102.c
+++ /dev/null
@@ -1,103 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3102(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3102 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3102, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
-	pai->roff = 0x8000;
-
-	return 0;
-}
-
-static long read_ai_KL3102(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-		}
-	}
-	return (CONVERT);
-}
-
-static long lincvt_ai_KL3102(struct aiRecord	*pai, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope*/
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
-	pai->roff = 0x8000;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3102 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3102,
-	NULL,
-	read_ai_KL3102,
-	lincvt_ai_KL3102
-};
-epicsExportAddress(dset, devAiKL3102);
-
diff --git a/Bx9000_MBTApp/src/devKL3162.c b/Bx9000_MBTApp/src/devKL3162.c
deleted file mode 100644
index 034a4c9..0000000
--- a/Bx9000_MBTApp/src/devKL3162.c
+++ /dev/null
@@ -1,97 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3162(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3162 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3162, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-	/* KL3162 is single-ended 16-bit */
-	pai->eslo = (pai->eguf - pai->egul)/(float)0xFFFF;
-	/*	pai->roff = 0x8000; */
-	pai->roff = 0x0;
-
-	return 0;
-}
-
-static long read_ai_KL3162(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-		        /* KL3162 is only 0 to 10V  */
-			pai->rval = (UINT16)(psignal->pdevdata->value);
-		}
-	}
-	return (CONVERT);
-}
-
-static long lincvt_ai_KL3162(struct aiRecord	*pai, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope; 3162 is single-ended unsigned 16-bit */
-	pai->eslo = (pai->eguf - pai->egul)/(float)0xFFFF;
-	/* pai->roff = 0x8000; */
-	pai->roff = 0x0;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3162 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3162,
-	NULL,
-	read_ai_KL3162,
-	lincvt_ai_KL3162
-};
-epicsExportAddress(dset, devAiKL3162);
-
diff --git a/Bx9000_MBTApp/src/devKL3202.c b/Bx9000_MBTApp/src/devKL3202.c
deleted file mode 100644
index 041a9c5..0000000
--- a/Bx9000_MBTApp/src/devKL3202.c
+++ /dev/null
@@ -1,91 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-/* KL3202 is RTD module, 0.1 degree C per count, so no conversion needed */
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3202(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3202 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3202, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_ai_KL3202(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-			pai->val = 0.1 * pai->rval;
-		}
-	}
-	return (NO_CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3202 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3202,
-	NULL,
-	read_ai_KL3202,
-	NULL
-};
-epicsExportAddress(dset, devAiKL3202);
-
diff --git a/Bx9000_MBTApp/src/devKL3204.c b/Bx9000_MBTApp/src/devKL3204.c
deleted file mode 100644
index 00f04d0..0000000
--- a/Bx9000_MBTApp/src/devKL3204.c
+++ /dev/null
@@ -1,91 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-/* KL3204 is RTD module, 0.1 degree C per count, so no conversion needed */
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3204(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3204 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3204, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_ai_KL3204(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-			pai->val = 0.1 * pai->rval;
-		}
-	}
-	return (NO_CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3204 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3204,
-	NULL,
-	read_ai_KL3204,
-	NULL
-};
-epicsExportAddress(dset, devAiKL3204);
-
diff --git a/Bx9000_MBTApp/src/devKL3222.c b/Bx9000_MBTApp/src/devKL3222.c
deleted file mode 100644
index d2e3540..0000000
--- a/Bx9000_MBTApp/src/devKL3222.c
+++ /dev/null
@@ -1,91 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-/* KL3222 is RTD module, 0.01 degree C per count, so no conversion needed */
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3222(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3222 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3222, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_ai_KL3222(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-			pai->val = 0.01 * pai->rval;
-		}
-	}
-	return (NO_CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3222 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3222,
-	NULL,
-	read_ai_KL3222,
-	NULL
-};
-epicsExportAddress(dset, devAiKL3222);
-
diff --git a/Bx9000_MBTApp/src/devKL3312.c b/Bx9000_MBTApp/src/devKL3312.c
deleted file mode 100644
index a7388cb..0000000
--- a/Bx9000_MBTApp/src/devKL3312.c
+++ /dev/null
@@ -1,91 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-/* KL3312 is thermocouple module, 0.1 degree C per count, so no conversion needed */
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3312(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3312 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3312, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_ai_KL3312(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-			pai->val = 0.1 * pai->rval;
-		}
-	}
-	return (NO_CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3312 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3312,
-	NULL,
-	read_ai_KL3312,
-	NULL
-};
-epicsExportAddress(dset, devAiKL3312);
-
diff --git a/Bx9000_MBTApp/src/devKL3314.c b/Bx9000_MBTApp/src/devKL3314.c
deleted file mode 100644
index fc42f14..0000000
--- a/Bx9000_MBTApp/src/devKL3314.c
+++ /dev/null
@@ -1,91 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-/* KL3314 is thermocouple module, 0.1 degree C per count, so no conversion needed */
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3314(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3314 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3314, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_ai_KL3314(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-			pai->val = 0.1 * pai->rval;
-		}
-	}
-	return (NO_CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3314 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3314,
-	NULL,
-	read_ai_KL3314,
-	NULL
-};
-epicsExportAddress(dset, devAiKL3314);
-
diff --git a/Bx9000_MBTApp/src/devKL3408.c b/Bx9000_MBTApp/src/devKL3408.c
deleted file mode 100644
index ed8cebc..0000000
--- a/Bx9000_MBTApp/src/devKL3408.c
+++ /dev/null
@@ -1,105 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3408(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3408 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3408, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	/* This is a bipolar 12 bits(12b<<3) module */
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
-	pai->roff = 0x8000;
-
-	return 0;
-}
-
-static long read_ai_KL3408(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			/* We know this is a bipolar 12 bits(12b<<3) module, so rval must be [-32768,32767], below check is necessary */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-		}
-	}
-	return (CONVERT);
-}
-
-static long lincvt_ai_KL3408(struct aiRecord	*pai, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope, this is a bipolar 12 bits(12b<<3) module */
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x10000;
-	pai->roff = 0x8000;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3408 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3408,
-	NULL,
-	read_ai_KL3408,
-	lincvt_ai_KL3408
-};
-epicsExportAddress(dset, devAiKL3408);
-
diff --git a/Bx9000_MBTApp/src/devKL3468.c b/Bx9000_MBTApp/src/devKL3468.c
deleted file mode 100644
index 502a062..0000000
--- a/Bx9000_MBTApp/src/devKL3468.c
+++ /dev/null
@@ -1,105 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aiRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ai_KL3468(struct aiRecord * pai)
-{
-	if (pai->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pai,
-			"devAiKL3468 Init_record, Illegal INP");
-		pai->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pai, EPICS_RTYPE_AI, pai->inp.value.instio.string, BT_TYPE_KL3468, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pai->name);
-		recGblRecordError(S_db_badField, (void *) pai, "Init signal Error");
-		pai->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	/* This is a unipolar 12 bits(12b<<3) module */
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
-	pai->roff = 0x0;
-
-	return 0;
-}
-
-static long read_ai_KL3468(struct aiRecord * pai)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pai->dpvt);
-
-	if (!pai->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pai->name);
-			return -1;
-		}
-		else
-		{
-			pai->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pai, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pai->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pai->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we do */
-			/* We know this is a unipolar 12 bits(12b<<3) module, so rval must be [0,32767], below check is just over kill */
-			if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-			{/* signed amount */
-				pai->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-			}
-			else
-			{/* two's complement */
-				pai->rval = (SINT16)(psignal->pdevdata->value);
-			}
-		}
-	}
-	return (CONVERT);
-}
-
-static long lincvt_ai_KL3468(struct aiRecord	*pai, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope, this is a unipolar 12 bits(12b<<3) module */
-	pai->eslo = (pai->eguf - pai->egul)/(float)0x7FFF;
-	pai->roff = 0x0;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ai;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_ai;
-	DEVSUPFUN       special_linconv;
-}	devAiKL3468 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ai_KL3468,
-	NULL,
-	read_ai_KL3468,
-	lincvt_ai_KL3468
-};
-epicsExportAddress(dset, devAiKL3468);
-
diff --git a/Bx9000_MBTApp/src/devKL4002.c b/Bx9000_MBTApp/src/devKL4002.c
deleted file mode 100644
index ffe45bc..0000000
--- a/Bx9000_MBTApp/src/devKL4002.c
+++ /dev/null
@@ -1,127 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aoRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ao_KL4002(struct aoRecord * pao)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pao->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pao,
-			"devAoKL4002 Init_record, Illegal OUT");
-		pao->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	/* This is a unipolar 12 bits(12b<<3) modules */
-        pao->eslo = (pao->eguf - pao->egul)/(float)0x7FFF;
-        pao->roff = 0x0;
-
-	if(Bx9000_Signal_Init((dbCommon *) pao, EPICS_RTYPE_AO, pao->out.value.instio.string, BT_TYPE_KL4002, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pao->name);
-		recGblRecordError(S_db_badField, (void *) pao, "Init signal Error");
-		pao->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pao->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pao,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		/* We do have feature register, but we know this is a unipolar 12 bits(12b<<3) module, so we shouldn't care bit 3 */
-		/* But for safety, we still check it */
-		if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-		{/* signed amount */
-			pao->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-		}
-		else
-		{/* two's complement */
-			pao->rval = (SINT16)(psignal->pdevdata->value);
-		}
-
-		pao->udf = FALSE;
-		pao->stat = pao->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_ao_KL4002(struct aoRecord * pao)
-{
-	SINT16		temp;
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-
-	if (!pao->pact)
-	{
-		if( pao->rval < 0 )	temp = 0;
-		else if( pao-> rval > 32767 ) temp = 32767;
-		else	temp = (SINT16)(pao->rval);
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't affect value */
-		psignal->pdevdata->value = (UINT16)temp;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pao->name);
-			return -1;
-		}
-		else
-		{
-			pao->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pao->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-static long lincvt_ao_KL4002(struct aoRecord	*pao, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope, we know it is a unipolar 12 bits(12b<<3) module */
-	pao->eslo = (pao->eguf - pao->egul)/(float)0x7FFF;
-	pao->roff = 0x0;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ao;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_ao;
-	DEVSUPFUN       special_linconv;
-}	devAoKL4002 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ao_KL4002,
-	NULL,
-	write_ao_KL4002,
-	lincvt_ao_KL4002
-};
-epicsExportAddress(dset, devAoKL4002);
-
diff --git a/Bx9000_MBTApp/src/devKL4004.c b/Bx9000_MBTApp/src/devKL4004.c
deleted file mode 100644
index 278da4a..0000000
--- a/Bx9000_MBTApp/src/devKL4004.c
+++ /dev/null
@@ -1,127 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aoRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ao_KL4004(struct aoRecord * pao)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pao->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pao,
-			"devAoKL4004 Init_record, Illegal OUT");
-		pao->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	/* This is a unipolar 12 bits(12b<<3) modules */
-        pao->eslo = (pao->eguf - pao->egul)/(float)0x0FFF;
-        pao->roff = 0x0;
-
-	if(Bx9000_Signal_Init((dbCommon *) pao, EPICS_RTYPE_AO, pao->out.value.instio.string, BT_TYPE_KL4004, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pao->name);
-		recGblRecordError(S_db_badField, (void *) pao, "Init signal Error");
-		pao->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pao->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pao,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		/* We do have feature register, but we know this is a unipolar 12 bits(12b<<3) module, so we shouldn't care bit 3 */
-		/* But for safety, we still check it */
-		if(psignal->pdevdata->pcoupler->installedBusTerm[psignal->pdevdata->slot].term_r32_value & 0x8)/* check bit 3 */
-		{/* signed amount */
-			pao->rval = ( (psignal->pdevdata->value)&0x7FFF ) * ( ((psignal->pdevdata->value)&0x8000)?-1:1 );
-		}
-		else
-		{/* two's complement */
-			pao->rval = (SINT16)(psignal->pdevdata->value);
-		}
-
-		pao->udf = FALSE;
-		pao->stat = pao->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_ao_KL4004(struct aoRecord * pao)
-{
-	SINT16		temp;
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-
-	if (!pao->pact)
-	{
-		if( pao->rval < 0 )	temp = 0;
-		else if( pao-> rval > 32767 ) temp = 32767;
-		else	temp = (SINT16)(pao->rval);
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't affect value */
-		psignal->pdevdata->value = (UINT16)temp;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pao->name);
-			return -1;
-		}
-		else
-		{
-			pao->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pao->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-static long lincvt_ao_KL4004(struct aoRecord	*pao, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope, we know it is a unipolar 12 bits(12b<<3) module */
-	pao->eslo = (pao->eguf - pao->egul)/(float)0x0FFF;
-	pao->roff = 0x0;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ao;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_ao;
-	DEVSUPFUN       special_linconv;
-}	devAoKL4004 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ao_KL4004,
-	NULL,
-	write_ao_KL4004,
-	lincvt_ao_KL4004
-};
-epicsExportAddress(dset, devAoKL4004);
-
diff --git a/Bx9000_MBTApp/src/devKL4132.c b/Bx9000_MBTApp/src/devKL4132.c
deleted file mode 100644
index 22e6567..0000000
--- a/Bx9000_MBTApp/src/devKL4132.c
+++ /dev/null
@@ -1,116 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <aoRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_ao_KL4132(struct aoRecord * pao)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pao->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pao,
-			"devAoKL4132 Init_record, Illegal OUT");
-		pao->pact=TRUE;
-		return (S_db_badField);
-	}
-
-        pao->eslo = (pao->eguf - pao->egul)/(float)65534;
-        pao->roff = 32767;
-
-	if(Bx9000_Signal_Init((dbCommon *) pao, EPICS_RTYPE_AO, pao->out.value.instio.string, BT_TYPE_KL4132, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pao->name);
-		recGblRecordError(S_db_badField, (void *) pao, "Init signal Error");
-		pao->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pao->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pao,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		pao->rval = (SINT16)(psignal->pdevdata->value);
-		pao->udf = FALSE;
-		pao->stat = pao->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_ao_KL4132(struct aoRecord * pao)
-{
-	SINT16		temp;
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pao->dpvt);
-
-	if (!pao->pact)
-	{
-		if( pao->rval < -32767 )	temp = -32767;
-		else if( pao-> rval > 32767 )	temp = 32767;
-		else	temp = (SINT16)(pao->rval);
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't affect value */
-		psignal->pdevdata->value = (UINT16)temp;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pao->name);
-			return -1;
-		}
-		else
-		{
-			pao->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pao, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pao->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-static long lincvt_ao_KL4132(struct aoRecord	*pao, int after)
-{
-
-	if(!after) return(0);
-	/* set linear conversion slope*/
-	pao->eslo = (pao->eguf - pao->egul)/(float)65534;
-	pao->roff = 32767;
-	return(0);
-}
-
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_ao;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_ao;
-	DEVSUPFUN       special_linconv;
-}	devAoKL4132 =
-{
-	6,
-	NULL,
-	NULL,
-	init_ao_KL4132,
-	NULL,
-	write_ao_KL4132,
-	lincvt_ao_KL4132
-};
-epicsExportAddress(dset, devAoKL4132);
-
diff --git a/Bx9000_MBTApp/src/devKM1004.c b/Bx9000_MBTApp/src/devKM1004.c
deleted file mode 100644
index 20c0e76..0000000
--- a/Bx9000_MBTApp/src/devKM1004.c
+++ /dev/null
@@ -1,80 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <biRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bi_KM1004(struct biRecord * pbi)
-{
-	if (pbi->inp.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbi,
-			"devBiKM1004 Init_record, Illegal INP");
-		pbi->pact=TRUE;
-		return (S_db_badField);
-	}
-
-	if(Bx9000_Signal_Init((dbCommon *) pbi, EPICS_RTYPE_BI, pbi->inp.value.instio.string, BT_TYPE_KM1004, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbi->name);
-		recGblRecordError(S_db_badField, (void *) pbi, "Init signal Error");
-		pbi->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	return 0;
-}
-
-static long read_bi_KM1004(struct biRecord * pbi)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbi->dpvt);
-
-	if (!pbi->pact)
-	{
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbi->name);
-			return -1;
-		}
-		else
-		{
-			pbi->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbi, READ_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbi->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-		else
-		{
-			pbi->udf = FALSE;
-			/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-			/* We don't check term_reg_exist, because we know we don't */
-			pbi->rval = (psignal->pdevdata->value)?1:0;
-		}
-	}
-	return (CONVERT);
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bi;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       read_bi;
-}	devBiKM1004 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bi_KM1004,
-	NULL,
-	read_bi_KM1004,
-};
-epicsExportAddress(dset, devBiKM1004);
-
diff --git a/Bx9000_MBTApp/src/devKM2004.c b/Bx9000_MBTApp/src/devKM2004.c
deleted file mode 100644
index da9e163..0000000
--- a/Bx9000_MBTApp/src/devKM2004.c
+++ /dev/null
@@ -1,98 +0,0 @@
-#include <Bx9000_MBT_Common.h>
-#include <boRecord.h>
-
-extern	SINT32	Bx9000_DEV_DEBUG;
-	
-static long init_bo_KM2004(struct boRecord * pbo)
-{
-	SINT32 status;
-	Bx9000_SIGNAL * psignal;
-
-	if (pbo->out.type!=INST_IO)
-	{
-		recGblRecordError(S_db_badField, (void *)pbo,
-			"devBoKM2004 Init_record, Illegal OUT");
-		pbo->pact=TRUE;
-		return (S_db_badField);
-	}
-
-        pbo->mask = 0x0;
-
-	if(Bx9000_Signal_Init((dbCommon *) pbo, EPICS_RTYPE_BO, pbo->out.value.instio.string, BT_TYPE_KM2004, Bx9000_Dft_ProcFunc, NULL) != 0)
-	{
-		if(Bx9000_DEV_DEBUG)	errlogPrintf("Fail to init signal for record %s!!", pbo->name);
-		recGblRecordError(S_db_badField, (void *) pbo, "Init signal Error");
-		pbo->pact = TRUE;
-		return (S_db_badField);
-	}
-
-	psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-	status = Bx9000_Dft_OutInit(psignal);
-	if(status != 0)
-	{/* Init value failed */
-		/* pbo->udf = TRUE; */
-
-		/* Leave UDF as is, don't set SEVERITY */
-		/* recGblSetSevr(pbo,READ_ALARM,INVALID_ALARM); */
-		return -1;
-	}
-	else
-	{
-		pbo->rval = (psignal->pdevdata->value)?1:0;
-		pbo->udf = FALSE;
-		pbo->stat = pbo->sevr = NO_ALARM;
-	}
-
-	return CONVERT;
-}
-
-static long write_bo_KM2004(struct boRecord * pbo)
-{
-	Bx9000_SIGNAL	* psignal = (Bx9000_SIGNAL *) (pbo->dpvt);
-
-	if (!pbo->pact)
-	{
-		/* psignal->pdevdata->pbusterm_sig_def->data_type is a little bit overkill */
-                /* We don't check term_reg_exist, because we know it doesn't exist */
-		psignal->pdevdata->value = (pbo->rval)?1:0;
-		if(epicsMessageQueueTrySend(psignal->pdevdata->pcoupler->msgQ_id, (void *)&psignal, sizeof(Bx9000_SIGNAL *)) == -1)
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Send Message to Operation Thread Error [%s]", pbo->name);
-			return -1;
-		}
-		else
-		{
-			pbo->pact = TRUE;
-		}
-	}
-	else
-	{
-		if ( (!psignal->pdevdata->op_done) || psignal->pdevdata->err_code )
-		{
-			recGblSetSevr(pbo, WRITE_ALARM, INVALID_ALARM);
-			if(Bx9000_DEV_DEBUG)	errlogPrintf("Record [%s] receive error code [0x%08x]!\n", pbo->name, psignal->pdevdata->err_code);
-			return -1;
-		}
-	}
-	return 0;
-}
-
-struct {
-	long            number;
-	DEVSUPFUN       report;
-	DEVSUPFUN       init;
-	DEVSUPFUN       init_bo;
-	DEVSUPFUN       get_ioint_info;
-	DEVSUPFUN       write_bo;
-}	devBoKM2004 =
-{
-	5,
-	NULL,
-	NULL,
-	init_bo_KM2004,
-	NULL,
-	write_bo_KM2004,
-};
-epicsExportAddress(dset, devBoKM2004);
-
diff --git a/Bx9000_MBTApp/src/drvBx9000_MBT.c b/Bx9000_MBTApp/src/drvBx9000_MBT.c
deleted file mode 100644
index 34529ac..0000000
--- a/Bx9000_MBTApp/src/drvBx9000_MBT.c
+++ /dev/null
@@ -1,1355 +0,0 @@
-#include "Bx9000_MBT_Common.h"
-#include "Bx9000_BTDef.h"
-#include "Bx9000_SigDef.h"
-#include "Bx9000_Watchdog.h"
-
-
-
-/* Add MACRO Definitions for min/max */
-/* Needed as of EPICS BASE R3-14-11 */
-/* provide an macro that implements max() and min() */
-
-#ifndef __cplusplus
-#ifndef max
-#define max(a,b) (((a)>(b)) ? (a) : (b))
-#endif
-
-#ifndef min
-#define min(a,b) (((a)<(b)) ? (a) : (b))
-#endif
-#endif
-
-
-Bx9000_COUPLER_LIST	bx9000_cplr_list;
-SINT32	Bx9000_DRV_DEBUG = 1;
-SINT32	Bx9000_DEV_DEBUG = 0;
-
-static  UINT32 cplr_list_inited=0;
-
-/* This function returns the pointer to the coupler with name */
-Bx9000_COUPLER * Bx9000_Get_Coupler_By_Name( const char * cplrname )
-{
-	Bx9000_COUPLER	* pcoupler = NULL;
-
-	if(!cplr_list_inited)	return NULL;
-
-	for (	pcoupler=(Bx9000_COUPLER *)ellFirst((ELLLIST *)&bx9000_cplr_list);
-			pcoupler;	pcoupler = (Bx9000_COUPLER *)ellNext((ELLNODE *)pcoupler) )
-	{		
-		if ( 0 == strcmp(cplrname, MBT_GetName(pcoupler->mbt_link)) )
-			break;
-	}
-
-	return pcoupler;
-}
-
-/* This function returns the pointer to the busterm_img_def by string name */
-static BUSTERM_IMG_DEF * Bx9000_Get_BTDef_By_Cname(char * btcname)
-{
-	UINT32	loop;
-	for(loop=0; loop < N_BT_IMG_DEF; loop++)
-	{
-		if( 0 == strcmp((char *) busterm_img_def[loop].busterm_string, btcname) )
-			return	(busterm_img_def+loop);
-	}
-	return NULL;
-}
-
-/* This function returns the pointer to the busterm_img_def by enum name */
-static BUSTERM_IMG_DEF * Bx9000_Get_BTDef_By_Ename(E_BUSTERM_TYPE bttype)
-{
-	UINT32	loop;
-	for(loop=0; loop < N_BT_IMG_DEF; loop++)
-	{
-		if( busterm_img_def[loop].busterm_type == bttype )
-			return	(busterm_img_def+loop);
-	}
-	return NULL;
-}
-
-/* This function returns the pointer to the BUSTERM_SIG_DEF by string name */
-BUSTERM_SIG_DEF * Bx9000_Get_SigDef_By_Cname(char * btcname, char * func, E_EPICS_RTYPE epics_rtype)
-{
-	UINT32	loop;
-	for(loop=0; loop < N_BT_SIG_PREDEF; loop++)
-	{
-		if (	0 == strcmp((char *) busterm_sig_predef[loop].busterm_string, btcname)
-			&&	0 == strcmp((char *) busterm_sig_predef[loop].function, func) )
-		{
-			if (	busterm_sig_predef[loop].epics_rtype == EPICS_RTYPE_NONE
-				||	epics_rtype == EPICS_RTYPE_NONE
-				||	busterm_sig_predef[loop].epics_rtype == epics_rtype )
-				return	(BUSTERM_SIG_DEF *)(busterm_sig_predef+loop);
-		}
-	}
-	return NULL;
-}
-
-/* This function returns the pointer to the BUSTERM_SIG_DEF by enum name */
-BUSTERM_SIG_DEF * Bx9000_Get_SigDef_By_Ename(E_BUSTERM_TYPE bttype, char * func, E_EPICS_RTYPE epics_rtype)
-{
-	UINT32	loop;
-	for(loop=0; loop < N_BT_SIG_PREDEF; loop++)
-	{
-		if (	busterm_sig_predef[loop].busterm_type == bttype
-			&&	0 == strcmp((char *) busterm_sig_predef[loop].function, func) )
-		{
-			if (	busterm_sig_predef[loop].epics_rtype == EPICS_RTYPE_NONE
-				||	epics_rtype == EPICS_RTYPE_NONE
-				||	busterm_sig_predef[loop].epics_rtype == epics_rtype )
-				return	(BUSTERM_SIG_DEF *)(busterm_sig_predef+loop);
-		}
-	}
-	return NULL;
-}
-
-#ifdef	vxWorks
-static void	Bx9000_Couplers_Reboot_Hook(int startType)
-{
-	Bx9000_COUPLER  * pcoupler = NULL;
-
-	if(!cplr_list_inited)
-		return;
-
-	for(	pcoupler=(Bx9000_COUPLER *)ellFirst((ELLLIST *)&bx9000_cplr_list);
-			pcoupler != NULL; pcoupler = (Bx9000_COUPLER *)ellNext((ELLNODE *)pcoupler) )
-	{	/* We don't care about any other resource.
-		 * we just want to close socket to Bx9000 to make next re-connection easy
-		 */
-		if(pcoupler->mbt_link)
-		{
-			MBT_Disconnect(pcoupler->mbt_link, 0);
-			pcoupler->mbt_link	= NULL;
-		}
-	}
-
-	/* my experience is we can only print one character */
-	printf("Close link to all Bx9000 couplers!\n");
-}
-#endif
-
-/* This must be called in st.cmd first before any operation to the coupler */
-/* name must be unique, and ipaddr is not necessary to be unique */
-/* This function can be only called in st.cmd */
-/* init_string will be "signame1=1234,signame2=0x2345" */
-int	Bx9000_Coupler_Add( char * cplrname, char * ipaddr, char * init_string )
-{
-	Bx9000_COUPLER	* pcoupler = NULL;
-
-	/* Initialize the coupler list */
-	if(!cplr_list_inited)
-	{
-		ellInit((ELLLIST *) & bx9000_cplr_list);
-#ifdef	vxWorks
-		rebootHookAdd((FUNCPTR)Bx9000_Couplers_Reboot_Hook);
-#endif
-		cplr_list_inited = 1;
-	}
-
-	/* Parameters check */
-	if( cplrname == NULL || strlen(cplrname) == 0 )
-	{
-		errlogPrintf( "Bx9000_Coupler_Add Error: Empty coupler name!\n" );
-		return	-1;
-	}
-
-	if(  ipaddr== NULL || strlen(ipaddr) == 0 || inet_addr(ipaddr) == -1 )
-	{
-		errlogPrintf( "Bx9000_Coupler_Add %s Error: Invalid IP address!\n", cplrname );
-		return  -1;
-	}
-
-	if( Bx9000_Get_Coupler_By_Name(cplrname) )
-	{
-		errlogPrintf( "Bx9000_Coupler_Add %s Error: Already a coupler with this name!\n", cplrname );
-		return -1;
-	}
-
-	/* Parameters are OK, malloc memory for coupler */
-	pcoupler = (Bx9000_COUPLER *) malloc ( sizeof(Bx9000_COUPLER) );
-	if( pcoupler == NULL )
-	{
-		errlogPrintf(	"Bx9000_Coupler_Add %s Error: Failed to malloc %zu bytes for coupler!\n",
-						cplrname, sizeof(Bx9000_COUPLER) );
-		return -1;
-	}
-
-	/* Get here, coupler structure malloced, init member */
-	memset( (char *)pcoupler, 0, sizeof(Bx9000_COUPLER) );
-	/* Most of members will be init to 0 except below */
-	pcoupler->terminated	= 0; /* KL9010 not installed yet */
-	pcoupler->couplerReady	= 0; /* Not ready, just emphasize */
-	pcoupler->needReset		= 0; /* So far we don't need reset, just emphasize */
-	pcoupler->opthread_id	= (epicsThreadId)(-1);	/* No thread yet, will create later */
-	strcpy(pcoupler->couplerID, "Unknown");
-	
-	pcoupler->mbt_link = MBT_Init(cplrname, ipaddr, DFT_MBT_PORT, MBT_UNIT_ENDPOINT);
-	if(pcoupler->mbt_link == NULL)
-	{
-		errlogPrintf( "Bx9000_Coupler_Add %s Error: Failed to initialize ModBusTCP link!\n", cplrname);
-		goto FAILURE;
-	}
-
-	pcoupler->mutex_lock = epicsMutexCreate();
-	if(pcoupler->mutex_lock == NULL)
-	{
-		errlogPrintf( "Bx9000_Coupler_Add %s Error: Failed to create mutex_lock!\n", cplrname);
-		goto FAILURE;
-	}
-
-	ellInit((ELLLIST *) & (pcoupler->sigptr_list));
-
-	pcoupler->msgQ_id = epicsMessageQueueCreate(OPTHREAD_MSGQ_CAPACITY, sizeof(Bx9000_SIGNAL *));
-	if(pcoupler->msgQ_id == NULL)
-	{
-		errlogPrintf(	"Bx9000_Coupler_Add %s Error: Failed to create message queue with capacity %u!\n",
-						cplrname, OPTHREAD_MSGQ_CAPACITY );
-		goto FAILURE;
-	}
-
-	/* Prepare the opthread name for future Init use */
-	/* vxWorks "i" shell command will display only 11 charactors for task name */
-	/* for Bx9000 with IP 130.199.123.234, we will have a name "B9K123.234" */
-	memset(pcoupler->opthread_name, 0, MAX_CA_STRING_SIZE );
-	strcpy(pcoupler->opthread_name,"B9K");
-	strcat(pcoupler->opthread_name,strchr( (strchr(ipaddr,'.')+1), '.') +1);
-
-	/* Set installedBusTerm[0], there is no reason to fail to find Bx9000's def */
-	pcoupler->installedBusTerm[0].pbusterm_img_def = Bx9000_Get_BTDef_By_Ename(BT_TYPE_Bx9000);
-	/* coupler has no feature register */
-	pcoupler->installedBusTerm[0].term_r32_value = pcoupler->installedBusTerm[0].pbusterm_img_def->term_r32_dft;
-	ellInit((ELLLIST *) & (pcoupler->installedBusTerm[0].init_list));
-	if(init_string)
-	{/* finish me*/
-	}
-
-	/* We successfully allocate all resource */
-	ellAdd( (ELLLIST *)&bx9000_cplr_list, (ELLNODE *)pcoupler);
-	return 0;
-FAILURE:
-	if(pcoupler->mbt_link)		MBT_Release(pcoupler->mbt_link);
-	if(pcoupler->mutex_lock)	epicsMutexDestroy(pcoupler->mutex_lock);
-	if(pcoupler->msgQ_id)		epicsMessageQueueDestroy(pcoupler->msgQ_id);
-	free(pcoupler);
-	return -1;
-}
-
-static int Bx9000_Couplers_Init_Once();
-static int Bx9000_Coupler_Init(Bx9000_COUPLER * pcoupler);
-static int Bx9000_Operation(Bx9000_COUPLER * pcoupler);
-
-/* This function add a bus terminal to an existing coupler */
-/* init_string will be "signame1=1234,signame2=0x2345" */
-int	Bx9000_Terminal_Add( char * cplrname, UINT16 slot, char * btname, char * init_string)
-{
-	Bx9000_COUPLER	* pcoupler = NULL;
-	BUSTERM_IMG_DEF	* pbtdef = NULL;
-	UINT32	loop;
-
-	/* Parameters check */
-	if( cplrname == NULL || strlen(cplrname) == 0 )
-	{
-		errlogPrintf( "Bx9000_Terminal_Add Error: Empty Bx9000 coupler name!\n");
-		return	-1;
-	}
-
-	if(slot == 0 || slot > MAX_NUM_OF_BUSTERM)
-	{
-		errlogPrintf("Bx9000_Terminal_Add Error: Slot number is illegal!\n");
-		return -1;
-	}
-
-	if(  btname== NULL || strlen(btname) == 0 )
-	{
-		errlogPrintf( "Bx9000_Terminal_Add Error: Empty terminal type name!\n");
-		return  -1;
-	}
-
-	if ( 0 == strcmp("Bx9000", btname) )
-	{
-		errlogPrintf("Bx9000_Terminal_Add Error: Bx9000 is a controller name, not a terminal name!\n");
-		return  -1;
-	}
-
-	/* Parameters are OK, check configuration */
-	if( NULL == (pcoupler = Bx9000_Get_Coupler_By_Name(cplrname)) )
-	{
-		errlogPrintf("Bx9000_Terminal_Add Error: Can't find Bx9000 coupler with name %s!\n", cplrname);
-		return -1;
-	}
-
-	if( NULL == (pbtdef = Bx9000_Get_BTDef_By_Cname(btname)) )
-	{
-		errlogPrintf("Bx9000_Terminal_Add Error: Terminal type %s is not supported yet!\n", btname);
-		return -1;
-	}
-
-	/* Add terminal to coupler */
-	epicsMutexLock(pcoupler->mutex_lock);
-	if(pcoupler->terminated)
-	{	/* KL9010 already installed, no new terminals allowed */
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		errlogPrintf( "Bx9000_Terminal_Add %s Error: Bx9000_Terminal_Add called after adding KL9010!\n", cplrname );
-		return -1;
-	}
-	if ( pcoupler->installedBusTerm[slot].pbusterm_img_def != NULL )
-	{
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		errlogPrintf("Bx9000_Terminal_Add %s Error: Slot %d is already occupied!\n", cplrname, slot );
-		return -1;
-	}
-
-	if(pcoupler->installedBusTerm[slot-1].pbusterm_img_def == NULL)
-	{/* You have to continuously install bus terminals */
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		errlogPrintf("Bx9000_Terminal_Add %s Error: The slot before slot %d is empty!\n", cplrname, slot );
-		return -1;
-	}
-
-	pcoupler->installedBusTerm[slot].pbusterm_img_def = pbtdef;
-	pcoupler->installedBusTerm[slot].term_r32_value = pcoupler->installedBusTerm[slot].pbusterm_img_def->term_r32_dft; /* set R32 value to default, if no R32, default will be 0 */
-	ellInit( (ELLLIST *) & (pcoupler->installedBusTerm[slot].init_list) );
-	if(init_string)
-	{/* finish me */
-	}
-
-	if( 0 == strcmp("KL9010", btname) )
-		pcoupler->terminated = 1;
-	epicsMutexUnlock(pcoupler->mutex_lock);
-
-	/* Calculate the processing image */
-	if( 0 == strcmp("KL9010", btname) )
-	{/* Reach here, means you just add the terminator */
-		UINT32	temp_cin_woffset, temp_cout_woffset, temp_din_boffset, temp_dout_boffset;
-		
-		epicsMutexLock(pcoupler->mutex_lock);
-
-		temp_cin_woffset = 0;
-		temp_cout_woffset = 0;
-		/* Calculate mapping for complex*/
-		/* All modules are continuously installed, we go though all of them until we see KL9010 */
-		for(loop=0; loop < MAX_NUM_OF_BUSTERM+2; loop++)	/* +2 means include coupler 9000 and terminator 9010 */
-		{
-			if(pcoupler->installedBusTerm[loop].pbusterm_img_def)
-			{
-				pcoupler->installedBusTerm[loop].complex_in_wordoffset = temp_cin_woffset;
-				pcoupler->installedBusTerm[loop].complex_out_wordoffset = temp_cout_woffset;
-
-				/* calculate offset for next terminal */
-				temp_cin_woffset += pcoupler->installedBusTerm[loop].pbusterm_img_def->complex_in_words;
-				temp_cout_woffset += pcoupler->installedBusTerm[loop].pbusterm_img_def->complex_out_words;
-
-				if(pcoupler->installedBusTerm[loop].pbusterm_img_def->busterm_type == BT_TYPE_KL9010)
-					break;
-			}
-		}
-		pcoupler->complex_in_bits	= temp_cin_woffset	* 16;
-		pcoupler->complex_out_bits	= temp_cout_woffset	* 16;
-		if ( Bx9000_DRV_DEBUG )
-			printf(	"%d words complex in and %d words complex out mapped for Bx9000 %s!\n",
-					temp_cin_woffset, temp_cout_woffset, cplrname);
-
-		/* Calculate mapping for digital*/
-		/* All modules are continuously installed, we go though all of them until we see KL9010 */
-		temp_din_boffset = pcoupler->complex_in_bits;
-		temp_dout_boffset = pcoupler->complex_out_bits;
-		for(loop=0; loop < MAX_NUM_OF_BUSTERM+2; loop++)	/* +2 means include coupler 9000 and terminator 9010 */
-		{
-			if(pcoupler->installedBusTerm[loop].pbusterm_img_def)
-			{
-				pcoupler->installedBusTerm[loop].digital_in_bitoffset = temp_din_boffset;
-				pcoupler->installedBusTerm[loop].digital_out_bitoffset = temp_dout_boffset;
-
-				/* calculate offset for next terminal */
-				temp_din_boffset += pcoupler->installedBusTerm[loop].pbusterm_img_def->digital_in_bits;
-				temp_dout_boffset += pcoupler->installedBusTerm[loop].pbusterm_img_def->digital_out_bits;
-
-				if(pcoupler->installedBusTerm[loop].pbusterm_img_def->busterm_type == BT_TYPE_KL9010)
-					break;
-			}
-		}
-		pcoupler->digital_in_bits	= temp_din_boffset	- pcoupler->complex_in_bits;
-		pcoupler->digital_out_bits	= temp_dout_boffset	- pcoupler->complex_out_bits;
-		if ( Bx9000_DRV_DEBUG )
-			printf(	"%d bits digital in and %d bits digital out mapped for Bx9000 %s!\n",
-					pcoupler->digital_in_bits, pcoupler->digital_out_bits, cplrname);
-
-		/* Below two numbers indicate how many words we should update in image */
-		pcoupler->total_in_words = (temp_din_boffset+15)/16;
-		pcoupler->total_out_words = (temp_dout_boffset + 15)/16;
-
-		epicsMutexUnlock(pcoupler->mutex_lock);
-
-#if	0	/* We decide not do this here because we need epicsTime	*/
-		/* If we do this here, epicsTimeGetCurrent will get iocClock init */
-		/* To avoid this, we must guarantee generalTime was load and inited before this, that's too complicated */
-		/* So we decide to move this to Bx9000_Couplers_Init_Once and will be executed in iocInit */
-		Bx9000_Coupler_Init(pcoupler);
-
-		epicsMutexLock(pcoupler->mutex_lock);
-		/* Create the operation thread */
-		pcoupler->opthread_id = epicsThreadCreate(	pcoupler->opthread_name, OPTHREAD_PRIORITY, OPTHREAD_STACK,
-													(EPICSTHREADFUNC)Bx9000_Operation, (void *)pcoupler );
-		if(pcoupler->opthread_id == (epicsThreadId)(-1))
-		{
-			epicsMutexUnlock(pcoupler->mutex_lock);
-			errlogPrintf("Bx9000_Terminal_Add %s Error: Failed to create operation thread!\n", cplrname);
-			epicsThreadSuspendSelf();
-			return -1;
-		}
-		epicsMutexUnlock(pcoupler->mutex_lock);
-#endif
-	}
-
-	return 0;
-}
-
-/* This function goes thru the coupler link list and init everyone, it should be only called once */
-static int Bx9000_Couplers_Init_Once()
-{
-	Bx9000_COUPLER  * pcoupler = NULL;
-
-	if ( !cplr_list_inited )
-		return -1;
-
-	for (	pcoupler=(Bx9000_COUPLER *)ellFirst((ELLLIST *)&bx9000_cplr_list);
-			pcoupler; pcoupler = (Bx9000_COUPLER *)ellNext((ELLNODE *)pcoupler) )
-	{
-		Bx9000_Coupler_Init(pcoupler);
-
-		epicsMutexLock(pcoupler->mutex_lock);
-		/* Create the operation thread */
-		if(pcoupler->opthread_id == (epicsThreadId)(-1))
-		{
-			pcoupler->opthread_id = epicsThreadCreate(	pcoupler->opthread_name, OPTHREAD_PRIORITY, OPTHREAD_STACK,
-														(EPICSTHREADFUNC)Bx9000_Operation, (void *)pcoupler );
-			if(pcoupler->opthread_id == (epicsThreadId)(-1))
-			{
-				epicsMutexUnlock(pcoupler->mutex_lock);
-				errlogPrintf(	"Fatal Error: Failed to create operation thread for Bx9000 %s\n",
-								MBT_GetName(pcoupler->mbt_link) );
-				epicsThreadSuspendSelf();
-				return -1;
-			}
-		}
-		epicsMutexUnlock(pcoupler->mutex_lock);
-	}
-
-	return 0;
-}
-
-static int Bx9000_Coupler_Init(Bx9000_COUPLER * pcoupler)
-{/* finish me, do we reset Bx9000? */
-	SINT32	status;
-
-	if(pcoupler == NULL)
-		return -1;
-
-	epicsMutexLock(pcoupler->mutex_lock);	/* Do we have to protect so long time, so far why not */
-	if(pcoupler->couplerReady)
-	{/* Not necessary to re-init */
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		return 0;
-	}
-
-	if ( !pcoupler->terminated )
-	{
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		printf( "Coupler not terminated!\n"
-				"Did you call Bx9000_Terminal_Add( %s, <slot>, \"KL9010\", 0 ) in st.cmd?\n",
-				MBT_GetName(pcoupler->mbt_link) );
-		return -1;
-	}
-
-	/* if(Bx9000_DRV_DEBUG) */
-	printf("Trying to connect to Bx9000 %s ...\n", MBT_GetName(pcoupler->mbt_link));
-
-	/*******************************************************************/
-	/*********** Set up TCP connection *********************************/
-	/*******************************************************************/
-	/* try to connect to Bx9000 */
-	epicsTimeGetCurrent( &(pcoupler->time_last_try) );
-
-	status = MBT_Connect(pcoupler->mbt_link, DFT_MBT_TOUT);
-	if(status != 0)
-	{	/* fail to set up MBT link */
-		pcoupler->couplerReady = 0;	/* Not so necessary */
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		printf("Bx9000_Coupler_Init Error: Failed to connect to %s!\n", MBT_GetName(pcoupler->mbt_link));
-		return -1;
-	}
-	/* Successfully connect to Bx9000 */
-	epicsTimeGetCurrent( &(pcoupler->time_set_conn) );
-	/********************************************************************************************/
-
-	/********************************************************************************************/
-	/* finish me */
-	/****** Go through all installedBusTerms' init_list to do initialization, may needReset *****/
-	/********************************************************************************************/
-
-	/********************************************************************************************/
-	/**************************** Get coupler_ID and Verify mapping *****************************/
-	/********************************************************************************************/
-	status = Bx9000_MBT_Read_Cplr_ID(pcoupler->mbt_link, pcoupler->couplerID, COUPLER_ID_SIZE*2+2, DFT_MBT_TOUT);
-	if(status != 0)
-	{
-		pcoupler->couplerReady = 0;	/* Not so necessary */
-		/* Force MBT close link, we don't mess up existing err code */
-		MBT_Disconnect(pcoupler->mbt_link, 0);	
-		epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		/* if(Bx9000_DRV_DEBUG) */
-		printf("Bx9000_Coupler_Init %s Error: Failed to read coupler ID!\n", MBT_GetName(pcoupler->mbt_link));
-		return -1;
-	}
-
-	status = Bx9000_MBT_Verify_Image_Size(pcoupler->mbt_link, pcoupler->complex_out_bits, pcoupler->complex_in_bits,
-								 pcoupler->digital_out_bits, pcoupler->digital_in_bits, DFT_MBT_TOUT);
-	if(status != 0)
-	{	/* somehow we can't verify, either fail to read or doesn't match */
-		pcoupler->couplerReady = 0;	/* Not so necessary */
-		/* Force MBT to close link, we don't mess up existing err code */
-		MBT_Disconnect(pcoupler->mbt_link, 0);
-		epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		if(Bx9000_DRV_DEBUG)
-			printf(	"Bx9000_Coupler_Init %s Error: Failed to validate I/O processing image size!\n"
-					"Make sure the installed terminals match those added in st.cmd.\n",
-					MBT_GetName(pcoupler->mbt_link) );
-		return -1;
-	}
-
-	/*****************************************************************************/
-
-	/*****************************************************************************/
-	/********Finish me *********For each installed terminal, read back R32********/
-	/*****************************************************************************/
-
-	/*****************************************************************************/
-	/******* Sync outputImage ****************************************************/
-	/*****************************************************************************/
-	status = Bx9000_MBT_Read_Output_Image(	pcoupler->mbt_link, pcoupler->outputImage,
-											pcoupler->total_out_words, DFT_MBT_TOUT );
-	if(status != 0)
-	{/* We fail to sync output image. */
-		/* I don't know why the Bx9000 keeps saying bus error, hope this would help */
-		Bx9000_MBT_Reset(pcoupler->mbt_link, DFT_MBT_TOUT);
-		pcoupler->couplerReady = 0;	/* Not so necessary */
-		/* Force MBT close link, we don't mess up existing err code */
-		MBT_Disconnect(pcoupler->mbt_link, 0);
-		epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		if(Bx9000_DRV_DEBUG)
-			printf(	"Bx9000_Coupler_Init %s Error: Failed to sync output processing image to local!\n",
-					MBT_GetName(pcoupler->mbt_link));
-		return -1;
-	}
-	/*******************************************************************************************************************************/
-
-	pcoupler->couplerReady = 1;	/* Everything OK */
-	epicsMutexUnlock(pcoupler->mutex_lock);
-	/* if(Bx9000_DRV_DEBUG) */
-	printf("Successfully connected to Bx9000 %s!\n", MBT_GetName(pcoupler->mbt_link));
-
-	/* Disable watchdog timer by default */
-	MBT_DisableWatchdog( pcoupler->mbt_link );
-	return 0;
-}
-
-#define	OP_NO_ERROR	0
-#define	OP_NORMAL_ERROR	1
-#define	OP_FATAL_ERROR	2
-static int Bx9000_Operation(Bx9000_COUPLER * pcoupler)
-{
-	SINT32	msgQstatus, status;
-	SINT32	NofSigs;
-	UINT32	loop;
-	UINT32	errorHappened;	/* 0: no error; 1: normal error; 2: fatal error, we must turn off couplerReady flag */
-	Bx9000_SIGNAL	*psignal;
-	Bx9000_SIGNAL_LIST	sig_wrt_outimg_list, sig_rd_inpimg_list, sig_rd_outimg_list, sig_other_list;
-
-	epicsTimeStamp	curTS;
-	SINT32	linkStat;
-	UINT32	exceptCnt;
-
-	if(pcoupler == NULL)
-	{
-		errlogPrintf("Bx9000_Operation Error: Invalid coupler ptr!\n" );
-		return -1;
-	}
-
-	while(TRUE)
-	{
-		errorHappened = OP_NO_ERROR;
-		msgQstatus = epicsMessageQueueReceiveWithTimeout(	pcoupler->msgQ_id, &psignal,
-															sizeof(Bx9000_SIGNAL *), OPTHREAD_MSGQ_TMOUT );
-		if(msgQstatus < 0)
-		{/* Time out, no request, do heartbeat to avoid link drop */
-			if(pcoupler->couplerReady)
-			{
-				status = Bx9000_MBT_TestLink(pcoupler->mbt_link, DFT_MBT_TOUT);
-				if(status != 0)
-				{
-					/* something wrong, maybe link lost, maybe exception, but nothing fatal */
-					errorHappened = max(OP_NORMAL_ERROR, errorHappened);
-				}
-			}
-		}
-		else
-		{/* some requests come in */
-			/* Figure out how many requests in queue and deal all of them */
-			NofSigs = epicsMessageQueuePending(pcoupler->msgQ_id);
-			if(!pcoupler->couplerReady)
-			{/* Coupler is not ready, callback all requests right away */
-				/* We loop one more time, because we already read out one psignal */
-				for(loop=0; loop<=NofSigs; loop++)
-				{
-					if ( loop != 0 )
-						epicsMessageQueueReceiveWithTimeout(	pcoupler->msgQ_id, &psignal,
-																sizeof(Bx9000_SIGNAL *), OPTHREAD_MSGQ_TMOUT );
-					psignal->pdevdata->err_code	= ERR_CODE_CPLR_NOT_READY;
-					psignal->pdevdata->op_done	= 1;
-					if(psignal->pdevdata->precord)
-					{
-						dbScanLock(psignal->pdevdata->precord);
-						(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-						dbScanUnlock(psignal->pdevdata->precord);
-					}
-				}
-			}
-			else
-			{/* coupler is ready, we should do real operation */
-				/* We will put all requests into the right list, and figure out which part of processing image we should deal */
-				UINT16	rd_inpimg_bstart=0xFFFF, rd_inpimg_bend=0, wrt_outimg_bstart=0xFFFF, wrt_outimg_bend=0;
-				UINT16	rd_inpimg_wstart=0, rd_inpimg_wcnt=0, wrt_outimg_wstart=0, wrt_outimg_wcnt=0;
-
-				/* We just re-init link list instead of delete, because there is no resource issue */
-				ellInit( (ELLLIST *) &sig_rd_inpimg_list );
-				ellInit( (ELLLIST *) &sig_wrt_outimg_list );
-				ellInit( (ELLLIST *) &sig_rd_outimg_list );
-				ellInit( (ELLLIST *) &sig_other_list );
-
-				/* Read out all existing requests. We loop one more time, because we already read out one psignal */
-				for(loop=0; loop<=NofSigs; loop++)
-				{
-					if ( loop != 0 )
-						epicsMessageQueueReceiveWithTimeout(	pcoupler->msgQ_id, &psignal,
-																sizeof(Bx9000_SIGNAL *), OPTHREAD_MSGQ_TMOUT );
-
-					psignal->pdevdata->err_code = ERR_CODE_NO_ERROR;	/* clean up err_code before we execute it */
-					psignal->pdevdata->op_done = 0;		/* We didn't start yet, of cause not done */
-
-					/* We don't check if individual request is within mapped image */
-					/* The request sender should check it */
-					/* process_fptr should also check it, we only check overall to save cpu time */
-					if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_READ_INPUT_CIMG)
-					{
-						ellAdd( (ELLLIST *) &sig_rd_inpimg_list, (ELLNODE *) psignal );
-						rd_inpimg_bstart = min( rd_inpimg_bstart,
-							16	*	(	pcoupler->installedBusTerm[psignal->pdevdata->slot].complex_in_wordoffset
-									+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.woffset	) );
-						rd_inpimg_bend = max( rd_inpimg_bend,
-							16	*	(	pcoupler->installedBusTerm[psignal->pdevdata->slot].complex_in_wordoffset
-									+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.woffset
-									+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.nwords	) );
-					}
-
-					else if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_READ_INPUT_DIMG)
-					{
-						ellAdd( (ELLLIST *) &sig_rd_inpimg_list, (ELLNODE *) psignal );
-						rd_inpimg_bstart = min( rd_inpimg_bstart, 
-							(	pcoupler->installedBusTerm[psignal->pdevdata->slot].digital_in_bitoffset
-							+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.boffset	) );
-						rd_inpimg_bend = max( rd_inpimg_bend,
-							(	pcoupler->installedBusTerm[psignal->pdevdata->slot].digital_in_bitoffset
-							+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.boffset
-							+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.nbits	) );
-					}
-
-					else if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_WRITE_OUTPUT_CIMG)
-					{
-						/* We got to put value into the image first */
-						if ( (*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg) == 0 )
-						{	/* successfully put data into image */
-							ellAdd( (ELLLIST *) &sig_wrt_outimg_list, (ELLNODE *) psignal );
-							wrt_outimg_bstart = min( wrt_outimg_bstart, 
-								16	*	(	pcoupler->installedBusTerm[psignal->pdevdata->slot].complex_out_wordoffset
-										+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.woffset	) );
-							wrt_outimg_bend = max( wrt_outimg_bend,
-								16	*	(	pcoupler->installedBusTerm[psignal->pdevdata->slot].complex_out_wordoffset
-										+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.woffset
-										+	psignal->pdevdata->pbusterm_sig_def->args.cimg_rw.nwords	) );
-						}
-						else
-						{/* err_code and op_done should be already set by process_fptr, we just callback */
-							if(psignal->pdevdata->precord)
-							{
-								dbScanLock(psignal->pdevdata->precord);
-								(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-								dbScanUnlock(psignal->pdevdata->precord);
-							}
-						}					
-					}
-
-					else if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_WRITE_OUTPUT_DIMG)
-					{
-						/* We got to put value into the image */
-						if( (*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg) == 0)
-						{/* successfully put data into image */
-							ellAdd( (ELLLIST *) &sig_wrt_outimg_list, (ELLNODE *) psignal );
-							wrt_outimg_bstart = min( wrt_outimg_bstart,
-								(	pcoupler->installedBusTerm[psignal->pdevdata->slot].digital_out_bitoffset
-								+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.boffset	) );
-							wrt_outimg_bend = max( wrt_outimg_bend,
-								(	pcoupler->installedBusTerm[psignal->pdevdata->slot].digital_out_bitoffset
-								+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.boffset
-								+	psignal->pdevdata->pbusterm_sig_def->args.dimg_rw.nbits	) );
-						}
-						else
-						{/* err_code and op_done should be already set by process_fptr, we just callback */
-							if(psignal->pdevdata->precord)
-							{
-								dbScanLock(psignal->pdevdata->precord);
-								(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-								dbScanUnlock(psignal->pdevdata->precord);
-							}
-						}
-					}
-
-					else if(psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_READ_OUTPUT_CIMG ||
-							psignal->pdevdata->pbusterm_sig_def->busterm_optype == BT_OPTYPE_READ_OUTPUT_DIMG)
-					{
-						ellAdd( (ELLLIST *) &sig_rd_outimg_list, (ELLNODE *) psignal );
-					}
-
-					else
-					{
-						ellAdd( (ELLLIST *) &sig_other_list, (ELLNODE *) psignal );
-					}
-				}/* Read out and re-organize all requests */
-
-				/* so far all requests are organized, let's figure out range of processing image */
-				if(rd_inpimg_bstart < rd_inpimg_bend)
-				{
-					/* we got some requests to input image, or else leave rd_inpimg_wstart=0, rd_inpimg_wcnt=0 */
-					rd_inpimg_wstart = rd_inpimg_bstart / 16;
-
-					/* -1 because boffset + nbits, such as 100+4, but bit 104 is not included */
-					rd_inpimg_wcnt = (rd_inpimg_bend-1)/16 +1 - rd_inpimg_wstart;
-
-					/* Make sure we don't ask more than we have */
-					if(rd_inpimg_wstart >= pcoupler->total_in_words)
-					{
-						/* somebody asks some totally non-existing image */
-						/* We should do nothing to hardware, process_fptr should set err_code */
-						rd_inpimg_wstart = 0;
-						rd_inpimg_wcnt = 0;
-					}
-					else
-					{
-						/* Cut off the requests that cross the border */
-						/* Only request existing one, process_fptr should set err_code */
-						/* for those guys that try to cross border */
-						rd_inpimg_wcnt = min(rd_inpimg_wcnt, pcoupler->total_in_words-rd_inpimg_wstart);
-					}
-				}
-
-				if(wrt_outimg_bstart < wrt_outimg_bend)
-				{
-					/* we got some requests to output image, or else leave wrt_outimg_wstart=0, wrt_outimg_wcnt=0 */
-					wrt_outimg_wstart = wrt_outimg_bstart / 16;
-
-					/* -1 because boffset + nbits, such as 100+4, but bit 104 is not included */
-					wrt_outimg_wcnt = (wrt_outimg_bend-1)/16 +1 - wrt_outimg_wstart;
-
-					/* Make sure we don't ask more than we have */
-					if(wrt_outimg_wstart >= pcoupler->total_out_words)
-					{
-						/* somebody asks some totally non-existing image */
-						/* We should do nothing to hardware, process_fptr should set err_code */
-						wrt_outimg_wstart = 0;
-						wrt_outimg_wcnt = 0;
-					}
-					else
-					{
-						/* Cut off the requests that cross the border */
-						/* Only request existing one */
-						/* process_fptr should set err_code for those guys that tried to cross border */
-						wrt_outimg_wcnt = min(wrt_outimg_wcnt, pcoupler->total_out_words-wrt_outimg_wstart);
-					}
-				}
-
-				/* talk to hardware to sync processing image */
-				epicsMutexLock(pcoupler->mutex_lock);
-				status = Bx9000_MBT_Sync_Both_Image(	pcoupler->mbt_link,		rd_inpimg_wstart,
-														rd_inpimg_wcnt,			pcoupler->inputImage,
-														wrt_outimg_wstart,		wrt_outimg_wcnt,
-														pcoupler->outputImage,	DFT_MBT_TOUT );
-				epicsMutexUnlock(pcoupler->mutex_lock);
-
-				if(status == 0)
-				{/* successfully synced processing image */
-					/* The request that try to read processing image now is ok to run */
-					for (	psignal = (Bx9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_rd_inpimg_list );
-							psignal; psignal = (Bx9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
-					{
-						(*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg);
-						/* err_code and op_done should be already set by process_fptr, we just callback */
-						if(psignal->pdevdata->precord)
-						{
-							dbScanLock(psignal->pdevdata->precord);
-							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-							dbScanUnlock(psignal->pdevdata->precord);
-						}
-					}
-
-					/* The request that try to write processing image is successfully done */
-					for (	psignal = (Bx9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_wrt_outimg_list );
-							psignal; psignal = (Bx9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
-					{
-						psignal->pdevdata->err_code = ERR_CODE_NO_ERROR; /* no error */
-						psignal->pdevdata->op_done = 1;	/* we successfully fulfill request */
-						if(psignal->pdevdata->precord)
-						{
-							dbScanLock(psignal->pdevdata->precord);
-							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-							dbScanUnlock(psignal->pdevdata->precord);
-						}
-					}
-
-					for (	psignal = (Bx9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_rd_outimg_list );
-							psignal; psignal = (Bx9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
-					{
-						(*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg);
-						/* err_code and op_done should be already set by process_fptr, we just callback */
-						if(psignal->pdevdata->precord)
-						{
-							dbScanLock(psignal->pdevdata->precord);
-							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-							dbScanUnlock(psignal->pdevdata->precord);
-						}
-					}
-				}/* sync ok */
-				else
-				{
-					/* sync processing image failed */
-					/* We will call back all requesters with err_code=ERR_CODE_SYNC_IMG_FAIL */
-				 	/* then we will make fatal error because we have no idea about output status */
-					/* The request that try to read processing image now is no way to run */
-					for (	psignal = (Bx9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_rd_inpimg_list );
-							psignal; psignal = (Bx9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
-					{
-						/* no need to call process_fptr because we don't know if input image is good */
-						psignal->pdevdata->err_code = ERR_CODE_SYNC_IMG_FAIL;
-						psignal->pdevdata->op_done = 1;	/* even we failed, but anyway we done */
-						if(psignal->pdevdata->precord)
-						{
-							dbScanLock(psignal->pdevdata->precord);
-							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-							dbScanUnlock(psignal->pdevdata->precord);
-						}
-					}
-
-					/* The request that try to write processing image failed */
-					for (	psignal = (Bx9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_wrt_outimg_list );
-							psignal; psignal = (Bx9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
-					{
-						psignal->pdevdata->err_code = ERR_CODE_SYNC_IMG_FAIL;
-						psignal->pdevdata->op_done = 1;	/* we successfully fulfill request */
-						if(psignal->pdevdata->precord)
-						{
-							dbScanLock(psignal->pdevdata->precord);
-							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-							dbScanUnlock(psignal->pdevdata->precord);
-						}
-					}
-
-					for (	psignal = (Bx9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_rd_outimg_list );
-							psignal; psignal = (Bx9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
-					{
-						/* no need to call process_fptr because we don't know if output image is good */
-						psignal->pdevdata->err_code = ERR_CODE_SYNC_IMG_FAIL;
-						psignal->pdevdata->op_done = 1;	/* even we failed, but anyway we done */
-						if(psignal->pdevdata->precord)
-						{
-							dbScanLock(psignal->pdevdata->precord);
-							(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-							dbScanUnlock(psignal->pdevdata->precord);
-						}
-					}
-
-					/* Fatal error happened, because we lost image sync */
-					errorHappened = max(OP_FATAL_ERROR, errorHappened);
-				}/* sync fail */
-
-				/* Deal with all else requests that don't need processing image */
-				for (	psignal = (Bx9000_SIGNAL *)ellFirst( (ELLLIST *) &sig_other_list );
-						psignal; psignal = (Bx9000_SIGNAL *)ellNext( (ELLNODE *) psignal ) )
-				{
-					status = (*(psignal->process_fptr))(psignal->pdevdata, psignal->pextra_arg);
-					/* err_code and op_done should be already set by process_fptr, we just callback */
-					if(psignal->pdevdata->precord)
-					{
-						dbScanLock(psignal->pdevdata->precord);
-						(*(psignal->pdevdata->precord->rset->process))(psignal->pdevdata->precord);
-						dbScanUnlock(psignal->pdevdata->precord);
-					}
-
-					if( status !=0 )
-						/* some error happened, but shouldn't be fatal */
-						errorHappened = max(OP_NORMAL_ERROR, errorHappened);
-				}
-
-				if(pcoupler->needReset)
-				{
-					/** finish me, we reset-delay-reinit here without couplerReady flag change */
-					/* reset fail will be considered as fatal error and cause coupler not ready */
-					/* then external reinit will cause record re-output */
-				}
-			}/* coupler is ready, do real operation */
-		}/* process requests */
-
-		/* We get here because timeout or request processing finished */
-		/* We will deal with link and reset issue here */
-		if(!pcoupler->couplerReady)
-		{
-			UINT32 need_reinit = 0;
-			epicsMutexLock(pcoupler->mutex_lock);
-			epicsTimeGetCurrent(&curTS);
-			if ( epicsTimeDiffInSeconds(&curTS, &(pcoupler->time_last_try)) >= OPTHREAD_RECON_INTVL )
-				need_reinit = 1;
-			epicsMutexUnlock(pcoupler->mutex_lock);
-			if ( need_reinit )
-				Bx9000_Coupler_Init(pcoupler);
-		}/* Coupler not ready */
-		else
-		{/* Coupler is ready, but some error happened */
-			if(errorHappened)
-			{/* if no erro, we don't have to do anything, because every thing is going well */
-				epicsMutexLock(pcoupler->mutex_lock);
-				
-				MBT_GetLinkStat(pcoupler->mbt_link, &linkStat);
-				MBT_GetRemoteErrCnt(pcoupler->mbt_link, &exceptCnt);
-
-				if(linkStat == LINK_OK && exceptCnt >= N_EXC_TO_RST)
-				{	/* We have TCP link, the error is because we got too many exception PDUs,
-					 * let's reset coupler, no matter if we have fatal error
-					 */
-					Bx9000_MBT_Reset(pcoupler->mbt_link, DFT_MBT_TOUT);
-					/* After reset, the link definitely lost, we force link close without mess up last error */
-					MBT_Disconnect(pcoupler->mbt_link, 0);
-					epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
-					
-					/* Of cause, coupler is not ready anymore */
-					pcoupler->couplerReady = 0;
-				}
-				else if(linkStat == LINK_OK && exceptCnt < N_EXC_TO_RST)
-				{	/* either link ok with exception PDU but not so many */
-					if(errorHappened >= OP_FATAL_ERROR )
-					{	/* Fatal error happened, such as we lost sync of processing image */
-						/* We force link close without mess up last error */
-						MBT_Disconnect(pcoupler->mbt_link, 0);
-						epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
-						
-						/* coupler is not ready anymore */
-						pcoupler->couplerReady = 0;
-					}
-					/* or else, no fatal error, let it keep going */
-				}
-				else
-				{/* link lost, turn coupler ready to FALSE, no matter fatal error or not */
-					epicsTimeGetCurrent( &(pcoupler->time_lost_conn) );
-					
-					/* Of cause, coupler is not ready anymore */
-					pcoupler->couplerReady = 0;
-				}
-				epicsMutexUnlock(pcoupler->mutex_lock);
-			}/* Error happened */
-		}/* coupler ready but we got errorHappened */
-	}/* infinite loop */
-
-	/* We should never get here */
-	return 0;
-}
-
-/* This function will be called by all device support */
-/* The memory for Bx9000_SIGNAL,Bx9000_SIGPTR,Bx9000_DEVDATA will be malloced inside */
-int	Bx9000_Signal_Init(
-	dbCommon		*	precord,
-	E_EPICS_RTYPE		epics_rtype,
-	char			*	ioString,
-	E_BUSTERM_TYPE		bttype,
-	Bx9000_FPTR			process_fptr,
-	void			*	pextra_arg	)
-{
-	SINT32	count;
-	char	cplrname[MAX_CA_STRING_SIZE];
-	char	func[MAX_CA_STRING_SIZE];
-	SINT32	slotnum;
-
-	Bx9000_COUPLER		* pcoupler;
-	BUSTERM_SIG_DEF		* psig_def;
-
-	Bx9000_DEVSUPDATA	* pdevsupdata;
-	Bx9000_SIGPTR		* psigptr;
-	Bx9000_SIGNAL		* psignal;
-
-	if(precord == NULL)
-	{
-		errlogPrintf("Bx9000_Signal_Init Error: No legal record pointer!\n");
-		return -1;
-	}
-
-	if(ioString == NULL)
-	{
-		errlogPrintf("Bx9000_Signal_Init %s Error: Invalid ioString pointer!\n", precord->name );
-		return -1;
-	}
-
-	count = sscanf(ioString, "%[^:]:%i:%[^:]", cplrname, &slotnum, func);
-	if (count != 3)
-	{
-		errlogPrintf("Bx9000_Signal_Init %s Error: INP/OUT string %s format is illegal!\n", precord->name, ioString);
-		return -1;
-	}
-
-	pcoupler = Bx9000_Get_Coupler_By_Name(cplrname);
-	if(pcoupler == NULL)
-	{
-		errlogPrintf("Bx9000_Signal_Init %s Error: Can't find coupler %s!\n", precord->name, cplrname );
-		return -1;
-	}
-
-	if(bttype == BT_TYPE_Bx9000 && slotnum != 0)
-	{
-		errlogPrintf("Bx9000_Signal_Init %s Error: Coupler %s must be in slot 0!\n", precord->name, cplrname );
-		return -1;
-	}
-
-	if(bttype != BT_TYPE_Bx9000 && (slotnum <= 0 || slotnum > MAX_NUM_OF_BUSTERM) )
-	{
-		errlogPrintf(	"Bx9000_Signal_Init %s Error: Slot %d is invalid. Terminal slots must be <1-%d>!\n",
-						precord->name, slotnum, MAX_NUM_OF_BUSTERM );
-		return -1;
-	}
-
-	if( pcoupler->installedBusTerm[slotnum].pbusterm_img_def->busterm_type != bttype)
-	{
-		errlogPrintf(	"Bx9000_Signal_Init %s Error: Coupler %s slot %d is not KL_%d!\n",
-						precord->name, cplrname, slotnum, bttype );
-		return -1;
-	}
-
-	/* This bttype is already installed, it must have definition, no necessary to check bt_def */
-
-	psig_def = Bx9000_Get_SigDef_By_Ename(bttype, func, epics_rtype);
-	if(psig_def == NULL)
-	{
-		errlogPrintf(	"Bx9000_Signal_Init %s Error: Terminal type %d does not support %s!\n",
-						precord->name, bttype, func );
-		return -1;
-	}
-
-	/* finish me, check if sig_def is within the image range */
-	if( process_fptr == NULL )
-	{
-		errlogPrintf(	"Bx9000_Signal_Init %s Error: Invalid process function ptr!\n",
-						precord->name );
-		return -1;
-	}
-
-	pdevsupdata = (Bx9000_DEVSUPDATA *)malloc(sizeof(Bx9000_DEVSUPDATA));
-	if(pdevsupdata == NULL)
-	{
-		errlogPrintf(	"Bx9000_Signal_Init %s Error: Failed to malloc %zu bytes!\n",
-						precord->name, sizeof(Bx9000_DEVSUPDATA) );
-		return -1;
-	}
-
-	memset( (char *)pdevsupdata, 0, sizeof(Bx9000_DEVSUPDATA) );
-
-	psigptr = &(pdevsupdata->sigptr);
-	psigptr->psignal = &(pdevsupdata->signal);
-
-	psignal = &(pdevsupdata->signal);
-	psignal->process_fptr = process_fptr;
-	psignal->pextra_arg = pextra_arg;
-        psignal->pdevdata = &(pdevsupdata->devdata);
-
-	psignal->pdevdata->pbusterm_sig_def = psig_def;
-	psignal->pdevdata->pcoupler = pcoupler;
-	psignal->pdevdata->precord = precord;
-	psignal->pdevdata->slot = slotnum;
-	psignal->pdevdata->err_code = ERR_CODE_NO_ERROR;
-	psignal->pdevdata->op_done = 0;
-
-	epicsMutexLock(pcoupler->mutex_lock);
-	ellAdd( (ELLLIST *) &(pcoupler->sigptr_list), (ELLNODE *)psigptr );
-	epicsMutexUnlock(pcoupler->mutex_lock);
-	precord->dpvt = (void *)psignal;
-	return 0;
-}
-
-/* This is the default process function, it deals with coupler reg/Mreg and terminal reg */
-/* For image based operation, it supports single bit op and single word op only */
-/* For the op needs more words or bits, it will put ERR_CODE_PROC_NOT_SUPT, you need your own function */
-int	Bx9000_Dft_ProcFunc(Bx9000_DEVDATA * pdevdata, void * pextra_arg)
-{
-	/* SINT32	status; */
-	Bx9000_COUPLER	* pcoupler;
-	UINT32	temp;
-	UINT16	tmp_woffset, tmp_mask;
-	/* UINT16	CS_Roffset, CS_Woffset; */
-
-	if(pdevdata == NULL)
-	{
-		errlogPrintf("No pdevdata passed to default process function!\n");
-		return -1;
-	}
-
-	pcoupler = pdevdata->pcoupler;	/* just for convenience */
-
-	if(!pcoupler->couplerReady)
-		return -1;
-
-	/* finish me, check image range */
-	/* if we use semaphore to protect everything, that might be too heavy */
-	/* We currently protect the write of digital output image */
-	switch(pdevdata->pbusterm_sig_def->busterm_optype)
-	{
-	case BT_OPTYPE_READ_INPUT_CIMG:
-		if( pdevdata->pbusterm_sig_def->args.cimg_rw.nwords != 1 )
-		{
-			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
-			pdevdata->op_done = 1;
-			return -1;
-		}
-
-		pdevdata->value		= pcoupler->inputImage[	pcoupler->installedBusTerm[pdevdata->slot].complex_in_wordoffset
-												+	pdevdata->pbusterm_sig_def->args.cimg_rw.woffset	];
-		pdevdata->err_code	= ERR_CODE_NO_ERROR;
-		pdevdata->op_done	= 1;
-		break;
-	case BT_OPTYPE_READ_OUTPUT_CIMG:
-		if( pdevdata->pbusterm_sig_def->args.cimg_rw.nwords != 1 )
-		{
-			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
-			pdevdata->op_done = 1;
-			return -1;
-		}
-
-		pdevdata->value = pcoupler->outputImage[	pcoupler->installedBusTerm[pdevdata->slot].complex_out_wordoffset
-												+	pdevdata->pbusterm_sig_def->args.cimg_rw.woffset	];
-		pdevdata->err_code = ERR_CODE_NO_ERROR;
-		pdevdata->op_done = 1;
-		break;
-	case BT_OPTYPE_WRITE_OUTPUT_CIMG:
-		if( pdevdata->pbusterm_sig_def->args.cimg_rw.nwords != 1 )
-		{
-			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
-			pdevdata->op_done = 1;
-			return -1;
-		}
-
-		pcoupler->outputImage[	pcoupler->installedBusTerm[pdevdata->slot].complex_out_wordoffset
-							+	pdevdata->pbusterm_sig_def->args.cimg_rw.woffset ] = pdevdata->value;
-		pdevdata->err_code = ERR_CODE_NO_ERROR;
-		/*pdevdata->op_done = 1;*/	/* for write output image, op_done will be set by operation thread */
-		break;
-	case BT_OPTYPE_READ_INPUT_DIMG:
-		if( pdevdata->pbusterm_sig_def->args.dimg_rw.nbits != 1 )
-		{
-			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
-			pdevdata->op_done = 1;
-			return -1;
-		}
-
-		temp	=	pcoupler->installedBusTerm[pdevdata->slot].digital_in_bitoffset
-				+	pdevdata->pbusterm_sig_def->args.dimg_rw.boffset;
-		tmp_woffset = temp / 16;
-		/* tmp_mask = 0x1 << (temp%16); */
-		pdevdata->value = ( pcoupler->inputImage[tmp_woffset] >> (temp%16) ) & 0x1;
-		pdevdata->err_code = ERR_CODE_NO_ERROR;
-		pdevdata->op_done = 1;
-		break;
-	case BT_OPTYPE_READ_OUTPUT_DIMG:
-		if( pdevdata->pbusterm_sig_def->args.dimg_rw.nbits != 1 )
-		{
-			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
-			pdevdata->op_done = 1;
-			return -1;
-		}
-
-		temp	=	pcoupler->installedBusTerm[pdevdata->slot].digital_out_bitoffset
-				+	pdevdata->pbusterm_sig_def->args.dimg_rw.boffset;
-		tmp_woffset = temp / 16;
-		/* tmp_mask = 0x1 << (temp%16); */
-		pdevdata->value = ( pcoupler->outputImage[tmp_woffset] >> (temp%16) ) & 0x1;
-		pdevdata->err_code = ERR_CODE_NO_ERROR;
-		pdevdata->op_done = 1;
-		break;
-	case BT_OPTYPE_WRITE_OUTPUT_DIMG:
-		if( pdevdata->pbusterm_sig_def->args.dimg_rw.nbits != 1 )
-		{
-			pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
-			pdevdata->op_done = 1;
-			return -1;
-		}
-
-		temp	=	pcoupler->installedBusTerm[pdevdata->slot].digital_out_bitoffset
-				+	pdevdata->pbusterm_sig_def->args.dimg_rw.boffset;
-		tmp_woffset = temp / 16;
-		tmp_mask = 0x1 << (temp%16);
-		epicsMutexLock(pcoupler->mutex_lock);
-		pcoupler->outputImage[tmp_woffset] = (	pdevdata->value
-											?	( pcoupler->outputImage[tmp_woffset] | tmp_mask )
-											:	( pcoupler->outputImage[tmp_woffset] & (~tmp_mask) ) );
-		epicsMutexUnlock(pcoupler->mutex_lock);
-		pdevdata->err_code = ERR_CODE_NO_ERROR;
-		/*pdevdata->op_done = 1;*/      /* for write output image, op_done will be set by operation thread */
-		break;
-	/* finish me */
-	case BT_OPTYPE_READ_CPLR_MREG:
-		break;
-	case BT_OPTYPE_WRITE_CPLR_MREG:
-		break;
-	case BT_OPTYPE_READ_CPLR_REG:
-		break;
-	case BT_OPTYPE_WRITE_CPLR_REG:
-		break;
-	case BT_OPTYPE_READ_TERM_REG:
-		break;
-	case BT_OPTYPE_WRITE_TERM_REG:
-		break;
-	case BT_OPTYPE_CPLR_DIAG:
-		break;
-	default:
-		pdevdata->err_code = ERR_CODE_PROC_NOT_SUPT;
-		pdevdata->op_done = 1;
-		return -1;
-	}
-	return 0;
-}
-
-/* This is the function will be called in device support init function to init output record */
-int	Bx9000_Dft_OutInit(Bx9000_SIGNAL * psignal)
-{
-        /* SINT32  status; */
-	Bx9000_DEVDATA	* pdevdata;
-	Bx9000_COUPLER  * pcoupler;
-	UINT32  temp;
-	UINT16  tmp_woffset/*, tmp_mask*/;
-	/* UINT16  CS_Roffset, CS_Woffset; */
-
-	if(psignal == NULL)
-	{
-		errlogPrintf("No psignal passed to default OutInit function!\n");
-		return -1;
-	}
-
-	pdevdata = psignal->pdevdata;
-	pcoupler = pdevdata->pcoupler;  /* just for convenience */
-
-	if(!pcoupler->couplerReady)
-		return -1;
-
-	/* finish me, check image range */
-	switch(pdevdata->pbusterm_sig_def->busterm_optype)
-	{
-	case BT_OPTYPE_WRITE_OUTPUT_CIMG:
-		if( pdevdata->pbusterm_sig_def->args.cimg_rw.nwords != 1 )
-		{
-			pdevdata->err_code = ERR_CODE_OUTINIT_NOT_SUPT;
-			pdevdata->op_done = 1;
-			return -1;
-		}
-
-		pdevdata->value	=	pcoupler->outputImage[	pcoupler->installedBusTerm[pdevdata->slot].complex_out_wordoffset
-												+	pdevdata->pbusterm_sig_def->args.cimg_rw.woffset ];
-		pdevdata->err_code = ERR_CODE_NO_ERROR;
-		pdevdata->op_done = 1;
-		break;
-	case BT_OPTYPE_WRITE_OUTPUT_DIMG:
-		if( pdevdata->pbusterm_sig_def->args.dimg_rw.nbits != 1 )
-		{
-			pdevdata->err_code = ERR_CODE_OUTINIT_NOT_SUPT;
-			pdevdata->op_done = 1;
-			return -1;
-		}
-
-		temp	=	pcoupler->installedBusTerm[pdevdata->slot].digital_out_bitoffset
-				+	pdevdata->pbusterm_sig_def->args.dimg_rw.boffset;
-		tmp_woffset = temp / 16;
-		/* tmp_mask = 0x1 << (temp%16); */
-		pdevdata->value = ( pcoupler->outputImage[tmp_woffset] >> (temp%16) ) & 0x1;
-		pdevdata->err_code = ERR_CODE_NO_ERROR;
-		pdevdata->op_done = 1;
-		break;
-	/* finish me */
-	case BT_OPTYPE_WRITE_CPLR_MREG:
-		break;
-	case BT_OPTYPE_WRITE_CPLR_REG:
-		break;
-	case BT_OPTYPE_WRITE_TERM_REG:
-		break;
-	case BT_OPTYPE_READ_INPUT_CIMG:
-	case BT_OPTYPE_READ_OUTPUT_CIMG:
-	case BT_OPTYPE_READ_INPUT_DIMG:
-	case BT_OPTYPE_READ_OUTPUT_DIMG:
-	case BT_OPTYPE_READ_CPLR_MREG:
-	case BT_OPTYPE_READ_CPLR_REG:
-	case BT_OPTYPE_READ_TERM_REG:
-	case BT_OPTYPE_CPLR_DIAG:
-	default:
-	/* There is no need to do output init for this kind op type */
-		pdevdata->err_code = ERR_CODE_OUTINIT_NOT_SUPT;
-		pdevdata->op_done = 1;
-		return -1;
-	}
-	return 0;
-}
-
-/**************************************************************************************************/
-/* Here we supply the driver report function for epics                                            */
-/**************************************************************************************************/
-static	long    Bx9000_MBT_EPICS_Init();
-static	long    Bx9000_MBT_EPICS_Report(int level);
-
-const struct drvet drvBx9000_MBT = {2,                              /*2 Table Entries */
-			     (DRVSUPFUN) Bx9000_MBT_EPICS_Report,	/* Driver Report Routine */
-			     (DRVSUPFUN) Bx9000_MBT_EPICS_Init};	/* Driver Initialization Routine */
-
-epicsExportAddress(drvet,drvBx9000_MBT);
-
-/* implementation */
-static	long    Bx9000_MBT_EPICS_Init()
-{
-	return	Bx9000_Couplers_Init_Once();
-}
-
-static	long    Bx9000_MBT_EPICS_Report(int level)
-{
-	Bx9000_COUPLER	* pcoupler;
-
-	printf("\n"Bx9000_MBT_DRV_VER_STRING"\n\n");
-	if(!cplr_list_inited)
-	{
-		printf("Bx9000_MBT_EPICS_Report Error: Coupler linked list is not initialized!\n\n");
-		return 0;
-	}
-
-	if(level > 0)	/* we only get into link list for detail when user wants */
-	{
-		for (	pcoupler=(Bx9000_COUPLER *)ellFirst((ELLLIST *)&bx9000_cplr_list);
-				pcoupler; pcoupler = (Bx9000_COUPLER *)ellNext((ELLNODE *)pcoupler) )
-		{
-			printf("\tBeckhoff coupler %s is installed\n", MBT_GetName(pcoupler->mbt_link));
-			if(level > 1)
-				printf(	"\tcouplerID is %s, coupler is %s\n\n",
-						pcoupler->couplerID, (pcoupler->couplerReady)?"ready":"not ready");
-		}
-	}
-
-	return 0;
-}
-
diff --git a/Bx9000_MBTApp/src/drvBx9000_MBTRegister.cpp b/Bx9000_MBTApp/src/drvBx9000_MBTRegister.cpp
deleted file mode 100644
index b8db2de..0000000
--- a/Bx9000_MBTApp/src/drvBx9000_MBTRegister.cpp
+++ /dev/null
@@ -1,85 +0,0 @@
-/* drvBx9000_MBTRegister.cpp */
-
-#include <stddef.h>
-#include <string.h>
-#include <stdlib.h>
-#include <stdio.h>
-
-#include "iocsh.h"
-#include "Bx9000_MBT_Common.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif	/* __cplusplus */
-
-extern SINT32 Bx9000_DRV_DEBUG;
-extern SINT32 Bx9000_DEV_DEBUG;
-
-static const iocshArg Bx9000_DRV_DEBUGArg0 = {"value", iocshArgInt};
-static const iocshArg *const Bx9000_DRV_DEBUGArgs[1] = {&Bx9000_DRV_DEBUGArg0};
-static const iocshFuncDef Bx9000_DRV_DEBUGDef = {"Bx9000_DRV_DEBUG", 1, Bx9000_DRV_DEBUGArgs};
-static void Bx9000_DRV_DEBUGCall(const iocshArgBuf * args)
-{
-	Bx9000_DRV_DEBUG = args[0].ival;
-}
- 
-static const iocshArg Bx9000_DEV_DEBUGArg0 = {"value", iocshArgInt};
-static const iocshArg *const Bx9000_DEV_DEBUGArgs[1] = {&Bx9000_DEV_DEBUGArg0};
-static const iocshFuncDef Bx9000_DEV_DEBUGDef = {"Bx9000_DEV_DEBUG", 1, Bx9000_DEV_DEBUGArgs};
-static void Bx9000_DEV_DEBUGCall(const iocshArgBuf * args)
-{
-	Bx9000_DEV_DEBUG = args[0].ival;
-}
-
-static const iocshArg Bx9000_Coupler_AddArg0 = {"cplrname", iocshArgString};
-static const iocshArg Bx9000_Coupler_AddArg1 = {"ipaddr", iocshArgString};
-static const iocshArg Bx9000_Coupler_AddArg2 = {"init_string", iocshArgString};
-static const iocshArg * const Bx9000_Coupler_AddArgs[3] = {&Bx9000_Coupler_AddArg0, &Bx9000_Coupler_AddArg1, &Bx9000_Coupler_AddArg2};
-static const iocshFuncDef Bx9000_Coupler_AddDef = {"Bx9000_Coupler_Add", 3, Bx9000_Coupler_AddArgs};
-static void Bx9000_Coupler_AddCall(const iocshArgBuf * args)
-{
-	Bx9000_Coupler_Add( args[0].sval, args[1].sval, args[2].sval );
-}
-
-static const iocshArg Bx9000_Terminal_AddArg0 = {"cplrname", iocshArgString};
-static const iocshArg Bx9000_Terminal_AddArg1 = {"slot", iocshArgInt};
-static const iocshArg Bx9000_Terminal_AddArg2 = {"btname", iocshArgString};
-static const iocshArg Bx9000_Terminal_AddArg3 = {"init_string", iocshArgString};
-static const iocshArg * const Bx9000_Terminal_AddArgs[4] = {&Bx9000_Terminal_AddArg0, &Bx9000_Terminal_AddArg1, &Bx9000_Terminal_AddArg2, &Bx9000_Terminal_AddArg3};
-static const iocshFuncDef Bx9000_Terminal_AddDef = {"Bx9000_Terminal_Add", 4, Bx9000_Terminal_AddArgs};
-static void Bx9000_Terminal_AddCall(const iocshArgBuf * args)
-{
-	Bx9000_Terminal_Add( args[0].sval, (UINT16)args[1].ival, args[2].sval, args[3].sval );
-}
-
-void drvBx9000_MBT_Register()
-{
-	static int firstTime = 1;
-	if  (!firstTime)
-	    return;
-	firstTime = 0;
-	iocshRegister(&Bx9000_DRV_DEBUGDef, Bx9000_DRV_DEBUGCall);
-	iocshRegister(&Bx9000_DEV_DEBUGDef, Bx9000_DEV_DEBUGCall);
-	iocshRegister(&Bx9000_Coupler_AddDef, Bx9000_Coupler_AddCall);
-	iocshRegister(&Bx9000_Terminal_AddDef, Bx9000_Terminal_AddCall);
-}
-
-epicsExportRegistrar(drvBx9000_MBT_Register);
-
-#ifdef __cplusplus
-}
-#endif	/* __cplusplus */
-
-/*
- * Register commands on application startup
- * In the funture we might change this to xxx = drvBx9000_MBT_Register(); to guarantee link
- */
-class drvBx9000_MBT_iocshReg
-{
-public:
-    drvBx9000_MBT_iocshReg()
-	{
-		drvBx9000_MBT_Register();
-    }
-};
-static drvBx9000_MBT_iocshReg drvBx9000_MBT_iocshRegObj;
diff --git a/Bx9000_MBTApp/srcDisplay/Bx9000Info-lcls.edl b/Bx9000_MBTApp/srcDisplay/Bx9000Info-lcls.edl
deleted file mode 100644
index 85a7a2f..0000000
--- a/Bx9000_MBTApp/srcDisplay/Bx9000Info-lcls.edl
+++ /dev/null
@@ -1,929 +0,0 @@
-4 0 1
-beginScreenProperties
-major 4
-minor 0
-release 1
-x 613
-y 162
-w 620
-h 450
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-ctlFont "courier-bold-r-14.0"
-ctlFontAlign "right"
-btnFont "courier-medium-r-8.0"
-fgColor index 14
-bgColor index 8
-textColor index 10
-ctlFgColor1 index 25
-ctlFgColor2 index 30
-ctlBgColor1 index 5
-ctlBgColor2 index 10
-topShadowColor index 5
-botShadowColor index 10
-title "Temperature - Beckhoff BX9000 Coupler Diagnostic"
-showGrid
-snapToGrid
-pvType "EPICS"
-endScreenProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 10
-y 80
-w 600
-h 350
-lineColor index 3
-fill
-fillColor index 3
-endObjectProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 80
-y 140
-w 410
-h 60
-lineColor index 29
-fillColor index 5
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 0
-y 0
-w 620
-h 40
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 56
-value {
-  "Beckhoff Bx9000 Diagnostic"
-  "Coupler $(apc)    $(apc):LOCATION"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 10
-y 60
-w 170
-h 20
-font "helvetica-bold-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-value {
-  "Bx9000 Test & Maintenance"
-}
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 20
-y 110
-w 150
-h 20
-controlPv "$(apc):CPLRNAME"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 20
-y 90
-w 80
-h 14
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Coupler Name"
-}
-autoSize
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 190
-y 110
-w 150
-h 20
-controlPv "$(apc):CPLRIPADDR"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 190
-y 90
-w 109
-h 14
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Coupler IP Address"
-}
-autoSize
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 550
-y 10
-w 48
-h 24
-fgColor index 14
-bgColor index 3
-topShadowColor index 1
-botShadowColor index 11
-label "Exit"
-font "helvetica-medium-r-12.0"
-3d
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 360
-y 90
-w 60
-h 14
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Coupler ID"
-}
-autoSize
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 360
-y 110
-w 150
-h 20
-controlPv "$(apc):CPLRID"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 10
-y 210
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Complex Out Words"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 10
-y 240
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Complex In Words"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 10
-y 270
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Digital In Bits"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 10
-y 300
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Digital Out Bits"
-}
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 140
-y 210
-w 150
-h 20
-controlPv "$(apc):CPLRCOUTWDS"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 140
-y 240
-w 150
-h 20
-controlPv "$(apc):CPLRCINWDS"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 140
-y 300
-w 150
-h 20
-controlPv "$(apc):CPLRDINBITS"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 140
-y 270
-w 150
-h 20
-controlPv "$(apc):CPLRDOUTBITS"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 450
-y 240
-w 150
-h 20
-controlPv "$(apc):CPLROPTHRDNAME"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 320
-y 240
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Op Thread ID"
-}
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 450
-y 210
-w 150
-h 20
-controlPv "$(apc):CPLROPTHRDNAME"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 320
-y 210
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Op Thread Name"
-}
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 90
-y 170
-w 150
-h 20
-controlPv "$(apc):CPLRLINKSTAT"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 90
-y 150
-w 61
-h 14
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 29
-bgColor index 5
-useDisplayBg
-value {
-  "Link Status"
-}
-autoSize
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 320
-y 170
-w 150
-h 20
-controlPv "$(apc):CPLRREADY"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 320
-y 150
-w 82
-h 14
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 29
-bgColor index 5
-useDisplayBg
-value {
-  "Coupler Status"
-}
-autoSize
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 10
-y 340
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Disconnect Time"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 10
-y 370
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Last Retry Time"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 10
-y 400
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Connect Time"
-}
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 140
-y 340
-w 200
-h 20
-controlPv "$(apc):CPLRTLOSTCONN"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 140
-y 370
-w 200
-h 20
-controlPv "$(apc):CPLRTLASTTRY"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 140
-y 400
-w 200
-h 20
-controlPv "$(apc):CPLRTSETCONN"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 450
-y 400
-w 150
-h 20
-controlPv "$(apc):CPLRNOFPKTS"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 320
-y 400
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "# Packets"
-}
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 450
-y 370
-w 150
-h 20
-controlPv "$(apc):CPLRNOFEXCP"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 320
-y 370
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "# Errors"
-}
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 450
-y 340
-w 150
-h 20
-controlPv "$(apc):CPLRNOFCONN"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 320
-y 340
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "# Connections"
-}
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 440
-y 430
-w 168
-h 16
-controlPv "SIOC:SYS0:AL00:TOD"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 10
-y 430
-w 120
-h 16
-controlPv "SIOC:SYS0:AL00:MODE"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 320
-y 270
-w 120
-h 20
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 5
-useDisplayBg
-value {
-  "Number of Signals"
-}
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 450
-y 270
-w 150
-h 20
-controlPv "$(apc):CPLRNOFSIGS"
-fgColor index 14
-fgAlarm
-bgColor index 6
-fill
-font "courier-medium-r-12.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
diff --git a/Bx9000_MBTApp/srcDisplay/Bx9000Info.edl b/Bx9000_MBTApp/srcDisplay/Bx9000Info.edl
deleted file mode 100644
index 3e8ba8f..0000000
--- a/Bx9000_MBTApp/srcDisplay/Bx9000Info.edl
+++ /dev/null
@@ -1,1082 +0,0 @@
-4 0 1
-beginScreenProperties
-major 4
-minor 0
-release 1
-x 100
-y 186
-w 900
-h 600
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-ctlFont "courier-bold-r-14.0"
-ctlFontAlign "right"
-btnFont "courier-medium-r-8.0"
-fgColor index 10
-bgColor index 3
-textColor index 10
-ctlFgColor1 index 25
-ctlFgColor2 index 30
-ctlBgColor1 index 5
-ctlBgColor2 index 10
-topShadowColor index 5
-botShadowColor index 10
-pvType "EPICS"
-endScreenProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 147
-y 9
-w 222
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 25
-bgColor index 5
-useDisplayBg
-value {
-  "Bx9000 Coupler Info Page"
-}
-autoSize
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 18
-y 350
-w 308
-h 61
-
-beginGroup
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 18
-y 375
-w 308
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrTLostConn"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 66
-y 350
-w 213
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Time we lost connection:"
-}
-autoSize
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 44
-y 41
-w 196
-h 59
-
-beginGroup
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 44
-y 64
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrName"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 81
-y 41
-w 122
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Coupler Name"
-}
-autoSize
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 342
-y 41
-w 196
-h 59
-
-beginGroup
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 342
-y 64
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrIPAddr"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 374
-y 41
-w 132
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Coupler IPAddr"
-}
-autoSize
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 639
-y 41
-w 196
-h 59
-
-beginGroup
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 639
-y 64
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrID"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 691
-y 41
-w 92
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Coupler ID"
-}
-autoSize
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 16
-y 423
-w 313
-h 61
-
-beginGroup
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 16
-y 423
-w 313
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Last time we tried to set connection:"
-}
-autoSize
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 18
-y 448
-w 308
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrTLastTry"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 18
-y 496
-w 308
-h 61
-
-beginGroup
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 57
-y 496
-w 230
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Time we setup connection:"
-}
-autoSize
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 18
-y 521
-w 308
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrTSetConn"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 44
-y 121
-w 391
-h 152
-
-beginGroup
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 44
-y 247
-w 124
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Digital In Bits:"
-}
-autoSize
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 44
-y 207
-w 141
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Digital Out Bits:"
-}
-autoSize
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 44
-y 167
-w 163
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Complex In Words:"
-}
-autoSize
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 44
-y 127
-w 180
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Complex Out Words:"
-}
-autoSize
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 239
-y 237
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrDinBits"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 239
-y 199
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrDoutBits"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 239
-y 160
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrCinWds"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 239
-y 121
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrCoutWds"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 482
-y 119
-w 353
-h 154
-
-beginGroup
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 482
-y 231
-w 123
-h 42
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "# of records "
-  "talking to HW:"
-}
-autoSize
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 482
-y 178
-w 121
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Op Thread ID:"
-}
-autoSize
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 482
-y 125
-w 151
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Op Thread Name:"
-}
-autoSize
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 639
-y 233
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrNofSigs"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 639
-y 171
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrOpThrdID"
-displayMode "hex"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 639
-y 119
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrOpThrdName"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 370
-y 423
-w 196
-h 60
-
-beginGroup
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 370
-y 447
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrNofExcp"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 399
-y 423
-w 139
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "# of exceptions:"
-}
-autoSize
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 370
-y 351
-w 196
-h 60
-
-beginGroup
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 370
-y 375
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrNofConn"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 386
-y 351
-w 164
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "Nth of Connection:"
-}
-autoSize
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 370
-y 497
-w 196
-h 60
-
-beginGroup
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 390
-y 497
-w 156
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 45
-bgColor index 5
-useDisplayBg
-value {
-  "# of packets sent:"
-}
-autoSize
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 370
-y 521
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrNofPkts"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 641
-y 351
-w 196
-h 60
-
-beginGroup
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 675
-y 351
-w 129
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 126
-bgColor index 5
-useDisplayBg
-value {
-  "MBT Link Stat:"
-}
-autoSize
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 641
-y 375
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrLinkStat"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 642
-y 424
-w 196
-h 58
-
-beginGroup
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 672
-y 424
-w 136
-h 21
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 20
-bgColor index 5
-useDisplayBg
-value {
-  "Coupler Status:"
-}
-autoSize
-lineWidth 2
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 642
-y 446
-w 196
-h 36
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrReady"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "helvetica-bold-r-16.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 644
-y 511
-w 192
-h 44
-fgColor index 45
-bgColor index 30
-topShadowColor index 5
-botShadowColor index 10
-label "EXIT"
-font "courier-medium-r-16.0"
-3d
-endObjectProperties
-
diff --git a/Bx9000_MBTApp/srcDisplay/Bx9000InstalledBTs.edl b/Bx9000_MBTApp/srcDisplay/Bx9000InstalledBTs.edl
deleted file mode 100644
index e958409..0000000
--- a/Bx9000_MBTApp/srcDisplay/Bx9000InstalledBTs.edl
+++ /dev/null
@@ -1,491 +0,0 @@
-4 0 1
-beginScreenProperties
-major 4
-minor 0
-release 1
-x 58
-y 504
-w 1132
-h 100
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-ctlFont "courier-bold-r-14.0"
-ctlFontAlign "right"
-btnFont "courier-medium-r-8.0"
-fgColor index 10
-bgColor index 3
-textColor index 10
-ctlFgColor1 index 25
-ctlFgColor2 index 30
-ctlBgColor1 index 5
-ctlBgColor2 index 10
-topShadowColor index 5
-botShadowColor index 10
-pvType "EPICS"
-endScreenProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 1023
-y 19
-w 88
-h 26
-fgColor index 45
-bgColor index 5
-topShadowColor index 5
-botShadowColor index 10
-label "EXIT"
-font "courier-medium-r-16.0"
-3d
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 14
-y 21
-w 1103
-h 65
-
-beginGroup
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 14
-y 56
-w 1103
-h 30
-
-beginGroup
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 934
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot14"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 868
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot13"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 803
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot12"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 737
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot11"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 671
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot10"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 606
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot9"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 540
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot8"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 474
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot7"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 409
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot6"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 343
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot5"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 277
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot4"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 212
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot3"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 146
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot2"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 80
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot1"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 14
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot0"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 1000
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot15"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-# (RegTextupdate)
-object RegTextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 1065
-y 56
-w 52
-h 30
-controlPv "$(S)_$(SS):$(DVC)$(N)$(DI):CplrBTSlot16"
-fgColor index 25
-fgAlarm
-bgColor index 5
-fill
-font "courier-bold-r-14.0"
-fontAlign "center"
-endObjectProperties
-
-# Additional properties
-beginObjectProperties
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 364
-y 21
-w 402
-h 19
-font "helvetica-bold-i-18.0"
-fontAlign "center"
-fgColor index 10
-bgColor index 5
-useDisplayBg
-value {
-  "$(S)_$(SS):$(DVC)$(N)$(DI) Installed Bus Terminals"
-}
-autoSize
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
diff --git a/Bx9000_MBTApp/srcDisplay/Bx9000_analog_2chan.edl b/Bx9000_MBTApp/srcDisplay/Bx9000_analog_2chan.edl
deleted file mode 100644
index cbc095b..0000000
--- a/Bx9000_MBTApp/srcDisplay/Bx9000_analog_2chan.edl
+++ /dev/null
@@ -1,677 +0,0 @@
-4 0 1
-beginScreenProperties
-major 4
-minor 0
-release 1
-x 140
-y 51
-w 780
-h 250
-font "helvetica-medium-r-10.0"
-ctlFont "helvetica-medium-r-10.0"
-btnFont "helvetica-medium-r-10.0"
-fgColor index 14
-bgColor index 7
-textColor index 14
-ctlFgColor1 index 25
-ctlFgColor2 index 18
-ctlBgColor1 index 4
-ctlBgColor2 index 4
-topShadowColor index 1
-botShadowColor index 11
-title "Analog - Analog Diagnostic - $(apc)"
-showGrid
-snapToGrid
-gridSize 4
-endScreenProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 8
-y 64
-w 760
-h 140
-lineColor index 3
-fill
-fillColor index 3
-endObjectProperties
-
-# (Related Display)
-object relatedDisplayClass
-beginObjectProperties
-major 4
-minor 2
-release 0
-x 216
-y 108
-w 120
-h 16
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-font "helvetica-medium-r-10.0"
-invisible
-numPvs 4
-numDsps 1
-displayFileName {
-  0 "analog_limits"
-}
-setPosition {
-  0 "button"
-}
-symbols {
-  0 "dev=$(apc):M$(m)_CH1_EGU"
-}
-endObjectProperties
-
-# (Related Display)
-object relatedDisplayClass
-beginObjectProperties
-major 4
-minor 2
-release 0
-x 216
-y 136
-w 124
-h 20
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-font "helvetica-medium-r-10.0"
-invisible
-numPvs 4
-numDsps 1
-displayFileName {
-  0 "analog_limits"
-}
-setPosition {
-  0 "button"
-}
-symbols {
-  0 "dev=$(apc):M$(m)_CH1_EGU"
-}
-endObjectProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 0
-y 0
-w 912
-h 40
-lineColor index 54
-fill
-fillColor index 54
-lineWidth 0
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 848
-y 8
-w 48
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-label "Exit"
-font "helvetica-medium-r-12.0"
-3d
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 0
-w 336
-h 40
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 53
-useDisplayBg
-value {
-  "Analog Diagnostic"
-  "$(apc)  Module $(m)    "
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 56
-w 105
-h 14
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-value {
-  " Analog Channels "
-}
-autoSize
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 344
-y 80
-w 144
-h 16
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Channel Name"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 600
-y 208
-w 168
-h 16
-controlPv "SIOC:SYS0:AL00:TOD"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 8
-y 208
-w 120
-h 16
-controlPv "SIOC:SYS0:AL00:MODE"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-endObjectProperties
-
-# (Related Display)
-object relatedDisplayClass
-beginObjectProperties
-major 4
-minor 2
-release 0
-x 616
-y 8
-w 96
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-font "helvetica-medium-r-12.0"
-buttonLabel "Home Screen..."
-numPvs 4
-numDsps 1
-displayFileName {
-  0 "lcls_main"
-}
-setPosition {
-  0 "parentWindow"
-}
-replaceSymbols {
-  0 1
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 208
-y 80
-w 120
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "EGU"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 88
-y 80
-w 120
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Raw (Volts)"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 80
-w 80
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Channel"
-}
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 720
-y 8
-w 48
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-label "Exit"
-font "helvetica-medium-r-12.0"
-3d
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 552
-y 80
-w 144
-h 16
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Description"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 104
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH1_EGU.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 104
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "1"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 136
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH2_EGU.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 136
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "2"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 552
-y 136
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH2_EGU.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 552
-y 104
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH1_EGU.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Text Control)
-object activeXTextDspClass
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 216
-y 136
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH2_EGU"
-format "decimal"
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-fgAlarm
-bgColor index 4
-limitsFromDb
-nullColor index 4
-nullCondition "nullEq0"
-showUnits
-useAlarmBorder
-newPos
-objType "monitors"
-noExecuteClipMask
-endObjectProperties
-
-# (Text Control)
-object activeXTextDspClass
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 216
-y 104
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH1_EGU"
-format "decimal"
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-fgAlarm
-bgColor index 4
-limitsFromDb
-nullColor index 4
-nullCondition "nullEq0"
-showUnits
-useAlarmBorder
-newPos
-objType "monitors"
-noExecuteClipMask
-endObjectProperties
-
-# (Text Control)
-object activeXTextDspClass
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 88
-y 136
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH2_SIG"
-format "decimal"
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-fgAlarm
-bgColor index 4
-limitsFromDb
-nullColor index 4
-nullCondition "nullEq0"
-useAlarmBorder
-newPos
-objType "monitors"
-noExecuteClipMask
-endObjectProperties
-
-# (Text Control)
-object activeXTextDspClass
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 88
-y 104
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH1_SIG"
-format "decimal"
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-fgAlarm
-bgColor index 4
-limitsFromDb
-nullColor index 4
-nullCondition "nullEq0"
-useAlarmBorder
-newPos
-objType "monitors"
-noExecuteClipMask
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 176
-y 4
-w 248
-h 32
-
-beginGroup
-
-# (Text Monitor)
-object activeXTextDspClass:noedit
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 264
-y 20
-w 160
-h 14
-controlPv "$(apc):LOCATION"
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 4
-useDisplayBg
-autoHeight
-limitsFromDb
-nullColor index 18
-useHexPrefix
-newPos
-objType "monitors"
-endObjectProperties
-
-# (Text Monitor)
-object activeXTextDspClass:noedit
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 264
-y 4
-w 160
-h 14
-controlPv "$(apc):CPLRBTSLOT$(m)"
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 4
-useDisplayBg
-autoHeight
-limitsFromDb
-nullColor index 18
-useHexPrefix
-newPos
-objType "monitors"
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 176
-y 4
-w 80
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 4
-useDisplayBg
-value {
-  "Module Type:"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 176
-y 20
-w 80
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 4
-useDisplayBg
-value {
-  "Location:"
-}
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
diff --git a/Bx9000_MBTApp/srcDisplay/KL3162.edl b/Bx9000_MBTApp/srcDisplay/KL3162.edl
deleted file mode 100644
index cbc095b..0000000
--- a/Bx9000_MBTApp/srcDisplay/KL3162.edl
+++ /dev/null
@@ -1,677 +0,0 @@
-4 0 1
-beginScreenProperties
-major 4
-minor 0
-release 1
-x 140
-y 51
-w 780
-h 250
-font "helvetica-medium-r-10.0"
-ctlFont "helvetica-medium-r-10.0"
-btnFont "helvetica-medium-r-10.0"
-fgColor index 14
-bgColor index 7
-textColor index 14
-ctlFgColor1 index 25
-ctlFgColor2 index 18
-ctlBgColor1 index 4
-ctlBgColor2 index 4
-topShadowColor index 1
-botShadowColor index 11
-title "Analog - Analog Diagnostic - $(apc)"
-showGrid
-snapToGrid
-gridSize 4
-endScreenProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 8
-y 64
-w 760
-h 140
-lineColor index 3
-fill
-fillColor index 3
-endObjectProperties
-
-# (Related Display)
-object relatedDisplayClass
-beginObjectProperties
-major 4
-minor 2
-release 0
-x 216
-y 108
-w 120
-h 16
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-font "helvetica-medium-r-10.0"
-invisible
-numPvs 4
-numDsps 1
-displayFileName {
-  0 "analog_limits"
-}
-setPosition {
-  0 "button"
-}
-symbols {
-  0 "dev=$(apc):M$(m)_CH1_EGU"
-}
-endObjectProperties
-
-# (Related Display)
-object relatedDisplayClass
-beginObjectProperties
-major 4
-minor 2
-release 0
-x 216
-y 136
-w 124
-h 20
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-font "helvetica-medium-r-10.0"
-invisible
-numPvs 4
-numDsps 1
-displayFileName {
-  0 "analog_limits"
-}
-setPosition {
-  0 "button"
-}
-symbols {
-  0 "dev=$(apc):M$(m)_CH1_EGU"
-}
-endObjectProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 0
-y 0
-w 912
-h 40
-lineColor index 54
-fill
-fillColor index 54
-lineWidth 0
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 848
-y 8
-w 48
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-label "Exit"
-font "helvetica-medium-r-12.0"
-3d
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 0
-w 336
-h 40
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 53
-useDisplayBg
-value {
-  "Analog Diagnostic"
-  "$(apc)  Module $(m)    "
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 56
-w 105
-h 14
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-value {
-  " Analog Channels "
-}
-autoSize
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 344
-y 80
-w 144
-h 16
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Channel Name"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 600
-y 208
-w 168
-h 16
-controlPv "SIOC:SYS0:AL00:TOD"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 8
-y 208
-w 120
-h 16
-controlPv "SIOC:SYS0:AL00:MODE"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-endObjectProperties
-
-# (Related Display)
-object relatedDisplayClass
-beginObjectProperties
-major 4
-minor 2
-release 0
-x 616
-y 8
-w 96
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-font "helvetica-medium-r-12.0"
-buttonLabel "Home Screen..."
-numPvs 4
-numDsps 1
-displayFileName {
-  0 "lcls_main"
-}
-setPosition {
-  0 "parentWindow"
-}
-replaceSymbols {
-  0 1
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 208
-y 80
-w 120
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "EGU"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 88
-y 80
-w 120
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Raw (Volts)"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 80
-w 80
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Channel"
-}
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 720
-y 8
-w 48
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-label "Exit"
-font "helvetica-medium-r-12.0"
-3d
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 552
-y 80
-w 144
-h 16
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Description"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 104
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH1_EGU.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 104
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "1"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 136
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH2_EGU.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 136
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "2"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 552
-y 136
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH2_EGU.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 552
-y 104
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH1_EGU.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Text Control)
-object activeXTextDspClass
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 216
-y 136
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH2_EGU"
-format "decimal"
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-fgAlarm
-bgColor index 4
-limitsFromDb
-nullColor index 4
-nullCondition "nullEq0"
-showUnits
-useAlarmBorder
-newPos
-objType "monitors"
-noExecuteClipMask
-endObjectProperties
-
-# (Text Control)
-object activeXTextDspClass
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 216
-y 104
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH1_EGU"
-format "decimal"
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-fgAlarm
-bgColor index 4
-limitsFromDb
-nullColor index 4
-nullCondition "nullEq0"
-showUnits
-useAlarmBorder
-newPos
-objType "monitors"
-noExecuteClipMask
-endObjectProperties
-
-# (Text Control)
-object activeXTextDspClass
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 88
-y 136
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH2_SIG"
-format "decimal"
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-fgAlarm
-bgColor index 4
-limitsFromDb
-nullColor index 4
-nullCondition "nullEq0"
-useAlarmBorder
-newPos
-objType "monitors"
-noExecuteClipMask
-endObjectProperties
-
-# (Text Control)
-object activeXTextDspClass
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 88
-y 104
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH1_SIG"
-format "decimal"
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-fgAlarm
-bgColor index 4
-limitsFromDb
-nullColor index 4
-nullCondition "nullEq0"
-useAlarmBorder
-newPos
-objType "monitors"
-noExecuteClipMask
-endObjectProperties
-
-# (Group)
-object activeGroupClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 176
-y 4
-w 248
-h 32
-
-beginGroup
-
-# (Text Monitor)
-object activeXTextDspClass:noedit
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 264
-y 20
-w 160
-h 14
-controlPv "$(apc):LOCATION"
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 4
-useDisplayBg
-autoHeight
-limitsFromDb
-nullColor index 18
-useHexPrefix
-newPos
-objType "monitors"
-endObjectProperties
-
-# (Text Monitor)
-object activeXTextDspClass:noedit
-beginObjectProperties
-major 4
-minor 5
-release 0
-x 264
-y 4
-w 160
-h 14
-controlPv "$(apc):CPLRBTSLOT$(m)"
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 4
-useDisplayBg
-autoHeight
-limitsFromDb
-nullColor index 18
-useHexPrefix
-newPos
-objType "monitors"
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 176
-y 4
-w 80
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 4
-useDisplayBg
-value {
-  "Module Type:"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 176
-y 20
-w 80
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-fgColor index 14
-bgColor index 4
-useDisplayBg
-value {
-  "Location:"
-}
-endObjectProperties
-
-endGroup
-
-endObjectProperties
-
diff --git a/Bx9000_MBTApp/srcDisplay/KL3162_sum.edl b/Bx9000_MBTApp/srcDisplay/KL3162_sum.edl
deleted file mode 100644
index f3ef5d6..0000000
--- a/Bx9000_MBTApp/srcDisplay/KL3162_sum.edl
+++ /dev/null
@@ -1,106 +0,0 @@
-4 0 1
-beginScreenProperties
-major 4
-minor 0
-release 1
-x 2287
-y 254
-w 75
-h 140
-font "helvetica-medium-r-18.0"
-ctlFont "helvetica-medium-r-18.0"
-btnFont "helvetica-medium-r-18.0"
-fgColor index 14
-bgColor index 7
-textColor index 14
-ctlFgColor1 index 14
-ctlFgColor2 index 0
-ctlBgColor1 index 0
-ctlBgColor2 index 14
-topShadowColor index 0
-botShadowColor index 14
-showGrid
-endScreenProperties
-
-# (Related Display)
-object relatedDisplayClass
-beginObjectProperties
-major 4
-minor 2
-release 0
-x 3
-y 3
-w 31
-h 110
-fgColor index 14
-bgColor index 4
-topShadowColor index 14
-botShadowColor index 11
-font "helvetica-medium-r-10.0"
-numPvs 4
-numDsps 1
-displayFileName {
-  0 "KL3162.edl"
-}
-setPosition {
-  0 "parentWindow"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 10
-y 7
-w 22
-h 12
-font "helvetica-medium-r-10.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 4
-useDisplayBg
-value {
-  "$(m)"
-}
-autoSize
-endObjectProperties
-
-# (Circle)
-object activeCircleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 15
-y 38
-w 8
-h 8
-lineColor index 14
-fill
-fillColor index 16
-fillAlarm
-alarmPv "$(apc):M$(m)_CH1_SIG"
-visInvert
-endObjectProperties
-
-# (Circle)
-object activeCircleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 15
-y 74
-w 8
-h 8
-lineColor index 14
-fill
-fillColor index 16
-fillAlarm
-alarmPv "$(apc):M$(m)_CH2_SIG"
-visInvert
-endObjectProperties
-
diff --git a/Bx9000_MBTApp/srcDisplay/KL3202-RTD-lcls.edl b/Bx9000_MBTApp/srcDisplay/KL3202-RTD-lcls.edl
deleted file mode 100644
index adc3b24..0000000
--- a/Bx9000_MBTApp/srcDisplay/KL3202-RTD-lcls.edl
+++ /dev/null
@@ -1,497 +0,0 @@
-4 0 1
-beginScreenProperties
-major 4
-minor 0
-release 1
-x 275
-y 345
-w 780
-h 195
-font "helvetica-medium-r-10.0"
-ctlFont "helvetica-medium-r-10.0"
-btnFont "helvetica-medium-r-10.0"
-fgColor index 14
-bgColor index 7
-textColor index 14
-ctlFgColor1 index 25
-ctlFgColor2 index 18
-ctlBgColor1 index 4
-ctlBgColor2 index 4
-topShadowColor index 1
-botShadowColor index 11
-title "Temperature - RTD Diagnostic - $(apc)"
-showGrid
-snapToGrid
-gridSize 8
-endScreenProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 0
-y 0
-w 912
-h 40
-lineColor index 54
-fill
-fillColor index 54
-lineWidth 0
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 848
-y 8
-w 48
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-label "Exit"
-font "helvetica-medium-r-12.0"
-3d
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 0
-w 248
-h 40
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 53
-useDisplayBg
-value {
-  "RTD Diagnostic"
-  "$(apc)  Module $(m)    $(apc):LOCATION"
-}
-endObjectProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 8
-y 64
-w 760
-h 112
-lineColor index 3
-fill
-fillColor index 3
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 56
-w 88
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-value {
-  "RTD Channels"
-}
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 88
-y 104
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH1_TEMP.A"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 104
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH1_TEMP.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 344
-y 80
-w 144
-h 16
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Channel Name"
-}
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 600
-y 176
-w 168
-h 16
-controlPv "SIOC:SYS0:AL00:TOD"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 16
-y 176
-w 120
-h 16
-controlPv "SIOC:SYS0:AL00:MODE"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-endObjectProperties
-
-# (Related Display)
-object relatedDisplayClass
-beginObjectProperties
-major 4
-minor 2
-release 0
-x 656
-y 8
-w 96
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-font "helvetica-medium-r-12.0"
-buttonLabel "Home Screen..."
-numPvs 4
-numDsps 1
-displayFileName {
-  0 "lcls_main"
-}
-setPosition {
-  0 "parentWindow"
-}
-replaceSymbols {
-  0 1
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 208
-y 80
-w 120
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "T (DegF)"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 88
-y 80
-w 120
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "T (DegC)"
-}
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 216
-y 104
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH1_TEMP"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 104
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "1"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 80
-w 80
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Channel"
-}
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 88
-y 136
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH2_TEMP.A"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 136
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH2_TEMP.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 216
-y 136
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH2_TEMP"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 136
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "2"
-}
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 584
-y 8
-w 48
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-label "Exit"
-font "helvetica-medium-r-12.0"
-3d
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 544
-y 80
-w 144
-h 16
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Description"
-}
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 544
-y 136
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH2_TEMP.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Textupdate)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 544
-y 104
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH1_TEMP.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
diff --git a/Bx9000_MBTApp/srcDisplay/KL3314-TC-lcls.edl b/Bx9000_MBTApp/srcDisplay/KL3314-TC-lcls.edl
deleted file mode 100644
index c9aba99..0000000
--- a/Bx9000_MBTApp/srcDisplay/KL3314-TC-lcls.edl
+++ /dev/null
@@ -1,697 +0,0 @@
-4 0 1
-beginScreenProperties
-major 4
-minor 0
-release 1
-x 1707
-y 730
-w 780
-h 260
-font "helvetica-medium-r-10.0"
-ctlFont "helvetica-medium-r-10.0"
-btnFont "helvetica-medium-r-10.0"
-fgColor index 14
-bgColor index 7
-textColor index 14
-ctlFgColor1 index 25
-ctlFgColor2 index 18
-ctlBgColor1 index 4
-ctlBgColor2 index 4
-topShadowColor index 1
-botShadowColor index 11
-title "Temperature - Thermocouple Diagnostic - $(apc)"
-showGrid
-snapToGrid
-gridSize 8
-endScreenProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 0
-y 0
-w 912
-h 40
-lineColor index 54
-fill
-fillColor index 54
-lineWidth 0
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 848
-y 8
-w 48
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-label "Exit"
-font "helvetica-medium-r-12.0"
-3d
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 0
-w 336
-h 40
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 53
-useDisplayBg
-value {
-  "Thermocouple Diagnostic"
-  "$(apc)  Module $(m)     $(apc):LOCATION"
-}
-endObjectProperties
-
-# (Rectangle)
-object activeRectangleClass
-beginObjectProperties
-major 4
-minor 0
-release 0
-x 8
-y 64
-w 760
-h 176
-lineColor index 3
-fill
-fillColor index 3
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 56
-w 88
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-value {
-  "TC Channels"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 88
-y 104
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH1_SIG"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 104
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH1_TEMP.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 344
-y 80
-w 144
-h 16
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Channel Name"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 600
-y 240
-w 168
-h 16
-controlPv "SIOC:SYS0:AL00:TOD"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-fontAlign "right"
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 8
-y 240
-w 120
-h 16
-controlPv "SIOC:SYS0:AL00:MODE"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-endObjectProperties
-
-# (Related Display)
-object relatedDisplayClass
-beginObjectProperties
-major 4
-minor 2
-release 0
-x 616
-y 8
-w 96
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-font "helvetica-medium-r-12.0"
-buttonLabel "Home Screen..."
-numPvs 4
-numDsps 1
-displayFileName {
-  0 "lcls_main"
-}
-setPosition {
-  0 "parentWindow"
-}
-replaceSymbols {
-  0 1
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 208
-y 80
-w 120
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "T (DegF)"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 88
-y 80
-w 120
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "T (DegC)"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 216
-y 104
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH1_TEMP"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 104
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "1"
-}
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 8
-y 80
-w 80
-h 16
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Channel"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 88
-y 136
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH2_SIG"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 136
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH2_TEMP.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 216
-y 136
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH2_TEMP"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 136
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "2"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 88
-y 168
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH3_SIG"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 168
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH3_TEMP.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 216
-y 168
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH3_TEMP"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 168
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "3"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 88
-y 200
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH4_SIG"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 344
-y 200
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH4_TEMP.FLNK"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 216
-y 200
-w 120
-h 24
-controlPv "$(apc):M$(m)_CH4_TEMP"
-precision 1
-fgColor index 16
-fgAlarm
-bgColor index 12
-fill
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-lineWidth 2
-lineAlarm
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 32
-y 200
-w 32
-h 24
-font "helvetica-medium-r-12.0"
-fontAlign "center"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "4"
-}
-endObjectProperties
-
-# (Exit Button)
-object activeExitButtonClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 720
-y 8
-w 48
-h 24
-fgColor index 14
-bgColor index 4
-topShadowColor index 1
-botShadowColor index 11
-label "Exit"
-font "helvetica-medium-r-12.0"
-3d
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 552
-y 136
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH2_TEMP.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 552
-y 104
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH1_TEMP.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Static Text)
-object activeXTextClass
-beginObjectProperties
-major 4
-minor 1
-release 0
-x 552
-y 80
-w 144
-h 16
-font "helvetica-medium-r-12.0"
-fgColor index 14
-bgColor index 3
-useDisplayBg
-value {
-  "Description"
-}
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 552
-y 200
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH4_TEMP.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
-# (Text Update)
-object TextupdateClass
-beginObjectProperties
-major 10
-minor 0
-release 0
-x 552
-y 168
-w 192
-h 24
-controlPv "$(apc):M$(m)_CH3_TEMP.DESC"
-precision 1
-fgColor index 14
-bgColor index 12
-font "helvetica-medium-r-12.0"
-lineWidth 0
-endObjectProperties
-
diff --git a/Bx9000_MBTApp/srcDisplay/Makefile b/Bx9000_MBTApp/srcDisplay/Makefile
deleted file mode 100644
index 8651027..0000000
--- a/Bx9000_MBTApp/srcDisplay/Makefile
+++ /dev/null
@@ -1,36 +0,0 @@
-#  -*- Makefile -*-
-T_A = $EPICS_HOST_ARCH
-
-TOP = ../..
-include $(TOP)/configure/CONFIG
-#----------------------------------------
-#  ADD MACRO DEFINITIONS AFTER THIS LINE
-
-
-# EDM Screens to install
-EDLS += Bx9000Info.edl
-EDLS += Bx9000InstalledBTs.edl
-EDLS += Bx9000Info-lcls.edl 
-EDLS += KL3202-RTD-lcls.edl
-EDLS += KL3314-TC-lcls.edl
-EDLS += KL3162_sum.edl
-EDLS += KL3162.edl
-EDLS += Bx9000_analog_2chan.edl
-
-# Install images to be used by EDM (Gif and Png are supported)
-#GIFS += Myfirst.gif
-#PNGS += Myfirst.png
-
-# EDM Screens to install
-# # If you want to install all screens and are
-# # lazy use the wildcard method. :)
-## EDLS+=$(wildcard *.edl)
-# #PNGS+=$(wildcard *.png)
-# #GIFS+=$(wildcard *.gif)
-
-
-include $(TOP)/configure/RULES
-#----------------------------------------
-#  ADD RULES AFTER THIS LINE
-
-
diff --git a/Makefile b/Makefile
index d9d5bd1..7289de3 100644
--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,7 @@
 TOP = .
 include $(TOP)/configure/CONFIG
 DIRS := $(DIRS) $(filter-out $(DIRS), configure)
-DIRS := $(DIRS) $(filter-out $(DIRS), Bx9000_MBTApp)
+DIRS := $(DIRS) $(filter-out $(DIRS), Bk9000_MBTApp)
 DIRS := $(DIRS) $(filter-out $(DIRS), $(wildcard *App))
 DIRS := $(DIRS) $(filter-out $(DIRS), $(wildcard *app))
 DIRS := $(DIRS) $(filter-out $(DIRS), $(wildcard iocBoot))
diff --git a/edm-devel.cmd b/edm-devel.cmd
new file mode 100755
index 0000000..3f03c18
--- /dev/null
+++ b/edm-devel.cmd
@@ -0,0 +1,27 @@
+#! /bin/bash
+
+# Setup edm environment
+export EPICS_SITE_TOP=/reg/g/pcds/package/epics/3.14
+export EPICS_HOST_ARCH=$($EPICS_SITE_TOP/base/current/startup/EpicsHostArch.pl)
+
+export EPICS_CA_MAX_ARRAY_BYTES=8000000
+export EDMFILES=$EPICS_SITE_TOP/extensions/current/templates/edm
+export EDMFILTERS=$EPICS_SITE_TOP/extensions/current/templates/edm
+export EDMHELPFILES=$EPICS_SITE_TOP/extensions/current/src/edm/helpFiles
+export EDMLIBS=$EPICS_SITE_TOP/extensions/current/lib/$EPICS_HOST_ARCH
+export EDMOBJECTS=$EPICS_SITE_TOP/extensions/current/templates/edm
+export EDMPVOBJECTS=$EPICS_SITE_TOP/extensions/current/templates/edm
+export EDMUSERLIB=$EPICS_SITE_TOP/extensions/current/lib/$EPICS_HOST_ARCH
+export EDMACTIONS=/reg/g/pcds/package/tools/edm/config
+export EDMWEBBROWSER=mozilla
+export PATH=$PATH:$EPICS_SITE_TOP/extensions/current/bin/$EPICS_HOST_ARCH
+export PATH=$PATH:$EPICS_SITE_TOP/base/current/bin/$EPICS_HOST_ARCH
+export EDMDATAFILES=".:.."
+
+edm -x	-eolc		\
+	-m "IOC=LAS:R52:IOC:49"	\
+	-m "TC=LAS:R50:BHC:09:KL3314:SLOT2:TEMP3"	\
+	Bk9000Screens/emb-thermocouple-detail.edl	\
+	Bk9000Screens/thermocouple-detail-1.edl		\
+	&
+
diff --git a/iocBoot/iocBK9KSoftTest/st.cmd b/iocBoot/iocBK9KSoftTest/st.cmd
index 0887252..f372d47 100755
--- a/iocBoot/iocBK9KSoftTest/st.cmd
+++ b/iocBoot/iocBK9KSoftTest/st.cmd
@@ -19,47 +19,47 @@ BK9KSoftTest_registerRecordDeviceDriver(pdbbase)
 # ----------------------------------------------------------------------
 
 # Add coupler
-# Bx9000_Coupler_Add( UINT8 * cplrname, UINT8 * ipaddr, UINT8 * init_string)
-Bx9000_Coupler_Add("ics-test-bh3","160.91.229.182",0)
+# Bk9000_Coupler_Add( UINT8 * cplrname, UINT8 * ipaddr, UINT8 * init_string)
+Bk9000_Coupler_Add("ics-test-bh3","160.91.229.182",0)
 # Add terminals to the coupler
-# Bx9000_Terminal_Add( UINT8 * cplrname, UINT16 slot, UINT8 * btname, UINT8 * init_string)
-Bx9000_Terminal_Add("ics-test-bh3", 1, "KL9505", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 2, "KL3314", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 3, "KL3312", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 4, "KL2408", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 5, "KL1104", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 6, "KL2622", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 7, "KL1408", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 8, "KL3102", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 9, "KL4132", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 10, "KL2124", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 11, "KL1124", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 12, "KL3064", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 13, "KL4002", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 14, "KL3468", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 15, "KL3408", 0)
-Bx9000_Terminal_Add("ics-test-bh3", 16, "KL9010", 0)
+# Bk9000_Terminal_Add( UINT8 * cplrname, UINT16 slot, UINT8 * btname, UINT8 * init_string)
+Bk9000_Terminal_Add("ics-test-bh3", 1, "KL9505", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 2, "KL3314", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 3, "KL3312", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 4, "KL2408", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 5, "KL1104", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 6, "KL2622", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 7, "KL1408", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 8, "KL3102", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 9, "KL4132", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 10, "KL2124", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 11, "KL1124", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 12, "KL3064", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 13, "KL4002", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 14, "KL3468", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 15, "KL3408", 0)
+Bk9000_Terminal_Add("ics-test-bh3", 16, "KL9010", 0)
 
 #######################################################
 #####   Load "Fully instantiated" databases here  #####
 #######################################################
 ## Load record instances
-cd ${TOP}/iocBoot/${IOC}
-dbLoadTemplate("Bx9000Info-test.instance")
-dbLoadTemplate("KL1124-test.instance")
-dbLoadTemplate("KL2124-test.instance")
-dbLoadTemplate("KL3064-test.instance")
-dbLoadTemplate("KL3102-test.instance")
-dbLoadTemplate("KL4132-test.instance")
-dbLoadTemplate("KL4002-test.instance")
-dbLoadTemplate("KL3312-test.instance")
-dbLoadTemplate("KL3314-test.instance")
-dbLoadTemplate("KL1408-test.instance")
-dbLoadTemplate("KL2408-test.instance")
-dbLoadTemplate("KL2622-test.instance")
-dbLoadTemplate("KL1104-test.instance")
-dbLoadTemplate("KL3468-test.instance")
-dbLoadTemplate("KL3408-test.instance")
+cd ${TOP}/db
+dbLoadRecords("Bk9000.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL1124.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL2124.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL3064.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL3102.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL4132.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL4002.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL3312.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL3314.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL1408.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL2408.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL2622.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL1104.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL3468.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
+dbLoadRecords("KL3408.db", "COUPLER=ics-test-bh3,COUPLER_LOC=AMO:R01:IOC:07")
 ######################################################
 ### ---------- Database loading complete ----------###
 #######################################################
